import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
  id 'groovy'
  id 'java'
}

group = 'org.folio'
version = '1.0-SNAPSHOT'

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

repositories {
  mavenCentral()
  maven { url "https://repo.jenkins-ci.org/public/" }
  maven { url "https://repo.jenkins-ci.org/releases/" }
  gradlePluginPortal()
}

ext {
  junitVersion = '5.10.0'
  mockitoVersion = '5.10.0'
  pipelineUnitVersion = '1.15' // Update as needed
}

dependencies {
  implementation 'org.kohsuke:pom:21'
  implementation 'args4j:args4j:2.37'

  testImplementation platform("org.junit:junit-bom:${junitVersion}")
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
  testImplementation "com.lesfurets:jenkins-pipeline-unit:${pipelineUnitVersion}"
}

configurations {
  jenkinsPlugins
}

test {
  useJUnitPlatform()
}

def jenkinsResourcesFolder = 'jenkinsResources'
def pipelinesFolder = 'pipelines'
def allSrcDirs = [pipelinesFolder, jenkinsResourcesFolder, 'vars', 'src', 'scripts']
def jenkinsPluginGroups = [
  "io.jenkins.plugins",
  "org.jenkinsci.plugins",
  "org.jenkins-ci",
  "org.jenkins-ci.main",
  "org.jenkins-ci.lib",
  "org.jenkins-ci.modules",
  "org.jenkins-ci.plugins",
  "org.jenkins-ci.plugins.workflow",
  "org.jenkins-ci.plugins.aws-java-sdk",
  "org.jenkins-ci.plugins.pipeline-stage-view",
  "jp.ikedam.jenkins.plugins",
  "io.jenkins.blueocean",
  "org.csanchez.jenkins.plugins"
]

sourceSets {
  main {
    groovy {
      srcDirs = allSrcDirs
      exclude 'resources'
    }
    java {
      srcDirs = allSrcDirs
      exclude 'resources'
    }
  }
  test {
    groovy {
      srcDirs = ['test']
    }
    resources {
      srcDirs = ['test/resources']
    }
    compileClasspath += configurations.jenkinsPlugins
    runtimeClasspath += configurations.jenkinsPlugins
  }
}


// Optional plugin resolution logic from plugins.json remains if needed
tasks.register('collectPluginDependencies') {
  outputs.file("${jenkinsResourcesFolder}/dependencies.json")
  doLast {
    def excludedPlugins = [] as Set
    def pluginsFile = file("${jenkinsResourcesFolder}/plugins.json")
    def dependencies = []
    def notResolvedPlugins = []

    if (pluginsFile.exists()) {
      def contents = new JsonSlurper().parse(pluginsFile)

      contents.plugins.each { plugin ->
        if (excludedPlugins.contains(plugin.shortName)) {
          logger.lifecycle("Plugin '${plugin.shortName}' is skipped")
        } else if (plugin.active && plugin.enabled) {
          def resolved = jenkinsPluginGroups.find { group ->
            if (resolvePluginDependency(group, plugin.shortName, plugin.version)) {
              dependencies.add([group: group, name: plugin.shortName, version: plugin.version])
              return true
            }
            return false
          }

          if (!resolved) {
            notResolvedPlugins.add(plugin.shortName)
          }
        }
      }

      logger.lifecycle("Not resolved plugins: ${notResolvedPlugins.join(', ')}")
      def output = file("${jenkinsResourcesFolder}/dependencies.json")
      output.text = JsonOutput.prettyPrint(JsonOutput.toJson([dependencies: dependencies]))
    } else {
      logger.warn("plugins.json not found at ${pluginsFile}")
    }
  }
}

def depsFile = file("${jenkinsResourcesFolder}/dependencies.json")
if (depsFile.exists()) {
  def resolved = new JsonSlurper().parse(depsFile)
  resolved.dependencies.each { dep ->
    println(dep)
    dependencies.add("jenkinsPlugins", "${dep.group}:${dep.name}:${dep.version}")
  }
}

def resolvePluginDependency(String group, String name, String version) {
  def uniqueConfigName = "resolvePluginTmp-${UUID.randomUUID().toString().replace('-', '')}"
  def config = project.configurations.create(uniqueConfigName)
  config.setCanBeResolved(true)
  config.setVisible(false)
  config.setTransitive(false)

  def dep = "$group:$name:$version"
  config.dependencies.add(project.dependencies.create(dep))

  try {
    config.resolve()
    println "Resolved plugin dependency: $dep"
    return true
  } catch (Exception e) {
    println "Failed to resolve plugin dependency: $dep â€“ ${e.message}"
    return false
  } finally {
    project.configurations.remove(config)
  }
}