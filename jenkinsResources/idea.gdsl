
//The global script scope
def ctx = context(scope: scriptScope())
contributor(ctx) {
method(name: 'parallel', type: 'Object', params: ['closures':'java.util.Map'], doc: 'Execute in parallel')
method(name: 'parallel', type: 'Object', namedParams: [parameter(name: 'closures', type: 'java.util.Map'), parameter(name: 'failFast', type: 'boolean'), ], doc: 'Execute in parallel')
method(name: 'ansiColor', type: 'Object', params: [colorMapName:java.lang.String, body:'Closure'], doc: 'Color ANSI Console Output')
method(name: 'awaitDeploymentCompletion', type: 'Object', params: [deploymentId:'java.lang.String'], doc: 'Wait for AWS CodeDeploy deployment completion')
method(name: 'awsIdentity', type: 'Object', params: [:], doc: 'Print and return the AWS identity')
method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Catch error and set build result to failure')
method(name: 'catchError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'buildResult', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'stageResult', type: 'java.lang.String'), ], doc: 'Catch error and set build result to failure')
method(name: 'cfInvalidate', type: 'Object', namedParams: [parameter(name: 'distribution', type: 'java.lang.String'), parameter(name: 'paths', type: 'Map'), parameter(name: 'waitForCompletion', type: 'boolean'), ], doc: 'Invalidate given paths in CloudFront distribution')
method(name: 'cfnDelete', type: 'Object', params: [stack:'java.lang.String'], doc: 'Delete CloudFormation stack')
method(name: 'cfnDelete', type: 'Object', namedParams: [parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'clientRequestToken', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'long'), parameter(name: 'retainResources', type: 'Map'), parameter(name: 'roleArn', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), ], doc: 'Delete CloudFormation stack')
method(name: 'cfnDeleteStackSet', type: 'Object', params: [stackSet:'java.lang.String'], doc: 'Delete CloudFormation Stack Set')
method(name: 'cfnDeleteStackSet', type: 'Object', namedParams: [parameter(name: 'stackSet', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), ], doc: 'Delete CloudFormation Stack Set')
method(name: 'cfnDescribe', type: 'Object', params: [stack:'java.lang.String'], doc: 'Describe outputs of CloudFormation stack')
method(name: 'cfnExecuteChangeSet', type: 'Object', namedParams: [parameter(name: 'changeSet', type: 'java.lang.String'), parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), ], doc: 'Execute CloudFormation change set')
method(name: 'cfnExports', type: 'Object', params: [:], doc: 'Describe CloudFormation global exports')
method(name: 'cfnUpdateStackSet', type: 'Object', params: [stackSet:'java.lang.String'], doc: 'Create or Update CloudFormation Stack Set')
method(name: 'cfnUpdateStackSet', type: 'Object', namedParams: [parameter(name: 'stackSet', type: 'java.lang.String'), parameter(name: 'administratorRoleArn', type: 'java.lang.String'), parameter(name: 'batchingOptions', type: 'Map'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'executionRoleName', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'notificationARNs', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'operationPreferences', type: 'Map'), parameter(name: 'params', type: 'java.lang.Object'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'rollbackTimeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'rollbackTriggers', type: 'Map'), parameter(name: 'tags', type: 'Map'), parameter(name: 'tagsFile', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create or Update CloudFormation Stack Set')
method(name: 'compareVersions', type: 'Object', namedParams: [parameter(name: 'v1', type: 'java.lang.String'), parameter(name: 'v2', type: 'java.lang.String'), parameter(name: 'failIfEmpty', type: 'boolean'), ], doc: 'Compare two version number strings')
method(name: 'createDeployment', type: 'Object', params: [:], doc: 'Deploys an application revision through the specified deployment group (AWS CodeDeploy).')
method(name: 'createDeployment', type: 'Object', namedParams: [parameter(name: 'applicationName', type: 'java.lang.String'), parameter(name: 'deploymentConfigName', type: 'java.lang.String'), parameter(name: 'deploymentGroupName', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'fileExistsBehavior', type: 'java.lang.String'), parameter(name: 'gitHubCommitId', type: 'java.lang.String'), parameter(name: 'gitHubRepository', type: 'java.lang.String'), parameter(name: 'ignoreApplicationStopFailures', type: 'java.lang.Boolean'), parameter(name: 's3Bucket', type: 'java.lang.String'), parameter(name: 's3BundleType', type: 'java.lang.String'), parameter(name: 's3Key', type: 'java.lang.String'), parameter(name: 'waitForCompletion', type: 'java.lang.Boolean'), ], doc: 'Deploys an application revision through the specified deployment group (AWS CodeDeploy).')
method(name: 'deployAPI', type: 'Object', namedParams: [parameter(name: 'api', type: 'java.lang.String'), parameter(name: 'stage', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'variables', type: 'Map'), ], doc: 'Deploy the given API Gateway API')
method(name: 'dockerNode', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Docker Node (\u26A0\uFE0F Experimental)')
method(name: 'dockerNode', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'connector', type: 'Map'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'dockerHost', type: 'java.lang.String'), parameter(name: 'remoteFs', type: 'java.lang.String'), ], doc: 'Docker Node (\u26A0\uFE0F Experimental)')
method(name: 'ebCreateApplication', type: 'Object', params: [applicationName:'java.lang.String'], doc: 'Creates a new Elastic Beanstalk application')
method(name: 'ebCreateApplication', type: 'Object', namedParams: [parameter(name: 'applicationName', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), ], doc: 'Creates a new Elastic Beanstalk application')
method(name: 'ebCreateApplicationVersion', type: 'Object', namedParams: [parameter(name: 'applicationName', type: 'java.lang.String'), parameter(name: 'versionLabel', type: 'java.lang.String'), parameter(name: 's3Bucket', type: 'java.lang.String'), parameter(name: 's3Key', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), ], doc: 'Creates a new version for an elastic beanstalk application')
method(name: 'ebCreateConfigurationTemplate', type: 'Object', namedParams: [parameter(name: 'applicationName', type: 'java.lang.String'), parameter(name: 'templateName', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'environmentId', type: 'java.lang.String'), parameter(name: 'solutionStackName', type: 'java.lang.String'), parameter(name: 'sourceConfigurationApplication', type: 'java.lang.String'), parameter(name: 'sourceConfigurationTemplate', type: 'java.lang.String'), ], doc: 'Creates a new configuration template for an elastic beanstalk application')
method(name: 'ebCreateEnvironment', type: 'Object', namedParams: [parameter(name: 'applicationName', type: 'java.lang.String'), parameter(name: 'environmentName', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'solutionStackName', type: 'java.lang.String'), parameter(name: 'templateName', type: 'java.lang.String'), parameter(name: 'updateOnExisting', type: 'boolean'), parameter(name: 'versionLabel', type: 'java.lang.String'), ], doc: 'Creates a new Elastic Beanstalk environment')
method(name: 'ebSwapEnvironmentCNAMEs', type: 'Object', params: [:], doc: 'Swaps the CNAMEs of two elastic beanstalk environments.')
method(name: 'ebSwapEnvironmentCNAMEs', type: 'Object', namedParams: [parameter(name: 'destinationEnvironmentId', type: 'java.lang.String'), parameter(name: 'destinationEnvironmentName', type: 'java.lang.String'), parameter(name: 'sourceEnvironmentId', type: 'java.lang.String'), parameter(name: 'sourceEnvironmentName', type: 'java.lang.String'), ], doc: 'Swaps the CNAMEs of two elastic beanstalk environments.')
method(name: 'ebWaitOnEnvironmentHealth', type: 'Object', namedParams: [parameter(name: 'applicationName', type: 'java.lang.String'), parameter(name: 'environmentName', type: 'java.lang.String'), parameter(name: 'health', type: 'java.lang.String'), parameter(name: 'stabilityThreshold', type: 'int'), ], doc: 'Waits until the specified environment application becomes available')
method(name: 'ebWaitOnEnvironmentStatus', type: 'Object', namedParams: [parameter(name: 'applicationName', type: 'java.lang.String'), parameter(name: 'environmentName', type: 'java.lang.String'), parameter(name: 'status', type: 'java.lang.String'), ], doc: 'Waits until the specified environment becomes available')
method(name: 'ec2', type: 'Object', namedParams: [parameter(name: 'cloud', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), ], doc: 'Cloud template provisioning')
method(name: 'ec2ShareAmi', type: 'Object', params: [:], doc: 'Share an AMI with other accounts')
method(name: 'ec2ShareAmi', type: 'Object', namedParams: [parameter(name: 'accountIds', type: 'java.util.List'), parameter(name: 'amiId', type: 'java.lang.String'), ], doc: 'Share an AMI with other accounts')
method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
method(name: 'ecrDeleteImage', type: 'Object', params: [:], doc: 'Delete ecr images')
method(name: 'ecrDeleteImage', type: 'Object', namedParams: [parameter(name: 'imageIds', type: 'java.util.List'), parameter(name: 'registryId', type: 'java.lang.String'), parameter(name: 'repositoryName', type: 'java.lang.String'), ], doc: 'Delete ecr images')
method(name: 'ecrListImages', type: 'Object', params: [:], doc: 'List ECR Images')
method(name: 'ecrListImages', type: 'Object', namedParams: [parameter(name: 'filter', type: 'Map'), parameter(name: 'registryId', type: 'java.lang.String'), parameter(name: 'repositoryName', type: 'java.lang.String'), ], doc: 'List ECR Images')
method(name: 'ecrLogin', type: 'Object', params: [:], doc: 'Create and return the ECR login string')
method(name: 'ecrLogin', type: 'Object', namedParams: [parameter(name: 'email', type: 'java.lang.Boolean'), parameter(name: 'registryIds', type: 'java.util.List'), ], doc: 'Create and return the ECR login string')
method(name: 'ecrSetRepositoryPolicy', type: 'Object', params: [:], doc: 'Set ECR Repository Policy')
method(name: 'ecrSetRepositoryPolicy', type: 'Object', namedParams: [parameter(name: 'policyText', type: 'java.lang.String'), parameter(name: 'registryId', type: 'java.lang.String'), parameter(name: 'repositoryName', type: 'java.lang.String'), ], doc: 'Set ECR Repository Policy')
method(name: 'elbDeregisterInstance', type: 'Object', params: [:], doc: 'Deregisters the specified instances from the specified load balancer.')
method(name: 'elbDeregisterInstance', type: 'Object', namedParams: [parameter(name: 'targetGroupARN', type: 'java.lang.String'), parameter(name: 'instanceID', type: 'java.lang.String'), parameter(name: 'port', type: 'int'), ], doc: 'Deregisters the specified instances from the specified load balancer.')
method(name: 'elbIsInstanceDeregistered', type: 'Object', params: [:], doc: 'Registers the specified instances from the specified load balancer.')
method(name: 'elbIsInstanceDeregistered', type: 'Object', namedParams: [parameter(name: 'targetGroupARN', type: 'java.lang.String'), parameter(name: 'instanceID', type: 'java.lang.String'), parameter(name: 'port', type: 'int'), ], doc: 'Registers the specified instances from the specified load balancer.')
method(name: 'elbIsInstanceRegistered', type: 'Object', params: [:], doc: 'Registers the specified instances from the specified load balancer.')
method(name: 'elbIsInstanceRegistered', type: 'Object', namedParams: [parameter(name: 'targetGroupARN', type: 'java.lang.String'), parameter(name: 'instanceID', type: 'java.lang.String'), parameter(name: 'port', type: 'int'), ], doc: 'Registers the specified instances from the specified load balancer.')
method(name: 'elbRegisterInstance', type: 'Object', params: [:], doc: 'Registers the specified instances from the specified load balancer.')
method(name: 'elbRegisterInstance', type: 'Object', namedParams: [parameter(name: 'targetGroupARN', type: 'java.lang.String'), parameter(name: 'instanceID', type: 'java.lang.String'), parameter(name: 'port', type: 'int'), ], doc: 'Registers the specified instances from the specified load balancer.')
method(name: 'emailext', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'attachLog', type: 'boolean'), parameter(name: 'attachmentsPattern', type: 'java.lang.String'), parameter(name: 'compressLog', type: 'boolean'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'postsendScript', type: 'java.lang.String'), parameter(name: 'presendScript', type: 'java.lang.String'), parameter(name: 'recipientProviders', type: 'java.util.List'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'saveOutput', type: 'boolean'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Extended Email')
method(name: 'emailextrecipients', type: 'Object', params: [recipientProviders:'java.util.List'], doc: 'Extended Email Recipients')
method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
method(name: 'findBuildScans', type: 'Object', params: [:], doc: 'Find published build scans')
method(name: 'githubNotify', type: 'Object', namedParams: [parameter(name: 'status', type: 'Map'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'account', type: 'java.lang.String'), parameter(name: 'context', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'gitApiUrl', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'sha', type: 'java.lang.String'), parameter(name: 'targetUrl', type: 'java.lang.String'), ], doc: 'Notifies GitHub of the status of a Pull Request')
method(name: 'httpRequest', type: 'Object', params: [url:'java.lang.String'], doc: 'Perform an HTTP Request and return a response object')
method(name: 'httpRequest', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'acceptType', type: 'Map'), parameter(name: 'authentication', type: 'java.lang.String'), parameter(name: 'consoleLogResponseBody', type: 'java.lang.Boolean'), parameter(name: 'contentType', type: 'Map'), parameter(name: 'customHeaders', type: 'java.util.List'), parameter(name: 'formData', type: 'java.util.List'), parameter(name: 'httpMode', type: 'Map'), parameter(name: 'httpProxy', type: 'java.lang.String'), parameter(name: 'ignoreSslErrors', type: 'boolean'), parameter(name: 'multipartName', type: 'java.lang.String'), parameter(name: 'outputFile', type: 'java.lang.String'), parameter(name: 'proxyAuthentication', type: 'java.lang.String'), parameter(name: 'quiet', type: 'java.lang.Boolean'), parameter(name: 'requestBody', type: 'java.lang.String'), parameter(name: 'responseHandle', type: 'Map'), parameter(name: 'timeout', type: 'java.lang.Integer'), parameter(name: 'uploadFile', type: 'java.lang.String'), parameter(name: 'useNtlm', type: 'boolean'), parameter(name: 'useSystemProperties', type: 'java.lang.Boolean'), parameter(name: 'validResponseCodes', type: 'java.lang.String'), parameter(name: 'validResponseContent', type: 'java.lang.String'), parameter(name: 'wrapAsMultipart', type: 'boolean'), ], doc: 'Perform an HTTP Request and return a response object')
method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
method(name: 'invokeLambda', type: 'Object', params: [functionName:'java.lang.String'], doc: 'Invoke a given Lambda function')
method(name: 'invokeLambda', type: 'Object', namedParams: [parameter(name: 'functionName', type: 'java.lang.String'), parameter(name: 'payload', type: 'java.lang.Object'), parameter(name: 'payloadAsString', type: 'java.lang.String'), parameter(name: 'returnValueAsString', type: 'boolean'), ], doc: 'Invoke a given Lambda function')
method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), ], doc: 'Jira: Add a comment to issue(s)')
method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'Jira: Issue selector')
method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'), ], doc: 'Jira: Issue selector')
method(name: 'jiraSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'Jira: Search issues')
method(name: 'lambdaVersionCleanup', type: 'Object', params: [daysAgo:'int'], doc: 'Cleanup old lambda versions')
method(name: 'lambdaVersionCleanup', type: 'Object', namedParams: [parameter(name: 'daysAgo', type: 'int'), parameter(name: 'functionName', type: 'java.lang.String'), parameter(name: 'stackName', type: 'java.lang.String'), ], doc: 'Cleanup old lambda versions')
method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
method(name: 'libraryResource', type: 'Object', namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Load a resource file from a shared library')
method(name: 'listAWSAccounts', type: 'Object', params: [:], doc: 'List all AWS accounts of the organization')
method(name: 'listAWSAccounts', type: 'Object', namedParams: [parameter(name: 'parent', type: 'java.lang.String'), ], doc: 'List all AWS accounts of the organization')
method(name: 'lock', type: 'Object', params: [resource:java.lang.String, body:'Closure'], doc: 'Lock shared resource')
method(name: 'lock', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'extra', type: 'java.util.List'), parameter(name: 'inversePrecedence', type: 'boolean'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'quantity', type: 'int'), parameter(name: 'skipIfLocked', type: 'boolean'), parameter(name: 'variable', type: 'java.lang.String'), ], doc: 'Lock shared resource')
method(name: 'logFileFilter', type: 'Object', params: [body:'Closure'], doc: 'LogFileFilterStep')
method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'unsafe', type: 'boolean'), ], doc: 'The milestone step forces all builds to go through in order')
method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
method(name: 'nodesByLabel', type: 'Object', params: [label:'java.lang.String'], doc: 'List of nodes by Label, by default excludes offline nodes.')
method(name: 'nodesByLabel', type: 'Object', namedParams: [parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'offline', type: 'boolean'), ], doc: 'List of nodes by Label, by default excludes offline nodes.')
method(name: 'properties', type: 'Object', params: [properties:'java.util.List'], doc: 'Set job properties')
method(name: 'publishChecks', type: 'Object', params: [:], doc: 'Publish customized checks to SCM platforms')
method(name: 'publishChecks', type: 'Object', namedParams: [parameter(name: 'actions', type: 'java.util.List'), parameter(name: 'annotations', type: 'java.util.List'), parameter(name: 'conclusion', type: 'Map'), parameter(name: 'detailsURL', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'status', type: 'Map'), parameter(name: 'summary', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'title', type: 'java.lang.String'), ], doc: 'Publish customized checks to SCM platforms')
method(name: 'readCSV', type: 'Object', params: [:], doc: 'Read content from a CSV file in the workspace.')
method(name: 'readCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'format', type: 'Map'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read content from a CSV file in the workspace.')
method(name: 'readJSON', type: 'Object', params: [:], doc: 'Read JSON from files in the workspace.')
method(name: 'readJSON', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'returnPojo', type: 'boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read JSON from files in the workspace.')
method(name: 'readManifest', type: 'Object', params: [:], doc: 'Read a Jar Manifest')
method(name: 'readManifest', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read a Jar Manifest')
method(name: 'readProperties', type: 'Object', params: [:], doc: 'Read properties from files in the workspace or text.')
method(name: 'readProperties', type: 'Object', namedParams: [parameter(name: 'defaults', type: 'java.util.Map'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'interpolate', type: 'java.lang.Boolean'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read properties from files in the workspace or text.')
method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
method(name: 'readYaml', type: 'Object', params: [:], doc: 'Read yaml from files in the workspace or text.')
method(name: 'readYaml', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Read yaml from files in the workspace or text.')
method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'java.util.List'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
method(name: 's3Copy', type: 'Object', namedParams: [parameter(name: 'fromBucket', type: 'java.lang.String'), parameter(name: 'fromPath', type: 'java.lang.String'), parameter(name: 'toBucket', type: 'java.lang.String'), parameter(name: 'toPath', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'acl', type: 'Map'), parameter(name: 'cacheControl', type: 'java.lang.String'), parameter(name: 'contentDisposition', type: 'java.lang.String'), parameter(name: 'contentType', type: 'java.lang.String'), parameter(name: 'kmsId', type: 'java.lang.String'), parameter(name: 'metadatas', type: 'Map'), parameter(name: 'sseAlgorithm', type: 'java.lang.String'), ], doc: 'Copy file between S3 buckets')
method(name: 's3Delete', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), ], doc: 'Delete file from S3')
method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
method(name: 'setAccountAlias', type: 'Object', params: [name:'java.lang.String'], doc: 'Set the AWS account alias')
method(name: 'slackSend', type: 'Object', params: [:], doc: 'Send Slack Message')
method(name: 'slackSend', type: 'Object', namedParams: [parameter(name: 'attachments', type: 'java.lang.Object'), parameter(name: 'baseUrl', type: 'java.lang.String'), parameter(name: 'blocks', type: 'java.lang.Object'), parameter(name: 'botUser', type: 'boolean'), parameter(name: 'channel', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'iconEmoji', type: 'java.lang.String'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'notifyCommitters', type: 'boolean'), parameter(name: 'replyBroadcast', type: 'boolean'), parameter(name: 'sendAsText', type: 'boolean'), parameter(name: 'teamDomain', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.String'), parameter(name: 'token', type: 'java.lang.String'), parameter(name: 'tokenCredentialId', type: 'java.lang.String'), parameter(name: 'username', type: 'java.lang.String'), ], doc: 'Send Slack Message')
method(name: 'slackUserIdFromEmail', type: 'Object', params: [email:'java.lang.String'], doc: 'Resolve Slack UserId from Email Address')
method(name: 'slackUserIdFromEmail', type: 'Object', namedParams: [parameter(name: 'email', type: 'java.lang.String'), parameter(name: 'botUser', type: 'boolean'), parameter(name: 'tokenCredentialId', type: 'java.lang.String'), ], doc: 'Resolve Slack UserId from Email Address')
method(name: 'slackUserIdsFromCommitters', type: 'Object', params: [:], doc: 'Resolve Slack UserIds from Changeset Authors')
method(name: 'slackUserIdsFromCommitters', type: 'Object', namedParams: [parameter(name: 'botUser', type: 'boolean'), parameter(name: 'tokenCredentialId', type: 'java.lang.String'), ], doc: 'Resolve Slack UserIds from Changeset Authors')
method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
method(name: 'snsPublish', type: 'Object', namedParams: [parameter(name: 'topicArn', type: 'java.lang.String'), parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'messageAttributes', type: 'java.util.Map'), ], doc: 'Publish notification to SNS')
method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
method(name: 'throttle', type: 'Object', params: [categories:java.util.List, body:'Closure'], doc: 'Throttle execution of node blocks within this body')
method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'activity', type: 'boolean'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')
method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
method(name: 'unstable', type: 'Object', params: [message:'java.lang.String'], doc: 'Set stage result to unstable')
method(name: 'waitForQualityGate', type: 'Object', params: [abortPipeline:'boolean'], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')
method(name: 'waitForQualityGate', type: 'Object', namedParams: [parameter(name: 'abortPipeline', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'webhookSecretId', type: 'java.lang.String'), ], doc: 'Wait for SonarQube analysis to be completed and return quality gate status')
method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
method(name: 'waitUntil', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'initialRecurrencePeriod', type: 'long'), parameter(name: 'quiet', type: 'boolean'), ], doc: 'Wait for condition')
method(name: 'warnError', type: 'Object', params: [message:java.lang.String, body:'Closure'], doc: 'Catch error and set build and stage result to unstable')
method(name: 'warnError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), ], doc: 'Catch error and set build and stage result to unstable')
method(name: 'withAWS', type: 'Object', params: [body:'Closure'], doc: 'set AWS settings for nested block')
method(name: 'withAWS', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'java.lang.String'), parameter(name: 'duration', type: 'java.lang.Integer'), parameter(name: 'endpointUrl', type: 'java.lang.String'), parameter(name: 'externalId', type: 'java.lang.String'), parameter(name: 'federatedUserId', type: 'java.lang.String'), parameter(name: 'iamMfaToken', type: 'java.lang.String'), parameter(name: 'policy', type: 'java.lang.String'), parameter(name: 'principalArn', type: 'java.lang.String'), parameter(name: 'profile', type: 'java.lang.String'), parameter(name: 'region', type: 'java.lang.String'), parameter(name: 'role', type: 'java.lang.String'), parameter(name: 'roleAccount', type: 'java.lang.String'), parameter(name: 'roleSessionName', type: 'java.lang.String'), parameter(name: 'samlAssertion', type: 'java.lang.String'), parameter(name: 'useNode', type: 'boolean'), ], doc: 'set AWS settings for nested block')
method(name: 'withChecks', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Inject checks properties into its closure')
method(name: 'withCredentials', type: 'Object', params: [bindings:java.util.List, body:'Closure'], doc: 'Bind credentials to variables')
method(name: 'withEnv', type: 'Object', params: [overrides:java.util.List, body:'Closure'], doc: 'Set environment variables')
method(name: 'withKubeConfig', type: 'Object', params: [body:'Closure'], doc: 'Configure Kubernetes CLI (kubectl)')
method(name: 'withKubeConfig', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'caCertificate', type: 'java.lang.String'), parameter(name: 'clusterName', type: 'java.lang.String'), parameter(name: 'contextName', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'namespace', type: 'java.lang.String'), parameter(name: 'serverUrl', type: 'java.lang.String'), ], doc: 'Configure Kubernetes CLI (kubectl)')
method(name: 'withKubeCredentials', type: 'Object', params: [body:'Closure'], doc: 'Configure Kubernetes CLI (kubectl) with multiple credentials')
method(name: 'withKubeCredentials', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'kubectlCredentials', type: 'java.util.List'), ], doc: 'Configure Kubernetes CLI (kubectl) with multiple credentials')
method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
method(name: 'writeJSON', type: 'Object', params: [json:'java.lang.Object'], doc: 'Write JSON to a file in the workspace.')
method(name: 'writeJSON', type: 'Object', namedParams: [parameter(name: 'json', type: 'java.lang.Object'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'pretty', type: 'int'), parameter(name: 'returnText', type: 'boolean'), ], doc: 'Write JSON to a file in the workspace.')
method(name: 'writeYaml', type: 'Object', params: [:], doc: 'Write a yaml from an object or objects.')
method(name: 'writeYaml', type: 'Object', namedParams: [parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'data', type: 'java.lang.Object'), parameter(name: 'datas', type: 'java.util.Collection'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'overwrite', type: 'boolean'), parameter(name: 'returnText', type: 'boolean'), ], doc: 'Write a yaml from an object or objects.')
method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')
method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
}
//Steps that require a node context
def nodeCtx = context(scope: closureScope())
contributor(nodeCtx) {
    def call = enclosingCall('node')
    if (call) {
method(name: 'ansiblePlaybook', type: 'Object', params: [playbook:'java.lang.String'], doc: 'Invoke an ansible playbook')
method(name: 'ansiblePlaybook', type: 'Object', namedParams: [parameter(name: 'playbook', type: 'java.lang.String'), parameter(name: 'become', type: 'boolean'), parameter(name: 'becomeUser', type: 'java.lang.String'), parameter(name: 'colorized', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'disableHostKeyChecking', type: 'boolean'), parameter(name: 'dynamicInventory', type: 'boolean'), parameter(name: 'extraVars', type: 'java.util.Map'), parameter(name: 'extras', type: 'java.lang.String'), parameter(name: 'forks', type: 'int'), parameter(name: 'hostKeyChecking', type: 'boolean'), parameter(name: 'installation', type: 'java.lang.String'), parameter(name: 'inventory', type: 'java.lang.String'), parameter(name: 'inventoryContent', type: 'java.lang.String'), parameter(name: 'limit', type: 'java.lang.String'), parameter(name: 'skippedTags', type: 'java.lang.String'), parameter(name: 'startAtTask', type: 'java.lang.String'), parameter(name: 'sudo', type: 'boolean'), parameter(name: 'sudoUser', type: 'java.lang.String'), parameter(name: 'tags', type: 'java.lang.String'), parameter(name: 'vaultCredentialsId', type: 'java.lang.String'), ], doc: 'Invoke an ansible playbook')
method(name: 'ansibleVault', type: 'Object', params: [:], doc: 'Invoke ansible vault')
method(name: 'ansibleVault', type: 'Object', namedParams: [parameter(name: 'action', type: 'java.lang.String'), parameter(name: 'content', type: 'java.lang.String'), parameter(name: 'input', type: 'java.lang.String'), parameter(name: 'installation', type: 'java.lang.String'), parameter(name: 'newVaultCredentialsId', type: 'java.lang.String'), parameter(name: 'output', type: 'java.lang.String'), parameter(name: 'vaultCredentialsId', type: 'java.lang.String'), ], doc: 'Invoke ansible vault')
method(name: 'bat', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows Batch Script')
method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows Batch Script')
method(name: 'cfnCreateChangeSet', type: 'Object', namedParams: [parameter(name: 'changeSet', type: 'java.lang.String'), parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'notificationARNs', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'params', type: 'java.lang.Object'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'roleArn', type: 'java.lang.String'), parameter(name: 'rollbackTimeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'rollbackTriggers', type: 'Map'), parameter(name: 'tags', type: 'Map'), parameter(name: 'tagsFile', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create CloudFormation change set')
method(name: 'cfnUpdate', type: 'Object', params: [stack:'java.lang.String'], doc: 'Create or Update CloudFormation stack')
method(name: 'cfnUpdate', type: 'Object', namedParams: [parameter(name: 'stack', type: 'java.lang.String'), parameter(name: 'create', type: 'java.lang.Boolean'), parameter(name: 'enableTerminationProtection', type: 'java.lang.Boolean'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'keepParams', type: 'Map'), parameter(name: 'notificationARNs', type: 'Map'), parameter(name: 'onFailure', type: 'java.lang.String'), parameter(name: 'params', type: 'java.lang.Object'), parameter(name: 'paramsFile', type: 'java.lang.String'), parameter(name: 'pollInterval', type: 'java.lang.Long'), parameter(name: 'roleArn', type: 'java.lang.String'), parameter(name: 'rollbackTimeoutInMinutes', type: 'java.lang.Integer'), parameter(name: 'rollbackTriggers', type: 'Map'), parameter(name: 'tags', type: 'Map'), parameter(name: 'tagsFile', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeoutInMinutes', type: 'long'), parameter(name: 'timeoutInSeconds', type: 'long'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Create or Update CloudFormation stack')
method(name: 'cfnValidate', type: 'Object', params: [:], doc: 'Validate CloudFormation template')
method(name: 'cfnValidate', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'url', type: 'java.lang.String'), ], doc: 'Validate CloudFormation template')
method(name: 'checkout', type: 'Object', params: [scm:'Map'], doc: 'Check out from version control')
method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Check out from version control')
method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
method(name: 'dir', type: 'Object', params: [path:java.lang.String, body:'Closure'], doc: 'Change current directory')
method(name: 'fileExists', type: 'Object', params: [file:'java.lang.String'], doc: 'Verify if file exists in workspace')
method(name: 'findFiles', type: 'Object', params: [:], doc: 'Find files in the workspace')
method(name: 'findFiles', type: 'Object', namedParams: [parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), ], doc: 'Find files in the workspace')
method(name: 'git', type: 'Object', params: [url:'java.lang.String'], doc: 'Git')
method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Git')
method(name: 'junit', type: 'Object', params: [testResults:'java.lang.String'], doc: 'Archive JUnit-formatted test results')
method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'boolean'), parameter(name: 'checksName', type: 'java.lang.String'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'boolean'), parameter(name: 'skipMarkingBuildUnstable', type: 'boolean'), parameter(name: 'skipPublishingChecks', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'java.util.List'), ], doc: 'Archive JUnit-formatted test results')
method(name: 'load', type: 'Object', params: [path:'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
method(name: 'powershell', type: 'Object', params: [script:'java.lang.String'], doc: 'Windows PowerShell Script')
method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Windows PowerShell Script')
method(name: 'prependToFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'content', type: 'java.lang.String'), ], doc: 'Create a file (if not already exist) in the workspace, and prepend given content to that file.')
method(name: 'publishHTML', type: 'Object', params: [target:'Map'], doc: 'Publish HTML reports')
method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'), ], doc: 'Determine current directory')
method(name: 'pwsh', type: 'Object', params: [script:'java.lang.String'], doc: 'PowerShell Core Script')
method(name: 'pwsh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'PowerShell Core Script')
method(name: 'readFile', type: 'Object', params: [file:'java.lang.String'], doc: 'Read file from workspace')
method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Read file from workspace')
method(name: 'readMavenPom', type: 'Object', params: [:], doc: 'Read a maven project file.')
method(name: 'readMavenPom', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Read a maven project file.')
method(name: 's3DoesObjectExist', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), ], doc: 'Check if object exists in S3')
method(name: 's3Download', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'force', type: 'boolean'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Copy file from S3')
method(name: 's3FindFiles', type: 'Object', params: [bucket:'java.lang.String'], doc: 'Find files in S3')
method(name: 's3FindFiles', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'onlyFiles', type: 'boolean'), parameter(name: 'path', type: 'java.lang.String'), ], doc: 'Find files in S3')
method(name: 's3PresignURL', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'key', type: 'java.lang.String'), parameter(name: 'httpMethod', type: 'java.lang.String'), parameter(name: 'durationInSeconds', type: 'java.lang.Integer'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), ], doc: 'Presign file in S3')
method(name: 's3Upload', type: 'Object', params: [bucket:'java.lang.String'], doc: 'Copy file to S3')
method(name: 's3Upload', type: 'Object', namedParams: [parameter(name: 'bucket', type: 'java.lang.String'), parameter(name: 'pathStyleAccessEnabled', type: 'boolean'), parameter(name: 'payloadSigningEnabled', type: 'boolean'), parameter(name: 'acl', type: 'Map'), parameter(name: 'cacheControl', type: 'java.lang.String'), parameter(name: 'contentDisposition', type: 'java.lang.String'), parameter(name: 'contentEncoding', type: 'java.lang.String'), parameter(name: 'contentType', type: 'java.lang.String'), parameter(name: 'excludePathPattern', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'includePathPattern', type: 'java.lang.String'), parameter(name: 'kmsId', type: 'java.lang.String'), parameter(name: 'metadatas', type: 'Map'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'redirectLocation', type: 'java.lang.String'), parameter(name: 'sseAlgorithm', type: 'java.lang.String'), parameter(name: 'tags', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'verbose', type: 'boolean'), parameter(name: 'workingDir', type: 'java.lang.String'), ], doc: 'Copy file to S3')
method(name: 'sh', type: 'Object', params: [script:'java.lang.String'], doc: 'Shell Script')
method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'), ], doc: 'Shell Script')
method(name: 'sha1', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA1 of a given file')
method(name: 'sha256', type: 'Object', params: [file:'java.lang.String'], doc: 'Compute the SHA256 of a given file')
method(name: 'slackUploadFile', type: 'Object', params: [filePath:'java.lang.String'], doc: 'Upload file to slack')
method(name: 'slackUploadFile', type: 'Object', namedParams: [parameter(name: 'filePath', type: 'java.lang.String'), parameter(name: 'channel', type: 'java.lang.String'), parameter(name: 'credentialId', type: 'java.lang.String'), parameter(name: 'initialComment', type: 'java.lang.String'), ], doc: 'Upload file to slack')
method(name: 'sshagent', type: 'Object', params: [credentials:java.util.List, body:'Closure'], doc: 'SSH Agent')
method(name: 'sshagent', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'credentials', type: 'java.util.List'), parameter(name: 'ignoreMissing', type: 'boolean'), ], doc: 'SSH Agent')
method(name: 'stash', type: 'Object', params: [name:'java.lang.String'], doc: 'Stash some files to be used later in the build')
method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'), ], doc: 'Stash some files to be used later in the build')
method(name: 'svn', type: 'Object', params: [url:'java.lang.String'], doc: 'Subversion')
method(name: 'svn', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'), ], doc: 'Subversion')
method(name: 'tar', type: 'Object', params: [:], doc: 'Create Tar file')
method(name: 'tar', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'compress', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'exclude', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'overwrite', type: 'boolean'), ], doc: 'Create Tar file')
method(name: 'tee', type: 'Object', params: [file:java.lang.String, body:'Closure'], doc: 'Tee output to file')
method(name: 'tm', type: 'Object', params: [stringWithMacro:'java.lang.String'], doc: 'Expand a string containing macros')
method(name: 'touch', type: 'Object', params: [file:'java.lang.String'], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
method(name: 'touch', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'timestamp', type: 'java.lang.Long'), ], doc: 'Create a file (if not already exist) in the workspace, and set the timestamp')
method(name: 'unstash', type: 'Object', params: [name:'java.lang.String'], doc: 'Restore files previously stashed')
method(name: 'untar', type: 'Object', params: [:], doc: 'Extract Tar file')
method(name: 'untar', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Tar file')
method(name: 'unzip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Extract Zip file')
method(name: 'unzip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'quiet', type: 'boolean'), parameter(name: 'read', type: 'boolean'), parameter(name: 'test', type: 'boolean'), ], doc: 'Extract Zip file')
method(name: 'updateIdP', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'metadata', type: 'java.lang.String'), ], doc: 'Update thirdparty Identity Provider')
method(name: 'updateTrustPolicy', type: 'Object', namedParams: [parameter(name: 'roleName', type: 'java.lang.String'), parameter(name: 'policyFile', type: 'java.lang.String'), ], doc: 'Update trust policy of IAM roles')
method(name: 'validateDeclarativePipeline', type: 'Object', params: [path:'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
method(name: 'verifySha1', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'hash', type: 'java.lang.String'), ], doc: 'Verify the SHA1 of a given file')
method(name: 'verifySha256', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'hash', type: 'java.lang.String'), ], doc: 'Verify the SHA256 of a given file')
method(name: 'withGradle', type: 'Object', params: [body:'Closure'], doc: 'WithGradle')
method(name: 'withMaven', type: 'Object', params: [body:'Closure'], doc: 'Provide Maven environment')
method(name: 'withMaven', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'globalMavenSettingsConfig', type: 'java.lang.String'), parameter(name: 'globalMavenSettingsFilePath', type: 'java.lang.String'), parameter(name: 'jdk', type: 'java.lang.String'), parameter(name: 'maven', type: 'java.lang.String'), parameter(name: 'mavenLocalRepo', type: 'java.lang.String'), parameter(name: 'mavenOpts', type: 'java.lang.String'), parameter(name: 'mavenSettingsConfig', type: 'java.lang.String'), parameter(name: 'mavenSettingsFilePath', type: 'java.lang.String'), parameter(name: 'options', type: 'java.util.List'), parameter(name: 'publisherStrategy', type: 'Map'), parameter(name: 'tempBinDir', type: 'java.lang.String'), parameter(name: 'traceability', type: 'boolean'), ], doc: 'Provide Maven environment')
method(name: 'withNPM', type: 'Object', params: [body:'Closure'], doc: 'Provide NPM environment')
method(name: 'withNPM', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'npmrcConfig', type: 'java.lang.String'), ], doc: 'Provide NPM environment')
method(name: 'writeCSV', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'records', type: 'java.lang.Iterable'), parameter(name: 'format', type: 'Map'), ], doc: 'Write content to a CSV file in the workspace.')
method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Write file to workspace')
method(name: 'writeMavenPom', type: 'Object', params: [model:'Map'], doc: 'Write a maven project file.')
method(name: 'writeMavenPom', type: 'Object', namedParams: [parameter(name: 'model', type: 'Map'), parameter(name: 'file', type: 'java.lang.String'), ], doc: 'Write a maven project file.')
method(name: 'zip', type: 'Object', params: [zipFile:'java.lang.String'], doc: 'Create Zip file')
method(name: 'zip', type: 'Object', namedParams: [parameter(name: 'zipFile', type: 'java.lang.String'), parameter(name: 'archive', type: 'boolean'), parameter(name: 'dir', type: 'java.lang.String'), parameter(name: 'exclude', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'glob', type: 'java.lang.String'), parameter(name: 'overwrite', type: 'boolean'), ], doc: 'Create Zip file')
method(name: 'archive', type: 'Object', params: [includes:'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'), ], doc: 'Archive artifacts')
method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'commandLine', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image used in FROM')
method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'java.util.Map'), ], doc: 'Copy archived artifacts into the workspace')
method(name: 'withDockerContainer', type: 'Object', params: [image:java.lang.String, body:'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
method(name: 'withDockerContainer', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Run build steps inside a Docker container')
method(name: 'withDockerRegistry', type: 'Object', params: [registry:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
method(name: 'withDockerRegistry', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'registry', type: 'Map'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Sets up Docker registry endpoint')
method(name: 'withDockerServer', type: 'Object', params: [server:Map, body:'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
    }
}

// Errors on:

