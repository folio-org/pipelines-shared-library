#!groovy

import org.folio.Constants
import org.folio.utilities.Logger

@Library('pipelines-shared-library') _ //TODO update before merge to master

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    string(name: 'DOCKERFILE_BRANCH', defaultValue: 'master', description: 'Dockerfile Branch'),
    string(name: 'IMAGE_TAG', defaultValue: "alpine-jdk17-${BUILD_NUMBER}", description: 'Agent Image Tag'),
    string(name: 'TERRAFORM_VER', defaultValue: '1.6.6', description: 'Terraform version'),
    string(name: 'HELM_VER', defaultValue: '3.15.4', description: 'Helm version'),
    string(name: 'KUBECTL_VER', defaultValue: '1.28.0', description: 'Kubectl version'),
    string(name: 'KAFKA_VER', defaultValue: '3.8.0', description: 'Kafka version'),
    folioParameters.refreshParameters()
  ])
])

// Early exit if refresh parameters is triggered
if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

Logger logger = new Logger(this, env.JOB_BASE_NAME)
PodTemplates podTemplates = new PodTemplates(this, true)
def dockerfilePath = './scripts/docker/jenkinsAgent/'

ansiColor('xterm') {
  podTemplates.kanikoAgent {
    stage('[Git] Checkout source') {
      checkout scmGit(
        branches: [[name: "*/${env.DOCKERFILE_BRANCH}"]],
        extensions: [],
        userRemoteConfigs: [[url: 'https://github.com/folio-org/pipelines-shared-library.git']]
      )
    }

    stage('[Docker] Build and push') {
      dir(dockerfilePath) {
        container('kaniko') {
          withAWS(credentials: Constants.ECR_FOLIO_REPOSITORY_CREDENTIALS_ID, region: Constants.AWS_REGION) {
            ecrLogin()
            sh """/kaniko/executor  --build-arg TERRAFORM_VERSION=${env.TERRAFORM_VER.trim()} \
--build-arg HELM_VERSION=${env.HELM_VER} \
--build-arg KUBECTL_VERSION=${env.KUBECTL_VER} \
--build-arg KAFKA_VERSION=${env.KAFKA_VER} \
--destination folio-jenkins-agent:${env.IMAGE_TAG} --dockerfile ./Dockerfile --context ."""
          }
        }
      }
    }
  }
}
