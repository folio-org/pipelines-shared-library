#!groovy

import groovy.json.JsonSlurperClassic
import org.folio.Constants
import org.jenkinsci.plugins.workflow.libs.Library

//TODO Switch to RANCHER-741-Jenkins-Enhancements after PR review

@Library('pipelines-shared-library@RANCHER-886') _

def postgresql

properties([buildDiscarder(logRotator(numToKeepStr: '20')),
            disableConcurrentBuilds(),
            parameters([folioParameters.cluster(),
                        folioParameters.namespace(),
                        choice(name: "ACTION", choices: ['start', 'stop'], description: '(Required) Choose action to perform'),
                        choice(name: "PERIOD", choices: ['night', 'weekend'], description: '(Required) Choose period to suspend'),
                        booleanParam(defaultValue: false, description: 'Check this parameter, if you would like to suspend auto shutdown', name: 'SUSPEND'),
                        folioParameters.agent(),
                        folioParameters.refreshParameters()]),
            pipelineTriggers([parameterizedCron('''
        0 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=bama
        0 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=bama

        0 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=firebird
        0 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=firebird

        0 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=folijet
        0 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=folijet

        10 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=nla
        15 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=nla

        10 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=spanish
        15 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=spanish

        10 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=spitfire
        15 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=spitfire

        10 22 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=spitfire-2nd
        10 06 * * 0 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=spitfire-2nd

        15 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=thunderjet
        30 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=thunderjet

        15 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=vega
        30 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=vega

        15 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=volaris
        30 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=volaris

        20 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=volaris-2nd
        45 05 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=volaris-2nd

        55 23 * * 1-5 %ACTION=stop;CLUSTER=folio-perf;NAMESPACE=vega
        45 05 * * 1-5 %ACTION=start;CLUSTER=folio-perf;NAMESPACE=vega

        55 23 * * 1-5 %ACTION=stop;CLUSTER=folio-perf;NAMESPACE=folijet
        45 05 * * 1-5 %ACTION=start;CLUSTER=folio-perf;NAMESPACE=folijet

        20 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=consortia
        00 06 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=consortia

        20 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=tamu
        00 06 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=tamu

        25 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=task-force
        00 06 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=task-force

        25 00 * * 1-5 %ACTION=stop;CLUSTER=folio-dev;NAMESPACE=rtr
        00 06 * * 1-5 %ACTION=start;CLUSTER=folio-dev;NAMESPACE=rtr

        0 22 * * 1-5 %ACTION=stop;CLUSTER=folio-tmp;NAMESPACE=test
        15 06 * * 1-5 %ACTION=start;CLUSTER=folio-tmp;NAMESPACE=test
   ''')])])

ansiColor('xterm') {
  if (params.refresh_parameters) {
    currentBuild.result = 'ABORTED'
    println('REFRESH JOB PARAMETERS!')
    return
  }
  node("${params.AGENT}") {
    try {
      Calendar calendar = Calendar.getInstance()
      stage('Checkout') {
        checkout scm
      }
      stage('[Manage environment status & state]') {
        switch ("${params.ACTION}") {
          case { "start" }:
            folioHelm.withKubeConfig("${params.CLUSTER}") {
              awscli.getKubeConfig(Constants.AWS_REGION, "${params.CLUSTER}")
              def check = kubectl.getLabelsFromNamespace("${params.NAMESPACE}")
              def status = new JsonSlurperClassic().parseText("${check}")
              def scale_state = kubectl.getConfigMap("scale-state", "${params.NAMESPACE}", "schedule")
              def scale_state_start = new JsonSlurperClassic().parseText("${scale_state}")
              postgresql = scale_state_start.findAll { it.startsWith("postgresql") }
              if (status['status'] == "stopped") {
                kubectl.addLabelToNamespace("${params.NAMESPACE}", "status", "running")
                def services = scale_state_start.findAll { key, value -> !["mod-", "edge-", "okapi", "ldp-server", "ui-bundle"].any { prefix -> key.startsWith(prefix) } }
                List core_modules = ["okapi", "mod-users", "mod-users-bl", "mod-login", "mod-permissions", "mod-authtoken"]
                def core = scale_state_start.findAll { key, value -> core_modules.any { prefix -> key.startsWith(prefix) } }
                def backend = scale_state_start.findAll { key, value -> ["mod-"].any { prefix -> key.startsWith(prefix) } }
                def edge = scale_state_start.findAll { key, value -> ["edge-"].any { prefix -> key.startsWith(prefix) } }
                def ui = scale_state_start.findAll { key, value -> ["ui-bundle"].any { prefix -> key.contains(prefix) } }
                if (postgresql) {
                  postgresql.each { db ->
                    kubectl.setKubernetesResourceCount("StatefulSet", "${db}", "${params.NAMESPACE}", "1")
                    kubectl.waitKubernetesResourceStableState("StatefulSet", "${db}", "${params.NAMESPACE}", "1", '600')
                  }
                } else {
                  awscli.startRdsCluster("rds-${params.CLUSTER}-${params.NAMESPACE}", Constants.AWS_REGION)
                  awscli.waitRdsClusterAvailable("rds-${params.CLUSTER}-${params.NAMESPACE}", Constants.AWS_REGION)
                  sleep 30
                }
                services.each { deployment, replica_count ->
                  kubectl.setKubernetesResourceCount('deployment', deployment.toString(), "${params.NAMESPACE}", replica_count.toString())
                  kubectl.checkDeploymentStatus("${deployment}", "${params.NAMESPACE}", "600")
                  sleep 10
                }
                core.each { deployment, replica_count ->
                  kubectl.setKubernetesResourceCount('deployment', deployment.toString(), "${params.NAMESPACE}", replica_count.toString())
                  kubectl.checkDeploymentStatus("${deployment}", "${params.NAMESPACE}", "600")
                  sleep 10
                }
                backend.each { deployment, replica_count -> kubectl.setKubernetesResourceCount('deployment', deployment.toString(), "${params.NAMESPACE}", replica_count.toString())
                }
                edge.each { deployment, replica_count -> kubectl.setKubernetesResourceCount('deployment', deployment.toString(), "${params.NAMESPACE}", replica_count.toString())
                }
                ui.each { deployment, replica_count -> kubectl.setKubernetesResourceCount('deployment', deployment.toString(), "${params.NAMESPACE}", replica_count.toString())
                }
                kubectl.deleteConfigMap("scale-state", "${params.NAMESPACE}")
              } else {
                println("Target environment: ${params.CLUSTER} is already in running state!")
                kubectl.addLabelToNamespace("${params.NAMESPACE}", "shutdown-schedule", "everyday")
              }
            }
            break
          case { "stop" }:
            folioHelm.withKubeConfig("${params.CLUSTER}") {
              awscli.getKubeConfig(Constants.AWS_REGION, "${params.CLUSTER}")
              def check = kubectl.getLabelsFromNamespace("${params.NAMESPACE}")
              def status = new JsonSlurperClassic().parseText("${check}")
              switch (status['shutdown-schedule']) {
                case { "night" && status['status'] == "running" }:
                  println("The environment: ${params.NAMESPACE} has been excluded from shutdown for tonight!")
                  kubectl.addLabelToNamespace("${params.NAMESPACE}", "shutdown-schedule", "everyday")
                  break
                case { "weekend" && status['status'] == "running" && calendar.get(Calendar.DAY_OF_WEEK) == 1 || 6 || 7 }: // Saturday & Sunday included for future use.
                  println("The environment: ${params.NAMESPACE} has been excluded from shutdown for this weekend, skipped!")
                  kubectl.addLabelToNamespace("${params.NAMESPACE}", "shutdown-schedule", "everyday")
                  break
                default:
                  if (postgresql) {
                    kubectl.createScaleState("${params.CLUSTER}", "${params.NAMESPACE}")
                    kubectl.addLabelToNamespace("${params.NAMESPACE}", "status", "stopped")
                    kubectl.addLabelToNamespace("${params.NAMESPACE}", "shutdown-schedule", "everyday")
                    kubectl.scaleDownResources("${params.NAMESPACE}", "Deployment")
                  } else {
                    kubectl.createScaleState("${params.CLUSTER}", "${params.NAMESPACE}")
                    kubectl.addLabelToNamespace("${params.NAMESPACE}", "status", "stopped")
                    kubectl.addLabelToNamespace("${params.NAMESPACE}", "shutdown-schedule", "everyday")
                    kubectl.scaleDownResources("${params.NAMESPACE}", "Deployment")
                    awscli.stopRdsCluster("rds-${params.CLUSTER}-${params.NAMESPACE}", Constants.AWS_REGION)
                  }
                  break
              }
            }
            break
        }
      }
      if ("${params.SUSPEND}") {
        stage("Exclude schedule apply") {
          folioHelm.withKubeConfig("${params.CLUSTER}") {
            awscli.getKubeConfig(Constants.AWS_REGION, "${params.CLUSTER}")
            kubectl.addLabelToNamespace("${params.NAMESPACE}", "shutdown-schedule", "${params.PERIOD}")
          }
        }
      }
    } catch (exception) {
      println(exception)
      error(exception.getMessage())
    }
  }
}
