#!groovy
import org.folio.Constants

@Library('pipelines-shared-library@RANCHER-1148') _

CONFIG_BRANCH = 'RANCHER-1148'
import org.folio.models.TerraformConfig
import org.jenkinsci.plugins.workflow.libs.Library

properties([
  buildDiscarder(logRotator(numToKeepStr: '20')),
  parameters([
    string(name: "CLUSTER", defaultValue: "folio-testing"),
    string(name: "NAMESPACE", defaultValue: "ecs-snapshot"),
    string(name: "AGENT", defaultValue: "jenkins-agent-java17"),
    string(name: "BRANCH", defaultValue: "snapshot", description: "platform-complete"),
    string(name: "source_db", defaultValue: "ecs-snapshot.tar", description: "Source dump file name"),
    string(name: "source_db_users", defaultValue: "ecs-snapshot-users.sql", description: "Source dump file of users"),
    folioParameters.refreshParameters()
  ])
])


ansiColor('xterm') {
  if (params.REFRESH_PARAMETERS) {
    currentBuild.result = 'ABORTED'
    error('DRY RUN BUILD, PARAMETERS REFRESHED!')
  }

  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName params.CLUSTER + '-' + params.NAMESPACE + '-' + env.BUILD_ID
        buildDescription "cluster: ${params.CLUSTER}\n" + "namespace: ${params.NAMESPACE}"
      }
      stage('Checkout') {
        checkout scm
      }

      TerraformConfig tfConfig = new TerraformConfig('terraform/rancher/project')

      stage('[Helm restore testing v1]') {
        folioHelm.withKubeConfig(params.CLUSTER) {
          folioHelm.addHelmRepository(Constants.FOLIO_HELM_HOSTED_REPO_NAME, Constants.FOLIO_HELM_HOSTED_REPO_URL, true)
          sh " helm install ecs-snapshot-dump helm-hosted/psql-dump --version '1.0.3' --set psql.projectNamespace='ecs-snapshot' \
        --set psql.dbBackupName='ecs-snapshot.tar' --set psql.job.action='restore' \
        --set psql.s3BackupsBucketName='folio-postgresql-backups' \
        --set psql.s3BackupsBucketDirectory='ecs-snapshot' \
        --namespace='ecs-snapshot' --timeout 240m --wait --wait-for-jobs"
        }
      }

    } catch (exception) {
      println(exception)
      error(exception.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
