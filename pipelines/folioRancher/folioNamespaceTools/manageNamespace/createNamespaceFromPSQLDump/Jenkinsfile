#!groovy
import org.folio.Constants
import org.folio.models.TerraformConfig
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-1216') _

CONFIG_BRANCH = 'RANCHER-1216'

def destroyResult

properties([buildDiscarder(logRotator(numToKeepStr: '20')),
            disableConcurrentBuilds(),
            parameters([string(name: "CLUSTER", defaultValue: "folio-testing"),
                        string(name: "NAMESPACE", defaultValue: "ecs-snapshot"),
                        string(name: "AGENT", defaultValue: "jenkins-agent-java17"),
                        string(name: "FOLIO_BRANCH", defaultValue: "snapshot", description: "platform-complete"),
                        string(name: "CONFIG_TYPE", defaultValue: "testing"),
                        string(name: "SOURCE_DB", defaultValue: "ecs-snapshot", description: "Source dump file name"),
                        string(name: "SOURCE_DB_USERS", defaultValue: "ecs-snapshot-users", description: "Source dump file of users"),
                        booleanParam(name: 'CONSORTIA', defaultValue: true, description: '(Optional) Set true to create consortium'),
                        booleanParam(name: 'RW_SPLIT', defaultValue: false, description: '(Optional) Set true to Enable Read/Write split'),
                        booleanParam(name: 'GREENMAIL', defaultValue: false, description: '(Optional) Set true to deploy greenmail server'),
                        booleanParam(name: 'MOCK_SERVER', defaultValue: false, description: '(Optional) Set true to deploy mock-server'),
                        booleanParam(name: 'RTR', defaultValue: false, description: '(Optional) Set true to enable RTR'),
                        folioParameters.refreshParameters(),
                        folioParameters.okapiVersion(),
                        folioParameters.loadReference(false),
                        folioParameters.loadSample(false)])])

ansiColor('xterm') {
  if (params.REFRESH_PARAMETERS) {
    currentBuild.result = 'ABORTED'
    error('DRY RUN BUILD, PARAMETERS REFRESHED!')
  }

  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName params.CLUSTER + '-' + params.NAMESPACE + '-' + env.BUILD_ID
        buildDescription "cluster: ${params.CLUSTER}\n" + "namespace: ${params.NAMESPACE}\n" + "config: ${params.CONFIG_TYPE}"
      }
      stage('Checkout') {
        checkout scm
      }

      TerraformConfig tfConfig = new TerraformConfig('terraform/rancher/project')
        .withWorkspace("${params.CLUSTER}-${params.NAMESPACE}")

      tfConfig.addVar('pg_vol_size', 100)
      tfConfig.addVar('pg_dbname', 'folio')
      tfConfig.addVar('pg_password', Constants.PG_ROOT_DEFAULT_PASSWORD)
      tfConfig.addVar('pgadmin_password', Constants.PGADMIN_DEFAULT_PASSWORD)
      tfConfig.addVar('pg_embedded', true)
      tfConfig.addVar('pg_version', '12.14')
      tfConfig.addVar('pg_ldp_user_password', Constants.PG_LDP_DEFAULT_PASSWORD)
      tfConfig.addVar('pgadmin4', true)
      tfConfig.addVar('rancher_cluster_name', params.CLUSTER)
      tfConfig.addVar('rancher_project_name', params.NAMESPACE)
      tfConfig.addVar('tenant_id', 'cs00000int')
      tfConfig.addVar('kafka_shared', true)
      tfConfig.addVar('opensearch_shared', true)
      tfConfig.addVar('s3_embedded', false)
      tfConfig.addVar('enable_rw_split', false)
      tfConfig.addVar('github_team_ids', folioTools.getGitHubTeamsIds("${Constants.ENVS_MEMBERS_LIST[params.NAMESPACE]},${params.MEMBERS}").collect { "\"${it}\"" })

      stage('[Destroy existing env...]') {
        destroyResult = build job: '/folioRancher/folioNamespaceTools/deleteNamespace',
          parameters: [string(name: 'CLUSTER', value: 'folio-testing'),
                       string(name: 'NAMESPACE', value: 'ecs-snapshot'),
                       booleanParam(name: 'RW_SPLIT', value: false),
                       string(name: 'POSTGRESQL', value: 'built-in'),
                       string(name: 'KAFKA', value: 'aws'),
                       string(name: 'OPENSEARCH', value: 'aws'),
                       string(name: 'S3_BUCKET', value: 'aws'),
                       string(name: 'AGENT', value: 'jenkins-agent-java17'),
                       booleanParam(name: 'REFRESH_PARAMETERS', value: false)]
      }

      if (destroyResult == 'SUCCESS' || 'UNSTABLE') {

        stage('[Provision environment...]') {
          folioTerraformFlow.manageNamespace('apply', tfConfig)
        }

        stage('[Helm Indices & DB preparation...]') {
          withCredentials([usernamePassword(credentialsId: 'elastic', passwordVariable: 'es_password', usernameVariable: 'es_username')]) {
            folioEcsIndices.prepareEcsIndices("${env.es_username}", "${env.es_password}")
          }
          folioHelm.withKubeConfig(params.CLUSTER) {
            psqlDumpMethods.restoreHelmData("psql-restore", "psql-dump", "1.0.5", "${params.SOURCE_DB_USERS}",
              "${params.SOURCE_DB}", Constants.PSQL_DUMP_BACKUPS_BUCKET_NAME,
              "ecs-snapshot", "ecs-snapshot")
          }
        }

        stage('[Helm install modules...]') {
          //tdb
        }

        stage('[New modules deploy...]') {
          //tdb
        }

        stage('[Configure edge-users & salt...]') {
          //tdb
        }

        stage('[Build ecs-snapshot UI...]') {
          //tdb
        }
      }

    } catch (exception) {
      println(exception)
      error(exception.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
