#!groovy
import org.jenkinsci.plugins.workflow.libs.Library
import org.folio.Constants
import org.folio.jenkins.JenkinsAgentLabel
import org.folio.jenkins.PodTemplates
import org.folio.models.parameters.CreateNamespaceParameters

@Library('pipelines-shared-library@RANCHER-2186') _ //CHANGE BEFORE MERGE

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    booleanParam(name: 'RW_SPLIT', defaultValue: false, description: '(Optional) Set true to Enable Read/Write split'),
    folioParameters.pgType(),
    folioParameters.kafkaType(),
    folioParameters.opensearchType(),
    folioParameters.s3Type(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

if (params.CLUSTER == 'folio-testing') {
  folioCommon.kitfoxApproval()
}

boolean nsExists

CreateNamespaceParameters namespaceParams = new CreateNamespaceParameters.Builder()
  .clusterName(params.CLUSTER)
  .namespaceName(params.NAMESPACE)
  .rwSplit(params.RW_SPLIT)
  .pgType(params.POSTGRESQL)
  .kafkaType(params.KAFKA)
  .opensearchType(params.OPENSEARCH)
  .s3Type(params.S3_BUCKET)
  .build()

try {
  Constants.validateNamespace(namespaceParams.getNamespaceName())
} catch (Exception e) {
  error(e.message)
}

ansiColor('xterm') {
  PodTemplates podTemplates = new PodTemplates(this)

  podTemplates.defaultTemplate {
    node(JenkinsAgentLabel.DEFAULT_AGENT.getLabel()) {
      stage('Ini') {
        buildName "${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}"
      }

      stage('Checkout') {
        git(url: "${Constants.FOLIO_GITHUB_URL}/pipelines-shared-library.git",
          branch: folioTools.getPipelineBranch(),
          credentialsId: Constants.PRIVATE_GITHUB_CREDENTIALS_ID,
          poll: false)
      }

      folioHelm.withKubeConfig(namespaceParams.getClusterName()) {
        nsExists = kubectl.checkNamespaceExistence(namespaceParams.getNamespaceName())
      }

      if (nsExists) {
        folioNamespaceDelete.call(namespaceParams)
      }
    }
  }
}
