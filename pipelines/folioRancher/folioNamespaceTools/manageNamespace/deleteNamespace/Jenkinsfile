#!groovy
import org.folio.Constants
import org.folio.jenkins.PodTemplates
import org.folio.models.parameters.CreateNamespaceParameters
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-2546') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    booleanParam(name: 'RW_SPLIT', defaultValue: false, description: '(Optional) Set true to Enable Read/Write split'),
    folioParameters.pgType(),
    folioParameters.kafkaType(),
    folioParameters.opensearchType(),
    folioParameters.s3Type(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

if (params.CLUSTER == 'folio-testing') {
  folioCommon.kitfoxApproval()
}

PodTemplates podTemplates = new PodTemplates(this)
boolean nsExists = false
CreateNamespaceParameters namespaceParams = new CreateNamespaceParameters.Builder()
  .clusterName(params.CLUSTER)
  .namespaceName(params.NAMESPACE)
  .rwSplit(params.RW_SPLIT)
  .pgType(params.POSTGRESQL)
  .kafkaType(params.KAFKA)
  .opensearchType(params.OPENSEARCH)
  .s3Type(params.S3_BUCKET)
  .build()

if (params.CLUSTER != 'folio-tmp') {
  folioCommon.validateNamespace(params.NAMESPACE)
}

ansiColor('xterm') {
  podTemplates.rancherAgent {
    stage('Ini') {
      buildName("#${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}")
    }

    stage('Checkout') {
      checkout(poll: false,
        scm: scmGit(branches: [[name: "*/${folioTools.getPipelineBranch()}"]],
          extensions: [cloneOption(depth: 50, noTags: true, reference: '', shallow: true)],
          userRemoteConfigs: [[credentialsId: Constants.PRIVATE_GITHUB_CREDENTIALS_ID,
                               url          : "${Constants.FOLIO_GITHUB_URL}/pipelines-shared-library.git"]]))
    }

    folioHelm.withKubeConfig(namespaceParams.getClusterName()) {
      nsExists = kubectl.checkNamespaceExistence(namespaceParams.getNamespaceName())
    }
  }

  if (nsExists) {
    folioNamespaceDelete.call(namespaceParams)
  }
}
