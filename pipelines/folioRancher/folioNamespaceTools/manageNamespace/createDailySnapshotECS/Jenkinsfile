#!groovy
package folioRancher.folioNamespaceTools.manageNamespace.createDailySnapshotECS

import org.folio.Constants
import org.folio.models.*
import org.folio.rest.GitHubUtility
import org.folio.rest_v2.Main
import org.folio.rest_v2.Users
import org.folio.utilities.Tools
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library') _

CONFIG_BRANCH = 'master'

properties([buildDiscarder(logRotator(numToKeepStr: '30')),
            disableConcurrentBuilds(),
            parameters([folioParameters.cluster(),
                        folioParameters.namespace(),
                        folioParameters.configType(),
                        booleanParam(name: 'CONSORTIA', defaultValue: false, description: '(Optional) Set to true to enable consortium'),
                        booleanParam(name: 'RW_SPLIT', defaultValue: false, description: '(Optional) Set to true to enable Read/Write split'),
                        folioParameters.pgType(),
                        folioParameters.kafkaType(),
                        folioParameters.opensearchType(['aws']),
                        folioParameters.s3Type(),
                        folioParameters.agent(),
                        folioParameters.refreshParameters()]),
            pipelineTriggers([parameterizedCron('''45 22 * * * %CLUSTER=folio-testing;NAMESPACE=ecs-snapshot;CONFIG_TYPE=testing;CONSORTIA=true;RW_SPLIT=false;POSTGRESQL=built-in;KAFKA=built-in;OPENSEARCH=aws;S3_BUCKET=built-in;AGENT=rancher''')])])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

String defaultTenantId = 'cs00000int'
String sys_psswd = ''

TerraformConfig tfConfig = new TerraformConfig('terraform/rancher/project')
  .withWorkspace("${params.CLUSTER}-${params.NAMESPACE}")

tfConfig.addVar('rancher_cluster_name', params.CLUSTER)
tfConfig.addVar('rancher_project_name', params.NAMESPACE)
tfConfig.addVar('tenant_id', defaultTenantId)
tfConfig.addVar('pg_password', Constants.PG_ROOT_DEFAULT_PASSWORD)
tfConfig.addVar('pgadmin_password', Constants.PGADMIN_DEFAULT_PASSWORD)
tfConfig.addVar('pg_version', '12.15')
tfConfig.addVar('pg_dbname', 'folio')
tfConfig.addVar('pg_vol_size', 100)
tfConfig.addVar('pg_embedded', params.POSTGRESQL == 'built-in')
tfConfig.addVar('kafka_shared', params.KAFKA != 'built-in')
tfConfig.addVar('opensearch_shared', params.OPENSEARCH != 'built-in')
tfConfig.addVar('s3_embedded', params.S3_BUCKET == 'built-in')
tfConfig.addVar('pgadmin4', 'true')
tfConfig.addVar('pg_ldp_user_password', Constants.PG_LDP_DEFAULT_PASSWORD)
tfConfig.addVar('github_team_ids', folioTools.getGitHubTeamsIds("${Constants.ENVS_MEMBERS_LIST[params.NAMESPACE]},${params.MEMBERS}").collect { "\"${it}\"" })

RancherNamespace namespace = new RancherNamespace(params.CLUSTER, params.NAMESPACE)
  .withDefaultTenant(defaultTenantId)
  .withDeploymentConfigType(params.CONFIG_TYPE)
  .withSuperTenantAdminUser()

namespace.addDeploymentConfig(CONFIG_BRANCH)

String installJsonS3Path = "${Constants.PSQL_DUMP_BACKUPS_BUCKET_NAME}/ecs-snapshot/"
List newInstallJson = new GitHubUtility(this).getEnableList('platform-complete', 'snapshot')
InstallRequestParams installRequestParams = new InstallRequestParams(reinstall: true)
  .withTenantParameters("centralTenantId=cs00000int")
Main main = new Main(this, namespace.generateDomain('okapi'), namespace.getSuperTenant())

ansiColor('xterm') {
  node(params.AGENT) {
    stage('Ini') {
      buildName "${tfConfig.getWorkspace()}-${env.BUILD_ID}"
      buildDescription "Config: ${params.CONFIG_TYPE}"
    }
    try {
      stage('Checkout') {
        checkout scm
      }

      stage('[TF] Destroy') {
        folioHelm.withKubeConfig(params.CLUSTER) {
          if ((kubectl.checkNamespaceExistence('ecs-snapshot'))) {
            folioPrint.colored("ecs-snapshot environment exists!\nproceeding with destroy operation...", "red")
            try {
              build job: '/folioRancher/folioNamespaceTools/deleteNamespace',
                parameters: [string(name: 'CLUSTER', value: 'folio-testing'),
                             string(name: 'NAMESPACE', value: 'ecs-snapshot'),
                             booleanParam(name: 'RW_SPLIT', value: false),
                             string(name: 'POSTGRESQL', value: 'built-in'),
                             string(name: 'KAFKA', value: 'built-in'),
                             string(name: 'OPENSEARCH', value: 'aws'),
                             string(name: 'S3_BUCKET', value: 'built-in'),
                             string(name: 'AGENT', value: 'rancher'),
                             booleanParam(name: 'REFRESH_PARAMETERS', value: false)]
            } catch (Exception exception) {
              folioPrint.colored("Existing environment has not been destroyed, error: ${exception.getMessage()}", "red")
            }
          } else {
            folioPrint.colored("ecs-snapshot environment does not exist...\nContinuing to work...", "green")
          }
        }
      }

      stage('[TF] Provision') {
        folioTerraformFlow.manageNamespace('apply', tfConfig)
      }

      stage('[DB and Indices] Restore') {
        folioPrint.colored("Restoring indices...", "green")
        withCredentials([usernamePassword(credentialsId: 'elastic', passwordVariable: 'es_password', usernameVariable: 'es_username')]) {
          folioEcsIndices.prepareEcsIndices("${env.es_username}", "${env.es_password}")
        }

        folioHelm.withKubeConfig(params.CLUSTER) {
          folioPrint.colored("Restoring psql ecs dump...\nEstimated duration: ~ 1-2 hours", "green")
          psqlDumpMethods.restoreHelmData("psql-restore", "psql-dump", "1.0.6", "ecs-snapshot-users",
            "ecs-snapshot-01", Constants.PSQL_DUMP_BACKUPS_BUCKET_NAME,
            "ecs-snapshot", "${params.NAMESPACE}")
          sys_psswd = kubectl.getSecretValue(namespace.getNamespaceName(), 'mod-consortia-systemuser', 'SYSTEM_USER_PASSWORD')
        }
      }

      stage('Restore') {
        folioHelm.withK8sClient {
          namespace.getModules().setInstallJson(new Tools(this)
            .jsonParse(awscli.getS3FileContent("${installJsonS3Path}" + "install.json")))
          namespace.setOkapiVersion(common.getOkapiVersion(namespace.getModules().getInstallJson()))
        }
        folioDeployFlow.restore(namespace)
      }

      stage('Prepare update') {
        main.getTenantsList().each {
          switch (it) {
            case ['cs00000int', 'cs00000int_0001', 'cs00000int_0002', 'cs00000int_0003', 'cs00000int_0004', 'cs00000int_0005']:
              namespace.addTenant(new OkapiTenant("${it}")
                .withAdminUser(new OkapiUser('ecs_admin', 'admin'))
                .withInstallRequestParams(installRequestParams)
                .withConfiguration(new OkapiConfig()))
              break
          }
        }
        Users users = new Users(this, namespace.generateDomain('okapi'))
        namespace.getModules().setInstallJson(newInstallJson)
        OkapiUser okapiUser = new OkapiUser('consortia-system-user', sys_psswd)
        namespace.setEnableConsortia(params.CONSORTIA, false)
        namespace.tenants.each { name, id ->
          switch (id.getTenantId()) {
            case ['cs00000int']:
              id.getModules().setInstallJson(newInstallJson)
              break
            case ['cs00000int_0001', 'cs00000int_0002', 'cs00000int_0003', 'cs00000int_0004', 'cs00000int_0005']:
              id.getModules().setInstallJson(newInstallJson)
              id.getModules().removeModule('folio_consortia-settings')
              break
            default:
              println("${id.tenantId} --> leaving blank")
              break
          }
          def user = users.getUserByName(id, okapiUser)
          okapiUser.setUuid(user.get('id'))
          users.resetUserPassword(id, okapiUser)
          println('TenantId: ' + id.getTenantId() + "\nModules to enable:\n" + id.getModules().getInstallJson())
        }
        main.publishServiceDiscovery(namespace.getModules().getDiscoveryList())
        main.publishDescriptors(namespace.getModules().getInstallJson())
      }

      stage('Update') {
        folioHelm.withKubeConfig(namespace.getClusterName()) {
          folioHelm.deployFolioModulesParallel(namespace, namespace.getModules().getBackendModules())

          folioEdge.renderEphemeralProperties(namespace)
          namespace.getModules().getEdgeModules().each { name, version ->
            kubectl.deleteConfigMap("${name}-ephemeral-properties", namespace.getNamespaceName())
            kubectl.createConfigMap("${name}-ephemeral-properties", namespace.getNamespaceName(), "./${name}-ephemeral-properties")
          }

          folioHelm.deployFolioModulesParallel(namespace, namespace.getModules().getEdgeModules())
          folioHelm.checkAllPodsRunning(namespace.getNamespaceName())
        }
      }

      stage('Enable') {
        retry(2) {
          folioHelm.withKubeConfig(namespace.getClusterName()) {
            kubectl.scaleDownResources(namespace.getNamespaceName(), "deployment")
            sleep time: 2, unit: 'MINUTES'
            kubectl.scaleUpResources(namespace.getNamespaceName(), "deployment")
          }
          sleep time: 5, unit: 'MINUTES'
          main.update(namespace.getTenants())
        }
      }

      stage('Build and deploy UI') {
        namespace.getModules().setInstallJson(newInstallJson)
        String folioBranch = 'snapshot'
        String commitHash = common.getLastCommitHash("platform-complete", "snapshot")
        namespace.setEnableConsortia(true)

        TenantUi tenantUi = new TenantUi("${params.CLUSTER}-${params.NAMESPACE}", commitHash, folioBranch)

        namespace.addTenant(new OkapiTenant(defaultTenantId)
          .withInstallRequestParams(installRequestParams)
          .withConfiguration(new OkapiConfig())
          .withTenantUi(tenantUi.clone()))

        namespace.getTenants().each { tenantId, tenant ->
          if (tenant.getTenantUi()) {
            TenantUi ui = tenant.getTenantUi()
            def jobParameters = [tenant_id  : ui.getTenantId(),
                                 custom_hash: ui.getHash(),
                                 custom_url : "https://${namespace.getDomains()['okapi']}",
                                 custom_tag : ui.getTag(),
                                 consortia  : true]
            uiBuild(jobParameters)
            folioHelm.withKubeConfig(namespace.getClusterName()) {
              folioHelm.deployFolioModule(namespace, 'ui-bundle', ui.getTag(), false, ui.getTenantId())
            }
          }
        }

        slackSend(color: 'good', message: 'ecs-snapshot env successfully built', channel: '#rancher_tests_notifications')
      }
      stage('The rest components placeholder') {
        // GreenMail, LDP, Mock server, etc.
      }

    } catch (e) {
      stage('Notify') {
        println "Caught exception: ${e}"
        slackSend(color: 'danger', message: "ecs-snapshot env build failed...", channel: '#rancher_tests_notifications')
      }
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
