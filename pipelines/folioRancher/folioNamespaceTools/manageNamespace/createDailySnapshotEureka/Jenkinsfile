#!groovy
package folioRancher.folioNamespaceTools.manageNamespace.createDailySnapshotEureka


import org.jenkinsci.plugins.workflow.libs.Library
import org.folio.models.parameters.CreateNamespaceParameters

//TODO remove branch before merge to master
@Library('pipelines-shared-library@RANCHER-1818') _
properties([buildDiscarder(logRotator(numToKeepStr: '30')),
            disableConcurrentBuilds(),
            parameters([folioParameters.agent(),
                        folioParameters.refreshParameters()]),
            pipelineTriggers([parameterizedCron('''45 21 * * * %AGENT=rancher''')])])


if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

final String deleteNamespaceJobName = '/folioRancher/tmpFolderForDraftPipelines/Eureka/deleteNamespace-Eureka'
final String createNamespaceJobName = '/folioRancher/tmpFolderForDraftPipelines/Eureka/createNamespaceFromBranch-Eureka-Q'

CreateNamespaceParameters namespace1 = new CreateNamespaceParameters.Builder()
  .clusterName('folio-tmp')
  .namespaceName('dmtest')
  .folioBranch('snapshot')
  .okapiVersion('latest')
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .eureka(true)
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .pgType('built-in')
  .pgVersion('16.1')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('thunderjet,folijet,spitfire,vega,thor,Eureka,volaris,corsair,bama,aggies,dreamliner,leipzig')
  .uiBuild(true)
  .worker('rancher')
  .build()

CreateNamespaceParameters namespace2 = new CreateNamespaceParameters.Builder()
  .clusterName('folio-tmp')
  .namespaceName('dmtest2')
  .folioBranch('snapshot')
  .okapiVersion('latest')
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .eureka(true)
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .pgType('built-in')
  .pgVersion('16.1')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('thunderjet,folijet,spitfire,vega,thor,Eureka,volaris,corsair,bama,aggies,dreamliner,leipzig')
  .uiBuild(true)
  .worker('rancher')
  .build()

ansiColor('xterm') {
  node(params.AGENT) {
    try {
//      stage('Ini') {
//        buildName "${namespaceBaseParams.getClusterName()}-${namespaceBaseParams.getNamespaceName()}.${env.BUILD_ID}"
//        buildDescription "Config: ${namespaceBaseParams.getConfigType()}"
//      }
//
//      stage('Checkout') {
//        checkout scm
//      }

      // Check if both environments exist
      def env1Exists = folioHelm.withKubeConfig(namespace1.getClusterName()) {kubectl.checkNamespaceExistence(namespace1.getNamespaceName())}
      def env2Exists = folioHelm.withKubeConfig(namespace2.getClusterName()) {kubectl.checkNamespaceExistence(namespace2.getNamespaceName())}

      println "dmtest exist $env1Exists"
      println "dmtest2 exist $env2Exists"

      // Check both environments status
      def buildStatusEnv1 = folioHelm.withKubeConfig(namespace1.getClusterName()) {kubectl.getLabelValue(namespace1.getNamespaceName(), "build-status")}
      def buildStatusEnv2 = folioHelm.withKubeConfig(namespace2.getClusterName()) {kubectl.getLabelValue(namespace2.getNamespaceName(), "build-status")}

      println "dmtest status is $buildStatusEnv1"
      println "dmtest2 status is $buildStatusEnv2"

      // Check environments build date
      def env1BuildDate = folioHelm.withKubeConfig(namespace1.getClusterName()) { kubectl.getLabelValue(namespace1.getNamespaceName(), "build-date") }
      def env2BuildDate = folioHelm.withKubeConfig(namespace2.getClusterName()) { kubectl.getLabelValue(namespace2.getNamespaceName(), "build-date") }

      println "dmtest build date is $env1BuildDate"
      println "dmtest2 build date is $env2BuildDate"

      try {
        env1BuildDate = env1BuildDate ? new Date(env1BuildDate.toLong()) : new Date(0)
      } catch (Exception ignored) {
        env1BuildDate = new Date(0) // fallback in case of error
      }

      try {
        env2BuildDate = env2BuildDate ? new Date(env2BuildDate.toLong()) : new Date(0)
      } catch (Exception ignored) {
        env2BuildDate = new Date(0) // fallback in case of error
      }

      env1Exists = env1Exists && buildStatusEnv1 == 'SUCCESS'
      env2Exists = env2Exists && buildStatusEnv2 == 'SUCCESS'

      env1Exists = env1Exists && env2Exists && env2BuildDate >= env1BuildDate
      env2Exists = env1Exists && env2Exists && env1BuildDate < env2BuildDate


      CreateNamespaceParameters createdEnv = env2Exists ? namespace2 : namespace1
      CreateNamespaceParameters eliminatedEnv = env2Exists ? namespace1 : namespace2

      folioTriggerJob.deleteNamespace(deleteNamespaceJobName, createdEnv)

      // Deploy new environment in place of env1
      folioTriggerJob.createNamespaceFromBranch(createNamespaceJobName, createdEnv)

      folioHelm.withKubeConfig(createdEnv.getClusterName()) { kubectl.setLabel(createdEnv.getNamespaceName(), "build-status", "SUCCESS") }
      folioHelm.withKubeConfig(createdEnv.getClusterName()) { kubectl.setLabel(createdEnv.getNamespaceName(), "build-date", new Date().getTime().toString()) }

      //TODO: Decision needs to be made
      folioTriggerJob.deleteNamespace(deleteNamespaceJobName, eliminatedEnv)

    } catch (e) {
      println "Caught exception: ${e}"
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
