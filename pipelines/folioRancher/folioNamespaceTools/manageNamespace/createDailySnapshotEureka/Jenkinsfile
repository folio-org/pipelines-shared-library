#!groovy
package folioRancher.folioNamespaceTools.manageNamespace.createDailySnapshotEureka

import groovy.transform.Field
import org.jenkinsci.plugins.workflow.libs.Library
import org.folio.models.parameters.CreateNamespaceParameters

//TODO remove branch before merge to master
@Library('pipelines-shared-library@RANCHER-1818') _

@Field final String deleteNamespaceJobName = '/folioRancher/tmpFolderForDraftPipelines/Eureka/deleteNamespace-Eureka'
@Field final String createNamespaceJobName = '/folioRancher/tmpFolderForDraftPipelines/Eureka/createNamespaceFromBranch-Eureka-Q'

properties([buildDiscarder(logRotator(numToKeepStr: '30')),
            disableConcurrentBuilds(),
            parameters([folioParameters.agent(),
                        folioParameters.refreshParameters()]),
            pipelineTriggers([parameterizedCron('''45 21 * * * %AGENT=rancher''')])])


if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

CreateNamespaceParameters namespace1 = new CreateNamespaceParameters.Builder()
  .clusterName('folio-tmp')
  .namespaceName('dmtest')
  .folioBranch('snapshot')
  .okapiVersion('latest')
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .eureka(true)
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .pgType('built-in')
  .pgVersion('16.1')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('thunderjet,folijet,spitfire,vega,thor,Eureka,volaris,corsair,bama,aggies,dreamliner,leipzig')
  .uiBuild(true)
  .worker('rancher')
  .build()

CreateNamespaceParameters namespace2 = new CreateNamespaceParameters.Builder()
  .clusterName('folio-tmp')
  .namespaceName('dmtest2')
  .folioBranch('snapshot')
  .okapiVersion('latest')
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .eureka(true)
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .pgType('built-in')
  .pgVersion('16.1')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('thunderjet,folijet,spitfire,vega,thor,Eureka,volaris,corsair,bama,aggies,dreamliner,leipzig')
  .uiBuild(true)
  .worker('rancher')
  .build()

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Checkout') {
        checkout scm
      }

      CreateNamespaceParameters createdEnv = namespace1
      CreateNamespaceParameters eliminatedEnv = namespace2

      stage('Determination') {
        // Check if both environments exist
        def env1Exists = folioHelm.withKubeConfig(namespace1.getClusterName()) { kubectl.checkNamespaceExistence(namespace1.getNamespaceName()) }
        def env2Exists = folioHelm.withKubeConfig(namespace2.getClusterName()) { kubectl.checkNamespaceExistence(namespace2.getNamespaceName()) }

        println "${namespace1.getNamespaceName()} exist $env1Exists"
        println "${namespace2.getNamespaceName()} exist $env2Exists"

        // Check both environments status
        def buildStatusEnv1 = folioHelm.withKubeConfig(namespace1.getClusterName()) { kubectl.getLabelValue(namespace1.getNamespaceName(), "build-status") }
        def buildStatusEnv2 = folioHelm.withKubeConfig(namespace2.getClusterName()) { kubectl.getLabelValue(namespace2.getNamespaceName(), "build-status") }

        println "${namespace1.getNamespaceName()} status is $buildStatusEnv1"
        println "${namespace2.getNamespaceName()} status is $buildStatusEnv2"

        // Check environments build date
        def env1BuildDate = folioHelm.withKubeConfig(namespace1.getClusterName()) { kubectl.getLabelValue(namespace1.getNamespaceName(), "build-date") }
        def env2BuildDate = folioHelm.withKubeConfig(namespace2.getClusterName()) { kubectl.getLabelValue(namespace2.getNamespaceName(), "build-date") }

        println "${namespace1.getNamespaceName()} build date is $env1BuildDate"
        println "${namespace2.getNamespaceName()} build date is $env2BuildDate"

        try {
          env1BuildDate = env1BuildDate ? new Date(env1BuildDate.toLong()) : new Date(0)
        } catch (Exception ignored) {
          env1BuildDate = new Date(0) // fallback in case of error
        }

        try {
          env2BuildDate = env2BuildDate ? new Date(env2BuildDate.toLong()) : new Date(0)
        } catch (Exception ignored) {
          env2BuildDate = new Date(0) // fallback in case of error
        }

        env1Exists = env1Exists && buildStatusEnv1 == 'SUCCESS'
        env2Exists = env2Exists && buildStatusEnv2 == 'SUCCESS'

        env1Exists = env1Exists && env2Exists ? env2BuildDate <= env1BuildDate : env1Exists
        env2Exists = env1Exists && env2Exists ? env1BuildDate < env2BuildDate : env2Exists

        createdEnv = env1Exists ? namespace2 : namespace1
        eliminatedEnv = env1Exists ? namespace1 : namespace2
      }

      stage('Build name') {
        buildName "${createdEnv.getClusterName()}-${createdEnv.getNamespaceName()}.${env.BUILD_ID}"
        buildDescription "Config: ${createdEnv.getConfigType()}"
      }

      stage("Spin up ${createdEnv.getNamespaceName()}") {
        spinUpNamespaces(createdEnv, eliminatedEnv)
      }

//      //TODO: Decision needs to be made
//      if(eliminatedEnv.getNamespaceName() == namespace1.getNamespaceName()) {
//        stage("Spin up ${namespace1.getNamespaceName()}") {
//          spinUpNamespaces(eliminatedEnv, createdEnv)
//        }
//      }

    } catch (e) {
      println "Caught exception: ${e}"
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}

void spinUpNamespaces(CreateNamespaceParameters createdEnv, CreateNamespaceParameters eliminatedEnv){
  stage("Delete ${createdEnv.getNamespaceName()}") {
    folioTriggerJob.deleteNamespace(deleteNamespaceJobName, createdEnv)
  }

  stage("Spin up ${createdEnv.getNamespaceName()}") {
    folioTriggerJob.createNamespaceFromBranch(createNamespaceJobName, createdEnv)
  }

  stage("Labeled ${createdEnv.getNamespaceName()}") {
    folioHelm.withKubeConfig(createdEnv.getClusterName()) { kubectl.setLabel(createdEnv.getNamespaceName(), "build-status", "SUCCESS") }
    folioHelm.withKubeConfig(createdEnv.getClusterName()) { kubectl.setLabel(createdEnv.getNamespaceName(), "build-date", new Date().getTime().toString()) }
  }

//  stage("Delete old env ${createdEnv.getNamespaceName()}") {
//  folioTriggerJob.deleteNamespace(deleteNamespaceJobName, eliminatedEnv)
//  }
}

