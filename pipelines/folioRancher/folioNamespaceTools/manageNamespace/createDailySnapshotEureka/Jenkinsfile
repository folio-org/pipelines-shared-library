#!groovy
package folioRancher.folioNamespaceTools.manageNamespace.createDailySnapshotEureka

import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library
import org.folio.models.parameters.CreateNamespaceParameters

//TODO remove branch before merge to master
@Library('pipelines-shared-library@RANCHER-1818') _
properties([buildDiscarder(logRotator(numToKeepStr: '30')),
            disableConcurrentBuilds(),
            parameters([folioParameters.cluster(),
                        folioParameters.namespace(),
                        folioParameters.configType(),
                        booleanParam(name: 'CONSORTIA', defaultValue: false, description: '(Optional) Set to true to enable consortium'),
                        booleanParam(name: 'RW_SPLIT', defaultValue: false, description: '(Optional) Set to true to enable Read/Write split'),
                        folioParameters.pgType(),
                        folioParameters.kafkaType(),
                        folioParameters.opensearchType(['aws']),
                        folioParameters.s3Type(),
                        folioParameters.agent(),
                        folioParameters.refreshParameters()]),
            pipelineTriggers([parameterizedCron('''45 21 * * * %CLUSTER=folio-etesting;NAMESPACE=snapshot;EUREKA=true;CONFIG_TYPE=testing;CONSORTIA=false;RW_SPLIT=false;POSTGRESQL=built-in;KAFKA=built-in;OPENSEARCH=aws;S3_BUCKET=built-in;AGENT=rancher''')])])


if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

final String deleteNamespaceJobName = '/folioRancher/tmpFolderForDraftPipelines/Eureka/deleteNamespace-Eureka'

CreateNamespaceParameters namespaceBaseParams = new CreateNamespaceParameters.Builder()
  .clusterName('folio-etesting')
  .namespaceName('snapshot')
  .configType('testing')
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .pgType('built-in')
  .pgVersion('13.13')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('')
  .worker('rancher')
  .build()

CreateNamespaceParameters namespaceBaseParams2 = new CreateNamespaceParameters.Builder()
  .clusterName('folio-etesting')
  .namespaceName('snapshot')
  .configType('testing')
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .pgType('built-in')
  .pgVersion('13.13')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('')
  .worker('rancher')
  .build()


CreateNamespaceParameters namespaceParams = new CreateNamespaceParameters.Builder()
  .clusterName('folio-tmp')
  .namespaceName('dmtest')
  .folioBranch('snapshot')
  .okapiVersion('latest')
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .eureka(true)
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .pgType('built-in')
  .pgVersion('13.13')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('thunderjet,folijet,spitfire,vega,thor,Eureka,volaris,corsair,bama,aggies,dreamliner,leipzig')
  .uiBuild(true)
  .build()

CreateNamespaceParameters namespaceParams2 = new CreateNamespaceParameters.Builder()
  .clusterName('folio-tmp')
  .namespaceName('dmtest2')
  .folioBranch('snapshot')
  .okapiVersion('latest')
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .eureka(true)
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .pgType('built-in')
  .pgVersion('13.13')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('thunderjet,folijet,spitfire,vega,thor,Eureka,volaris,corsair,bama,aggies,dreamliner,leipzig')
  .uiBuild(true)
  .build()

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "${namespaceBaseParams.getClusterName()}-${namespaceBaseParams.getNamespaceName()}.${env.BUILD_ID}"
        buildDescription "Config: ${namespaceBaseParams.getConfigType()}"
      }

      stage('Checkout') {
        checkout scm
      }
//
//      stage('[TF] Destroy') {
//        def nsExists
//        folioHelm.withKubeConfig(namespaceBaseParams.getClusterName()) {
//          nsExists = kubectl.checkNamespaceExistence("${namespaceBaseParams.getNamespaceName()}")
//        }
//        if (nsExists) {
//          folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceBaseParams)
//        } else {
//          new Logger(this, 'dailySnapshotEureka').warning("${namespaceBaseParams.getNamespaceName()} namespace does not exists!")
//        }
//      }

      if (namespaceParams.eureka) {

        // Check if both environments exist
        folioHelm.withKubeConfig(namespaceParams.getClusterName()) {
          def env1Exists = kubectl.checkNamespaceExistence("dmtest")
          def env2Exists = kubectl.checkNamespaceExistence("dmtest2")
          println "dmtest exist $env1Exists"
          println "dmtest2 exist $env2Exists"
          // Check both environments status
          def buildStatusEnv1 = kubectl.getLabelValue("dmtest", "build-status")
          def buildStatusEnv2 = kubectl.getLabelValue("dmtest2", "build-status")
          println "dmtest2 status is $buildStatusEnv1"
          println "dmtest2 status is $buildStatusEnv2"
          //Destroy the older environment
          if (env1Exists && env2Exists) {
            if (buildStatusEnv1 == 'SUCCESS' && buildStatusEnv2 == 'SUCCESS') {
              // Check environments build date
              def env1BuildDate = kubectl.getLabelValue("dmtest", "build-date")
              def env2BuildDate = kubectl.getLabelValue("dmtest2", "build-date")

              if (env1BuildDate < env2BuildDate) {
                folioNamespaceCreateEureka(namespaceParams2)
                kubectl.setLabel("dmtest2", "build-status", "SUCCESS")
                kubectl.setLabelWithDate("dmtest2", "build-date")
                folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceParams)
                println "Older namespace1 destroyed."
              } else {
                folioNamespaceCreateEureka(namespaceParams)
                kubectl.setLabel("dmtest", "build-status", "SUCCESS")
                kubectl.setLabelWithDate("dmtest", "build-date")
                folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceParams2)
                println "Older namespace2 destroyed."
              }
            }
          } else if (!env1Exists) {
            // Deploy new environment in place of env1
            folioNamespaceCreateEureka(namespaceParams)
            kubectl.setLabel("dmtest", "build-status", "SUCCESS")
            kubectl.setLabelWithDate("dmtest", "build-date")
            buildStatusEnv1 = kubectl.getLabelValue("snapshot", "build-status")
            if (buildStatusEnv1 == 'SUCCESS') {
              folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceParams2)
              println "New environment snapshot is successful, destroyed snapshot2."
            }
          } else if (!env2Exists) {
            // Deploy new environment in place of env2
            folioNamespaceCreateEureka(namespaceParams2)
            kubectl.setLabel("dmtest2", "build-status", "SUCCESS")
            kubectl.setLabelWithDate("dmtest2", "build-date")
            buildStatusEnv2 = kubectl.getLabelValue("snapshot2", "build-status")
            if (buildStatusEnv2 == 'SUCCESS') {
              folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceParams)
              println "New environment snapshot2 is successful, destroyed snapshot."
            }

          } else {
            folioNamespaceCreateEureka(namespaceParams)
          }
        }

      } else {
//        folioNamespaceCreate(namespaceParams)
        println "NOOOOOOOOOOOOOOO."
      }

    } catch (e) {
      println "Caught exception: ${e}"
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
