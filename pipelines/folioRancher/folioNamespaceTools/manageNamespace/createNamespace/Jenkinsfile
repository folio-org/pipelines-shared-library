#!groovy
import org.folio.Constants
import org.folio.models.TerraformConfig
import org.jenkinsci.plugins.workflow.libs.Library

//TODO remove branch before merge to master
@Library('pipelines-shared-library@RANCHER-741-Jenkins-Enhancements') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    booleanParam(name: 'RW_SPLIT', defaultValue: true, description: '(Optional) Set true to Enable Read/Write split'),
    booleanParam(name: 'GREENMAIL', defaultValue: false, description: '(Optional) Set true to deploy greenmail server'),
    folioParameters.pgType(),
    folioParameters.kafkaType(),
    folioParameters.opensearchType(),
    folioParameters.s3Type(),
    string(name: 'MEMBERS', defaultValue: '', description: '(Optional) Coma separated list of GitHub teams who need an access to the namespace'),
    folioParameters.agent(),
    folioParameters.refreshParameters()
  ])
])

String defaultTenantId = 'diku'

//Set terraform configuration
TerraformConfig tfConfig = new TerraformConfig('terraform/rancher/project')
  .withWorkspace("${params.CLUSTER}-${params.NAMESPACE}")

tfConfig.addVar('rancher_cluster_name', params.CLUSTER)
tfConfig.addVar('rancher_project_name', params.NAMESPACE)
tfConfig.addVar('tenant_id', defaultTenantId)
tfConfig.addVar('pg_password', Constants.PG_ROOT_DEFAULT_PASSWORD)
tfConfig.addVar('pgadmin_password', Constants.PGADMIN_DEFAULT_PASSWORD)
tfConfig.addVar('pg_embedded', params.POSTGRESQL == 'built-in')
tfConfig.addVar('kafka_shared', params.KAFKA != 'built-in')
tfConfig.addVar('opensearch_shared', params.OPENSEARCH != 'built-in')
tfConfig.addVar('s3_embedded', params.S3_BUCKET == 'built-in')
tfConfig.addVar('pgadmin4', 'true')
tfConfig.addVar('enable_rw_split', params.RW_SPLIT)
tfConfig.addVar('pg_ldp_user_password', Constants.PG_LDP_DEFAULT_PASSWORD)
tfConfig.addVar('github_team_ids', folioTools.getGitHubTeamsIds("${Constants.ENVS_MEMBERS_LIST[params.NAMESPACE]},${params.MEMBERS}").collect { "\"${it}\"" })

ansiColor('xterm') {
  if (params.REFRESH_PARAMETERS) {
    currentBuild.result = 'ABORTED'
    error('DRY RUN BUILD, PARAMETERS REFRESHED!')
  }

  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "${tfConfig.getWorkspace()}.${env.BUILD_ID}"
        buildDescription "RW split: ${params.RW_SPLIT}"
      }

      stage('Checkout') {
        checkout scm
      }

      folioTerraformFlow.manageNamespace('apply', tfConfig)

      if (params.GREENMAIL) {
        stage('[Helm] Deploy greenmail') {
          folioHelm.withKubeConfig(params.CLUSTER) {
            folioHelmFlow.deployGreenmail(params.NAMESPACE)
          }
        }
      }
    } catch (e) {
      println "Caught exception: ${e}"
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
