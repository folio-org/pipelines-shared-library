#!groovy
import org.folio.Constants
import org.folio.jenkins.JenkinsAgentLabel
import org.folio.jenkins.PodTemplates
import org.folio.models.parameters.CreateNamespaceParameters

@Library('pipelines-shared-library@RANCHER-2236') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    booleanParam(name: 'RW_SPLIT', defaultValue: false, description: '(Optional) Set true to Enable Read/Write split'),
    booleanParam(name: 'GREENMAIL', defaultValue: false, description: '(Optional) Set true to deploy greenmail server'),
    booleanParam(name: 'MOCK_SERVER', defaultValue: false, description: '(Optional) Set true to deploy mock-server'),
    folioParameters.pgType(),
    folioParameters.pgVersion(),
    folioParameters.kafkaType(),
    folioParameters.opensearchType(),
    folioParameters.s3Type(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

if (params.CLUSTER == 'folio-testing') {
  folioCommon.kitfoxApproval()
}

CreateNamespaceParameters namespaceParams = new CreateNamespaceParameters.Builder()
  .clusterName(params.CLUSTER)
  .namespaceName(params.NAMESPACE)
  .rwSplit(params.RW_SPLIT)
  .greenmail(params.GREENMAIL)
  .mockServer(params.MOCK_SERVER)
  .pgType(params.POSTGRESQL)
  .pgVersion(params.DB_VERSION)
  .kafkaType(params.KAFKA)
  .opensearchType(params.OPENSEARCH)
  .s3Type(params.S3_BUCKET)
  .namespaceOnly(true)
  .build()

folioCommon.validateNamespace(params.NAMESPACE)

ansiColor('xterm') {
  PodTemplates podTemplates = new PodTemplates(this)

  podTemplates.defaultTemplate {
    node(JenkinsAgentLabel.DEFAULT_AGENT.getLabel()) {
      stage('Ini') {
        buildName "${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}"
        buildDescription "DB version: ${params.DB_VERSION}\nRW split: ${params.RW_SPLIT}\n" +
          "Greenmail: ${params.POSTGRESQL}\nMock server: ${params.MOCK_SERVER}"
      }

      stage('Checkout') {
        git(url: "${Constants.FOLIO_GITHUB_URL}/pipelines-shared-library.git",
          branch: folioTools.getPipelineBranch(),
          credentialsId: Constants.PRIVATE_GITHUB_CREDENTIALS_ID,
          poll: false)
      }

      folioNamespaceCreate.call(namespaceParams)
    }
  }
}
