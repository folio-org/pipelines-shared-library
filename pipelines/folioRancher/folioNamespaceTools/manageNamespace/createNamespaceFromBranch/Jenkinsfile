#!groovy

import org.folio.models.OkapiTenant
import org.folio.models.OkapiUser
import org.folio.models.RancherNamespace
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.models.parameters.CypressTestsParameters
import org.folio.rest_v2.Constants
import org.folio.rest_v2.PlatformType
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-2429') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  parameters([
    folioParameters.platform(),
    folioParameters.cluster('PLATFORM'),
    folioParameters.namespace(),
    folioParameters.branch(),
    folioParameters.okapiVersion(),
    folioParameters.applicationSet(),
    folioParameters.applications(),
    folioParameters.configType(),
    booleanParam(name: 'SC_NATIVE', defaultValue: false, description: '(Optional) Set true to use previously built SC image'),
    folioParameters.groupParameters("Environment features"
      , ["LOAD_REFERENCE", "LOAD_SAMPLE", "BUILD_UI", "CONSORTIA", "LINKED_DATA", "MARC_MIGRATIONS", "SPLIT_FILES"
         , "RW_SPLIT", "ECS_CCL", "GREENMAIL", "MOCK_SERVER", "RTR", "DATASET", "TYPE"
         , "HAS_SECURE_TENANT", "SECURE_TENANT"
    ]),
    folioParameters.loadReference(),
    folioParameters.loadSample(),
    booleanParam(name: 'BUILD_UI', defaultValue: true, description: '(Optional) Set true to include UI'),
    booleanParam(name: 'CONSORTIA', defaultValue: true, description: '(Optional) Set true to create consortium'),
    booleanParam(name: 'HAS_SECURE_TENANT', defaultValue: true, description: '(Optional) Set true to enable secure tenant on one of the consortia institutional tenant'),
    folioParameters.consortiaSecureMemberTenant(),
    booleanParam(name: 'LINKED_DATA', defaultValue: true, description: '(Optional) Set true to deploy LinkedData'),
    booleanParam(name: 'MARC_MIGRATIONS', defaultValue: false, description: '(Optional) Set true to deploy Marc-Migrations'),
    booleanParam(name: 'SPLIT_FILES', defaultValue: true, description: '(Optional) Set true to enable split-files functionality'),
    booleanParam(name: 'RW_SPLIT', defaultValue: false, description: '(Optional) Set true to Enable Read/Write split'),
    booleanParam(name: 'ECS_CCL', defaultValue: false, description: '(Optional) Set true to enable ECS Circulation + Congressional loans functionality'),
    booleanParam(name: 'GREENMAIL', defaultValue: false, description: '(Optional) Set true to deploy greenmail server'),
    booleanParam(name: 'MOCK_SERVER', defaultValue: false, description: '(Optional) Set true to deploy mock-server'),
    booleanParam(name: 'RTR', defaultValue: false, description: '(Optional) Set true to enable RTR'),
    booleanParam(name: 'DATASET', defaultValue: false, description: '(Optional) Set true to build BF like environment'),
    choice(name: 'TYPE', choices: ['full', 'terraform', 'update'], description: '(Required) Set action TYPE to perform'),
    string(name: 'DB_BACKUP_NAME', defaultValue: org.folio.Constants.BUGFEST_SNAPSHOT_NAME, description: '(Optional) Set name of the DB backup to restore'),
    folioParameters.groupParameters("Integrations"
      , ["POSTGRESQL", "DB_VERSION", "KAFKA", "OPENSEARCH", "S3_BUCKET", "DB_BACKUP_NAME"]),
    folioParameters.pgType(),
    folioParameters.pgVersion(),
    folioParameters.kafkaType(),
    folioParameters.opensearchType(),
    folioParameters.s3Type(),
    folioParameters.runSanityCheck(),
    folioParameters.refreshParameters()
    , folioParameters.hideParameters(
    [
      'EUREKA': ['OKAPI_VERSION'],
      'OKAPI' : ['APPLICATION_SET', 'APPLICATIONS', 'SC_NATIVE']
    ]
    , "PLATFORM")
    , folioParameters.hideParameters(
    [
      '': ['HAS_SECURE_TENANT', 'SECURE_TENANT']
    ]
    , "CONSORTIA")
    , folioParameters.hideParameters(
    [
      '': ['SECURE_TENANT']
    ]
    , "HAS_SECURE_TENANT")
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

if (params.CLUSTER != 'folio-tmp') {
  folioCommon.validateNamespace(params.NAMESPACE)
}

if (params.CLUSTER == 'folio-testing') {
  folioCommon.kitfoxApproval()
}

if (params.DATASET) {
  folioCommon.kitfoxApproval()
}

CreateNamespaceParameters namespaceParams = new CreateNamespaceParameters.Builder()
  .platform(PlatformType.valueOf(params.PLATFORM))
  .clusterName(params.CLUSTER)
  .namespaceName(params.NAMESPACE)
  .folioBranch(params.FOLIO_BRANCH)
  .okapiVersion(params.OKAPI_VERSION)
  .configType(params.CONFIG_TYPE)
  .loadReference(params.LOAD_REFERENCE)
  .loadSample(params.LOAD_SAMPLE)
  .consortia(params.CONSORTIA)
  .splitFiles(params.SPLIT_FILES)
  .ecsCCL(params.ECS_CCL)
  .rwSplit(params.RW_SPLIT)
  .linkedData(params.LINKED_DATA)
  .greenmail(params.GREENMAIL)
  .mockServer(params.MOCK_SERVER)
  .rtr(params.RTR)
  .applicationSet(params.APPLICATION_SET)
  .applications(Constants.APPLICATION_BRANCH(params.APPLICATION_SET as String
    , (params.APPLICATIONS as String).split(',') as List))
  .hasSecureTenant(params.HAS_SECURE_TENANT)
  .secureTenantId(params.SECURE_TENANT)
  .pgType(params.POSTGRESQL)
  .pgVersion(params.DB_VERSION)
  .kafkaType(params.KAFKA)
  .opensearchType(params.OPENSEARCH)
  .s3Type(params.S3_BUCKET)
  .uiBuild(params.BUILD_UI)
  .kongVersion('latest')
  .keycloakVersion('latest')
  .dataset(params.DATASET)
  .type(params.TYPE)
  .scNative(params.SC_NATIVE)
  .build()

if (params.CONSORTIA) {
  if (namespaceParams.platform == PlatformType.EUREKA)
    namespaceParams.folioExtensions.add('consortia-eureka')
  else
    namespaceParams.folioExtensions.add('consortia')
}

if (params.LINKED_DATA) {
  namespaceParams.folioExtensions.add('linked-data')
}

if (params.MARC_MIGRATIONS) {
  namespaceParams.folioExtensions.add('marc-migrations')
}

RancherNamespace namespace = new RancherNamespace(namespaceParams.getClusterName(), namespaceParams.getNamespaceName())

CypressTestsParameters cypressSanityParameters = new CypressTestsParameters()
cypressSanityParameters.setCiBuildId(env.JOB_BASE_NAME)
cypressSanityParameters.setTestsSrcBranch('okapi')
cypressSanityParameters.setTenantUrl("https://${namespace.generateDomain('diku')}")
cypressSanityParameters.setOkapiUrl("https://${namespace.getDomains().okapi}")
cypressSanityParameters.setTenant(new OkapiTenant('diku')
  .withAdminUser(new OkapiUser('diku_admin', 'admin')))
cypressSanityParameters.setWorkerLabel('cypress-static') // Switch back to cypress when the ticket is resolved https://folio-org.atlassian.net/browse/RANCHER-1546
cypressSanityParameters.setNumberOfWorkers(4)
cypressSanityParameters.setTimeout('60')

if (namespaceParams.platform == PlatformType.EUREKA) {
  cypressSanityParameters.setTestsSrcBranch('master')
  cypressSanityParameters.setOkapiUrl("https://${namespace.getDomains().kong}")
  //TODO: Temporary exclusion of the eholdings and software-version test cases.
  cypressSanityParameters.setExecParameters('--env grepTags="fse+sanity"')
} else {
  cypressSanityParameters.setTestsSrcBranch('okapi')
  cypressSanityParameters.setOkapiUrl("https://${namespace.getDomains().okapi}")
  cypressSanityParameters.setExecParameters('--env grepTags="fse+sanity"')
}

ansiColor('xterm') {
  if (namespaceParams.platform == PlatformType.EUREKA) {
    folioNamespaceCreateEureka.call(namespaceParams)
  } else {
    folioNamespaceCreate.call(namespaceParams)
  }

  stage('[Cypress] Run sanity check') {
    if (params.RUN_SANITY_CHECK) {
      folioCypressFlow.call(cypressSanityParameters.getCiBuildId(), [cypressSanityParameters])
    }
  }
}
