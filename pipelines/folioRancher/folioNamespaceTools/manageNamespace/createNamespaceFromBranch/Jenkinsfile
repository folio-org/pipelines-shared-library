#!groovy
package folioRancher.folioNamespaceTools.manageNamespace.createNamespaceFromBranch

import org.folio.models.OkapiTenant
import org.folio.models.OkapiUser
import org.folio.models.RancherNamespace
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.models.parameters.CypressTestsParameters
import org.folio.rest_v2.PlatformType
import org.jenkinsci.plugins.workflow.libs.Library

//TODO remove branch before merge to master
@Library('pipelines-shared-library@RANCHER-1334') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
//  disableConcurrentBuilds(),
  parameters([
    folioParameters.platform(),
    folioParameters.cluster('PLATFORM'),
    folioParameters.namespace(),
    folioParameters.branch(),
    folioParameters.okapiVersion(),
    folioParameters.configType(),
    folioParameters.loadReference(),
    folioParameters.loadSample(),
    booleanParam(name: 'BUILD_UI', defaultValue: true, description: '(Optional) Set true to include UI'),
    booleanParam(name: 'CONSORTIA', defaultValue: true, description: '(Optional) Set true to create consortium'),
    booleanParam(name: 'LINKED_DATA', defaultValue: true, description: '(Optional) Set true to deploy LinkedData'),
    booleanParam(name: 'SPLIT_FILES', defaultValue: true, description: '(Optional) Set true to enable split-files functionality'),
    booleanParam(name: 'RW_SPLIT', defaultValue: true, description: '(Optional) Set true to Enable Read/Write split'),
    booleanParam(name: 'ECS_CCL', defaultValue: false, description: '(Optional) Set true to enable ECS Circulation + Congressional loans functionality'),
    booleanParam(name: 'GREENMAIL', defaultValue: false, description: '(Optional) Set true to deploy greenmail server'),
    booleanParam(name: 'MOCK_SERVER', defaultValue: false, description: '(Optional) Set true to deploy mock-server'),
    booleanParam(name: 'RTR', defaultValue: false, description: '(Optional) Set true to enable RTR'),
    folioParameters.pgType(),
    folioParameters.pgVersion(),
    folioParameters.kafkaType(),
    folioParameters.opensearchType(),
    folioParameters.s3Type(),
    folioParameters.runSanityCheck(),
    string(name: 'MEMBERS', defaultValue: '', description: '(Optional) Coma separated list of GitHub teams who need an access to the namespace'),
    folioParameters.agent(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

if (params.CLUSTER == 'folio-testing') {
  folioCommon.kitfoxApproval()
}

CreateNamespaceParameters namespaceParams = new CreateNamespaceParameters.Builder()
  .platform(PlatformType.valueOf(params.PLATFORM))
  .clusterName(params.CLUSTER)
  .namespaceName(params.NAMESPACE)
  .folioBranch(params.FOLIO_BRANCH)
  .okapiVersion(params.OKAPI_VERSION)
  .configType(params.CONFIG_TYPE)
  .loadReference(params.LOAD_REFERENCE)
  .loadSample(params.LOAD_SAMPLE)
  .consortia(params.CONSORTIA)
  .splitFiles(params.SPLIT_FILES)
  .ecsCCL(params.ECS_CCL)
  .rwSplit(params.RW_SPLIT)
  .linkedData(params.LINKED_DATA)
  .greenmail(params.GREENMAIL)
  .mockServer(params.MOCK_SERVER)
  .rtr(params.RTR)
  .pgType(params.POSTGRESQL)
  .pgVersion(params.DB_VERSION)
  .kafkaType(params.KAFKA)
  .opensearchType(params.OPENSEARCH)
  .s3Type(params.S3_BUCKET)
  .members(params.MEMBERS)
  .uiBuild(params.BUILD_UI)
  .build()

if (params.CONSORTIA) {
  if (namespaceParams.platform == PlatformType.EUREKA)
    namespaceParams.folioExtensions.add('consortia-eureka')
  else
    namespaceParams.folioExtensions.add('consortia')
}

if (params.LINKED_DATA) {
  namespaceParams.folioExtensions.add('linked-data')
}

RancherNamespace namespace = new RancherNamespace(namespaceParams.getClusterName(), namespaceParams.getNamespaceName())

CypressTestsParameters cypressSanityParameters = new CypressTestsParameters()
cypressSanityParameters.setCiBuildId(env.JOB_BASE_NAME)
cypressSanityParameters.setTenantUrl("https://${namespace.generateDomain('diku')}")
cypressSanityParameters.setTenant(new OkapiTenant('diku')
  .withAdminUser(new OkapiUser('diku_admin', 'admin')))
cypressSanityParameters.setWorkerLabel('cypress-static') // Switch back to cypress when the ticket is resolved https://folio-org.atlassian.net/browse/RANCHER-1546
cypressSanityParameters.setNumberOfWorkers(4)
cypressSanityParameters.setTimeout('60')

if(namespaceParams.platform == PlatformType.EUREKA) {
  cypressSanityParameters.setTestsSrcBranch('eureka-test-snapshot')
  cypressSanityParameters.setOkapiUrl("https://${namespace.getDomains().kong}")
  //TODO: Temporary exclusion of the eholdings and software-version test cases.
  cypressSanityParameters.setExecParameters('--env grepTags="fse+sanity+-eholdings+-software-version"')
}else {
  cypressSanityParameters.setTestsSrcBranch('master')
  cypressSanityParameters.setOkapiUrl("https://${namespace.getDomains().okapi}")
  cypressSanityParameters.setExecParameters('--env grepTags="fse+sanity"')
}

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}"
        buildDescription "Branch: ${params.FOLIO_BRANCH}\nConfig: ${params.CONFIG_TYPE}\n" +
          "DB version: ${params.DB_VERSION}\nRW split: ${params.RW_SPLIT}\nGreenmail: ${params.POSTGRESQL}\n" +
          "Mock server: ${params.MOCK_SERVER}\nConsortia: ${params.CONSORTIA}"
      }

      stage('Checkout') {
        checkout scm
      }

      if (namespaceParams.platform == PlatformType.EUREKA) {
        folioNamespaceCreateEureka(namespaceParams)
      } else {
        folioNamespaceCreate(namespaceParams)
      }

//      stage('[Cypress] Run sanity check'){
//        if(params.RUN_SANITY_CHECK) {
//          folioCypressFlow.runWrapper(cypressSanityParameters.getCiBuildId(), false, '', false) {
//            folioCypressFlow.multiThreadRun(cypressSanityParameters)
//          }
//        }
//      }

    } catch (e) {
      /** Put error message to the Job Run description */
      currentBuild.description = e.getMessage()
      currentBuild.result = 'FAILURE'

      println "Caught exception: ${e}"
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
