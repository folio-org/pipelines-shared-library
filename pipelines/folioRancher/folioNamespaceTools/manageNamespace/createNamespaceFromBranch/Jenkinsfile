#!groovy
import org.jenkinsci.plugins.workflow.libs.Library
import org.folio.models.parameters.CreateNamespaceParameters

//TODO remove branch before merge to master
@Library('pipelines-shared-library@RANCHER-1054') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
//  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.branch(),
    folioParameters.okapiVersion(),
    folioParameters.configType(),
    folioParameters.loadReference(),
    folioParameters.loadSample(),
    booleanParam(name: 'CONSORTIA', defaultValue: true, description: '(Optional) Set true to create consortium'),
    booleanParam(name: 'RW_SPLIT', defaultValue: false, description: '(Optional) Set true to Enable Read/Write split'),
    booleanParam(name: 'GREENMAIL', defaultValue: false, description: '(Optional) Set true to deploy greenmail server'),
    booleanParam(name: 'MOCK_SERVER', defaultValue: false, description: '(Optional) Set true to deploy mock-server'),
    booleanParam(name: 'RTR', defaultValue: false, description: '(Optional) Set true to enable RTR'),
    folioParameters.pgType(),
    folioParameters.pgVersion(),
    folioParameters.kafkaType(),
    folioParameters.opensearchType(),
    folioParameters.s3Type(),
    string(name: 'MEMBERS', defaultValue: '', description: '(Optional) Coma separated list of GitHub teams who need an access to the namespace'),
    folioParameters.agent(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

CreateNamespaceParameters namespaceParams = new CreateNamespaceParameters.Builder()
  .clusterName(params.CLUSTER)
  .namespaceName(params.NAMESPACE)
  .folioBranch(params.FOLIO_BRANCH)
  .okapiVersion(params.OKAPI_VERSION)
  .configType(params.CONFIG_TYPE)
  .loadReference(params.LOAD_REFERENCE)
  .loadSample(params.LOAD_SAMPLE)
  .consortia(params.CONSORTIA)
  .rwSplit(params.RW_SPLIT)
  .greenmail(params.GREENMAIL)
  .mockServer(params.MOCK_SERVER)
  .rtr(params.RTR)
  .pgType(params.POSTGRESQL)
  .pgVersion(params.DB_VERSION)
  .kafkaType(params.KAFKA)
  .opensearchType(params.OPENSEARCH)
  .s3Type(params.S3_BUCKET)
  .members(params.MEMBERS)
  .build()

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}"
        buildDescription "Branch: ${params.FOLIO_BRANCH}\nConfig: ${params.CONFIG_TYPE}\n" +
          "DB version: ${params.DB_VERSION}\nRW split: ${params.RW_SPLIT}\nGreenmail: ${params.POSTGRESQL}\n" +
          "Mock server: ${params.MOCK_SERVER}\nConsortia: ${params.CONSORTIA}"
      }

      stage('Checkout') {
        checkout scm
      }

      folioNamespaceCreate(namespaceParams)

    } catch (e) {
      println "Caught exception: ${e}"
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
