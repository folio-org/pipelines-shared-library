#!groovy
import groovy.json.JsonOutput
import org.folio.Constants
import org.folio.rest.GitHubUtility
import org.folio.utilities.Tools
import org.jenkinsci.plugins.workflow.libs.Library

LIB_BRANCH = 'RANCHER-834'
@Library('pipelines-shared-library@RANCHER-834') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '20')),
  disableConcurrentBuilds(),
  parameters([
      jobsParameters.clusterName(),
      jobsParameters.projectName(),
      jobsParameters.secretOperations(),
      booleanParam(defaultValue: false, description: '', name: 'json_value'),
      string(defaultValue: '', description: '(Required for all 3 operations: create, delete & update)', name: 'secret_name'),
      string(defaultValue: '', description: '(Key name inside secret)', name: 'key_name'),
      string(defaultValue: '', description: '(Required for operations: create & update)', name: 'secret_value'),
      string(defaultValue: '', description: '(Value name inside secret)', name: 'value_name'),
      jobsParameters.agents(),
      jobsParameters.refreshParameters()
  ])
])

ansiColor('xterm') {
  if (params.refresh_parameters) {
    currentBuild.result = 'ABORTED'
    println('REFRESH JOB PARAMETERS!')
    return
  }
  node(params.agent) {
    try {
      stage('Checkout') {
        checkout scm
      }

  stage('manage secrets') {
    switch (params.operation_type) {
      case 'create':
        if (params.json_value) {
             echo "Operation type create secret with Json value in progress for secret: ${secret_name}"
             folioHelm.withKubeConfig("${params.rancher_cluster_name}") {
             kubectl.createSecretWithJson(secret_name, secret_value, key_name, params.rancher_project_name)
           }
         }
        else {
            echo "Operation type create secret with key/value pair in progress for secret: ${secret_name}"
            folioHelm.withKubeConfig("${params.rancher_cluster_name}") {
            kubectl.createSecret(secret_name, key_name, key_name,value_name, secret_value, rancher_project_name)
          }
        }
      break
      case 'delete':
        if (params.operation_type == 'delete') {
           echo "Operation type delete secret in progress for secret: ${secret_name}"
           folioHelm.withKubeConfig("${params.rancher_cluster_name}") {
           kubectl.deleteSecret(secret_name, params.rancher_project_name)
          }
        }
      break
        }
      }
    } catch (exception) {
      println(exception)
      error(exception.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
