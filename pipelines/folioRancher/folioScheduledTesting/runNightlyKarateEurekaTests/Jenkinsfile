#!groovy
package folioRancher.folioScheduledTesting.runNightlyKarateTests

import groovy.transform.Field
import org.folio.Constants
import org.folio.models.OkapiTenant
import org.folio.models.OkapiUser
import org.folio.models.RancherNamespace
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.models.parameters.KarateTestsParameters
import org.folio.rest_v2.PlatformType
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-1334') _

/**
 * Job properties and parameters
 */
properties([
  pipelineTriggers([cron('H 4 * * 1-5')]),
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    string(name: 'TESTS_BRANCH', defaultValue: 'master-eureka', description: "(Required) Karate tests repository branch to checkout"),
    string(name: 'THREADS_COUNT', defaultValue: '4', description: "(Required) Number of parallel threads"),
    booleanParam(name: 'DESTROY_AFTER', defaultValue: true, description: '(Optional) Set to false to not destroy namespace after tests execution'),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

/**
 * Job variables
 */
Logger logger = new Logger(this, env.JOB_BASE_NAME)

final String createNamespaceJobName = Constants.JENKINS_CREATE_NAMESPACE_FROM_BRANCH_JOB_EUREKA
final String deleteNamespaceJobName = Constants.JENKINS_DELETE_NAMESPACE_JOB_EUREKA
String okapiVersion = folioTools.eval(folioStringScripts.getOkapiVersions(), ['FOLIO_BRANCH': 'snapshot'])[0]

CreateNamespaceParameters namespaceBaseParams = new CreateNamespaceParameters.Builder()
  .platform(PlatformType.EUREKA)
  .clusterName('folio-etesting')
  .namespaceName('karate-eureka')
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .pgType('built-in')
  .pgVersion('16.1')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .runSanityCheck(false)
  .members('dojo')
  .uiBuild(true)
  .worker('rancher')
  .build()

CreateNamespaceParameters namespaceFromBranchParams = namespaceBaseParams.toBuilder()
  .folioBranch('snapshot')
  .okapiVersion(okapiVersion)
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .rtr(false)
  .applicationSet('Complete')
  .applications(org.folio.rest_v2.Constants.APPLICATION_BRANCH('Complete'))
  .hasSecureTenant(true)
  .secureTenantId(folioDefault.consortiaTenants().get('university').getTenantId())
  .uiBuild(true)
  .build()

RancherNamespace namespace = new RancherNamespace(namespaceBaseParams.getClusterName(), namespaceBaseParams.getNamespaceName())
namespace.withSuperTenantAdminUser()

KarateTestsParameters karateTestsParams = new KarateTestsParameters()
karateTestsParams.gitBranch = params.TESTS_BRANCH
karateTestsParams.okapiUrl = "https://${namespace.getDomains().kong}"
karateTestsParams.edgeUrl = "https://${namespace.getDomains().edge}"
karateTestsParams.tenant = namespace.getSuperTenant().getTenantId()
karateTestsParams.prototypeTenant = 'diku'
karateTestsParams.adminUserName = namespace.getSuperTenant().getAdminUser().getUsername()
karateTestsParams.adminPassword = namespace.getSuperTenant().getAdminUser().getPassword()
karateTestsParams.threadsCount = params.THREADS_COUNT
karateTestsParams.reportPortalProjectName = 'karate-eureka'
karateTestsParams.sendSlackNotification = true
karateTestsParams.syncWithJira = true
karateTestsParams.timeout = '2'

/**
 * Pipeline
 */
ansiColor('xterm') {
  node('jenkins-agent-java21') {
    try {
      stage('Ini') {
        buildDescription "Branch: ${params.TESTS_BRANCH}\nThreads: ${params.THREADS_COUNT}\nDestroy after: ${params.DESTROY_AFTER}"
        cleanWs()
      }

      stage('[Job] Destroy environment (before)') {
        def nsExists
        folioHelm.withKubeConfig(namespaceBaseParams.getClusterName()) {
          nsExists = kubectl.checkNamespaceExistence("${namespaceBaseParams.getNamespaceName()}")
        }
        if (nsExists) {
          retry(2) {
            folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceBaseParams)
          }
        } else {
          logger.warning("${namespaceBaseParams.getNamespaceName()} namespace does not exists!")
        }
      }

      stage('[Job] Provision environment') {
        try {
          folioTriggerJob.createNamespaceFromBranch(createNamespaceJobName, namespaceFromBranchParams)
        } catch (Exception new_ex) {
          slackSend(attachments: folioSlackNotificationUtils.renderFailedBuildResultMessage()
            , channel: "#rancher_tests_notifications")
          throw new Exception("Provision of the environment is failed: " + new_ex)
        }
      }

      stage('[Flow] Execute tests') {
       folioKarateFlow(karateTestsParams)
      }

      if (params.DESTROY_AFTER) {
        stage('[Job] Destroy environment (after)') {
          folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceBaseParams)
        }
      }
    } catch (e) {
      logger.warning("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        logger.debug("Workspace size: ${sh(returnStdout: true, script: 'du -sh .').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}
