#!groovy
import org.folio.models.RancherNamespace
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.models.parameters.KarateTestsParameters
import org.folio.utilities.Logger

@Library('pipelines-shared-library') _

/**
 * Job properties and parameters
 */
properties([
  pipelineTriggers([cron('H 3 * * *')]),
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    string(name: 'TESTS_BRANCH', defaultValue: 'master', description: "(Required) Karate tests repository branch to checkout"),
    string(name: 'THREADS_COUNT', defaultValue: '4', description: "(Required) Number of parallel threads"),
    booleanParam(name: 'DESTROY_AFTER', defaultValue: true, description: '(Optional) Set to false to not destroy namespace after tests execution'),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

Logger logger = new Logger(this, env.JOB_BASE_NAME)

/**
 * Job variables
 */
final String createNamespaceJobName = '/folioRancher/folioNamespaceTools/createNamespaceFromBranch'
final String deleteNamespaceJobName = '/folioRancher/folioNamespaceTools/deleteNamespace'
String okapiVersion = folioTools.eval(folioStringScripts.getOkapiVersions(), ['FOLIO_BRANCH': 'snapshot'])[0]

CreateNamespaceParameters namespaceBaseParams = new CreateNamespaceParameters.Builder()
  .clusterName('folio-testing')
  .namespaceName('karate')
  .rwSplit(false)
  .greenmail(false)
  .mockServer(true)
  .pgType('built-in')
  .pgVersion('13.13')
  .kafkaType('built-in')
  .opensearchType('built-in')
  .s3Type('built-in')
  .members('')
  .worker('rancher')
  .build()

CreateNamespaceParameters namespaceFromBranchParams = namespaceBaseParams.toBuilder()
  .folioBranch('snapshot')
  .okapiVersion(okapiVersion)
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .rtr(false)
  .build()

RancherNamespace karateNamespace = new RancherNamespace(namespaceBaseParams.getClusterName(), namespaceBaseParams.getNamespaceName())
karateNamespace.withSuperTenantAdminUser()

KarateTestsParameters karateTestsParams = new KarateTestsParameters()
karateTestsParams.okapiUrl = "https://${karateNamespace.getDomains().okapi}"
karateTestsParams.edgeUrl = "https://${karateNamespace.getDomains().edge}"
karateTestsParams.tenant = karateNamespace.getSuperTenant().getTenantId()
karateTestsParams.prototypeTenant = 'consortium'
karateTestsParams.adminUserName = karateNamespace.getSuperTenant().getAdminUser().getUsername()
karateTestsParams.adminPassword = karateNamespace.getSuperTenant().getAdminUser().getPassword()
karateTestsParams.threadsCount = params.THREADS_COUNT
karateTestsParams.reportPortalProjectName = 'junit5-integration'
karateTestsParams.sendSlackNotification = true
karateTestsParams.syncWithJira = true
karateTestsParams.timeout = '2'

/**
 * Pipeline
 */
ansiColor('xterm') {
  node('jenkins-agent-java17') {
    try {
//      stage('Ini') {
//        buildName ""
//        buildDescription ""
//      }

      stage('[Job] Destroy environment (before)') {
        def nsExists
        folioHelm.withKubeConfig(namespaceBaseParams.getClusterName()) {
          nsExists = kubectl.checkNamespaceExistence("${namespaceBaseParams.getNamespaceName()}")
        }
        if (nsExists) {
          _deleteJob(deleteNamespaceJobName, namespaceBaseParams)
        } else {
          logger.warning("${namespaceBaseParams.getNamespaceName()} namespace does not exists!")
        }
      }

      stage('[Job] Provision environment') {
        _createJob(createNamespaceJobName, namespaceFromBranchParams)
      }

      stage('[Flow] Execute tests') {
        folioKarateFlow(karateTestsParams)
      }

      if (params.DESTROY_AFTER) {
        stage('[Job] Destroy environment (after)') {
          _deleteJob(deleteNamespaceJobName, namespaceBaseParams)
        }
      }
    } catch (e) {
      logger.warning("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        logger.info("Workspace size: ${sh(returnStdout: true, script: 'du -sh .').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}

private def _deleteJob(String jobName, CreateNamespaceParameters namespaceParams) {
  def jobResult = build job: jobName,
    parameters: [
      string(name: 'CLUSTER', value: namespaceParams.getClusterName()),
      string(name: 'NAMESPACE', value: namespaceParams.getNamespaceName()),
      booleanParam(name: 'RW_SPLIT', value: namespaceParams.getRwSplit()),
      string(name: 'POSTGRESQL', value: namespaceParams.getPgType()),
      string(name: 'KAFKA', value: namespaceParams.getKafkaType()),
      string(name: 'OPENSEARCH', value: namespaceParams.getOpensearchType()),
      string(name: 'S3_BUCKET', value: namespaceParams.getS3Type()),
      string(name: 'AGENT', value: namespaceParams.getWorker())]
  return jobResult
}

private def _createJob(String jobName, CreateNamespaceParameters namespaceParams) {
  def jobResult = build job: jobName,
    parameters: [
      string(name: 'CLUSTER', value: namespaceParams.getClusterName()),
      string(name: 'NAMESPACE', value: namespaceParams.getNamespaceName()),
      string(name: 'FOLIO_BRANCH', value: namespaceParams.getFolioBranch()),
      string(name: 'OKAPI_VERSION', value: namespaceParams.getOkapiVersion()),
      string(name: 'CONFIG_TYPE', value: namespaceParams.getConfigType()),
      booleanParam(name: 'LOAD_REFERENCE', value: namespaceParams.getLoadReference()),
      booleanParam(name: 'LOAD_SAMPLE', value: namespaceParams.getLoadSample()),
      booleanParam(name: 'CONSORTIA', value: namespaceParams.getConsortia()),
      booleanParam(name: 'RW_SPLIT', value: namespaceParams.getRwSplit()),
      booleanParam(name: 'GREENMAIL', value: namespaceParams.getGreenmail()),
      booleanParam(name: 'MOCK_SERVER', value: namespaceParams.getMockServer()),
      booleanParam(name: 'RTR', value: namespaceParams.getRtr()),
      string(name: 'POSTGRESQL', value: namespaceParams.getPgType()),
      string(name: 'DB_VERSION', value: namespaceParams.getPgVersion()),
      string(name: 'KAFKA', value: namespaceParams.getKafkaType()),
      string(name: 'OPENSEARCH', value: namespaceParams.getOpensearchType()),
      string(name: 'S3_BUCKET', value: namespaceParams.getS3Type()),
      string(name: 'MEMBERS', value: namespaceParams.getMembers()),
      string(name: 'AGENT', value: namespaceParams.getWorker())]
  return jobResult
}
