#!groovy
package folioRancher.folioScheduledTesting.runNightlyCypressEurekaTests

import groovy.transform.Field
import org.folio.Constants
import org.folio.models.OkapiTenant
import org.folio.models.OkapiUser
import org.folio.models.RancherNamespace
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.models.parameters.CypressTestsParameters
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-1334') _

/**
 * Job properties and parameters
 */
properties([
  pipelineTriggers([cron('H 21 * * 0,2,4')]),
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    string(name: 'CYPRESS_BRANCH', defaultValue: 'eureka-test-snapshot', description: "(Required) Insert what 'stripes-testing' branch use for build"),
    folioParameters.agent(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

/**
 * Job variables
 */
Logger logger = new Logger(this, env.JOB_BASE_NAME)

@Field final String deleteNamespaceJobName = Constants.JENKINS_DELETE_NAMESPACE_JOB_EUREKA
@Field final String createNamespaceJobName = Constants.JENKINS_CREATE_NAMESPACE_FROM_BRANCH_JOB_EUREKA

final String platformCompleteBranch = 'snapshot'

CreateNamespaceParameters namespaceBaseParams = new CreateNamespaceParameters.Builder()
  .clusterName('folio-etesting')
  .namespaceName('cypress')
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .pgType('built-in')
  .pgVersion('16.1')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('')
  .worker('rancher')
  .build()

CreateNamespaceParameters namespaceFromBranchParams = namespaceBaseParams.toBuilder()
  .folioBranch(platformCompleteBranch)
  .okapiVersion('latest')
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .eureka(true)
  .rtr(false)
  .uiBuild(true)
  .build()

RancherNamespace namespace = new RancherNamespace(namespaceBaseParams.getClusterName(), namespaceBaseParams.getNamespaceName())

CypressTestsParameters cypressParameters = new CypressTestsParameters()
cypressParameters.setCiBuildId(env.JOB_BASE_NAME)
cypressParameters.setTestsSrcBranch(params.CYPRESS_BRANCH)
cypressParameters.setTenantUrl("https://${namespace.generateDomain('diku')}")
cypressParameters.setOkapiUrl("https://${namespace.getDomains().kong}")
cypressParameters.setTenant(new OkapiTenant('diku')
  .withAdminUser(new OkapiUser('diku_admin', 'admin')))
cypressParameters.setExecParameters('--env grepTags="smoke criticalPath --eurekaTemporaryECS"')
cypressParameters.setTestrailProjectID('14')
cypressParameters.setTestrailRunID('2723')
cypressParameters.setWorkerLabel('cypress')
cypressParameters.setNumberOfWorkers(12)
cypressParameters.setTimeout('480')

boolean reportPortalUse = true
String reportPortalRunType = 'evrk'

/**
 * Pipeline
 */
ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildDescription "Branch: ${params.CYPRESS_BRANCH}\nConfig: ${namespaceFromBranchParams.getConfigType()}\nEnv: ${cypressParameters.tenantUrl}"
        cleanWs()
      }

      stage('Checkout') {
        checkout scm
      }

      stage('[Job] Destroy environment') {
        def nsExists
        folioHelm.withKubeConfig(namespaceBaseParams.getClusterName()) {
          nsExists = kubectl.checkNamespaceExistence("${namespaceBaseParams.getNamespaceName()}")
        }
        if (nsExists) {
          retry(2) {
            folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceBaseParams)
          }
        } else {
          logger.warning("${namespaceBaseParams.getNamespaceName()} namespace does not exists!")
        }
      }

      stage('[Job] Provision environment') {
        try {
          folioTriggerJob.createNamespaceFromBranch(createNamespaceJobName, namespaceFromBranchParams)
        } catch (Exception new_ex) {
          slackSend(attachments: folioSlackNotificationUtils.renderFailedBuildResultMessage()
            , channel: "#rancher_tests_notifications")
          throw new Exception("Provision of the environment is failed: " + new_ex)
        }
      }

      stage('[Flow] Execute tests') {
        cypressTestsExecutionSummary = folioCypressFlow.runWrapper(cypressParameters.getCiBuildId(), reportPortalUse, reportPortalRunType) {
          folioCypressFlow.multiThreadRun(cypressParameters)
        }
      }
    } catch (e) {
      logger.warning("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        logger.debug("Workspace size: ${sh(returnStdout: true, script: 'du -sh .').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}
