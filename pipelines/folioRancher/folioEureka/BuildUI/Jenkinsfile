#!groovy
package folioRancher.folioEureka.BuildUI

import groovy.json.JsonOutput
import org.folio.Constants
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-1557') _

properties([buildDiscarder(logRotator(numToKeepStr: '30')),
            disableConcurrentBuilds(),
            parameters([folioParameters.cluster(),
                        folioParameters.namespace(),
                        folioParameters.configType(),
                        booleanParam(name: 'CONSORTIA', defaultValue: false, description: '(Optional) Set true to create consortium'),
                        string(name: 'TENANT_ID', defaultValue: '', description: 'Tenant id like fs00000000, fs00000001, and etc', trim: true),
                        booleanParam(name: 'ALL_PERMS', defaultValue: false, description: 'Whether to assign all permissions.'),
                        folioParameters.branch(),
                        folioParameters.agent(),
                        folioParameters.refreshParameters()])])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

Logger logger = new Logger(this, 'EurekaBuildUI')

ansiColor('xterm') {
  node(params.AGENT as String) {
    try {
      stage('Ini') {
        buildName "${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}"
        buildDescription "branch: ${params.FOLIO_BRANCH}\ntenantId: ${params.TENANT_ID}\nconsortia: ${params.CONSORTIA}\nallPermissions: ${params.ALL_PERMS}"
      }

      Map attributes = [hasAllPerms   : params.ALL_PERMS,
                        branch        : params.FOLIO_BRANCH,
                        config        : params.CONFIG_TYPE,
                        consortia     : params.CONSORTIA,
                        cluster       : params.CLUSTER,
                        namespace     : params.NAMESPACE,
                        tenantId      : params.TENANT_ID,
                        isSingleTenant: true,
                        kongUrl       : "https://${params.CLUSTER}-${params.NAMESPACE}-kong.${Constants.CI_ROOT_DOMAIN}",
                        keycloakUrl   : "https://${params.CLUSTER}-${params.NAMESPACE}-keycloak.${Constants.CI_ROOT_DOMAIN}",
                        tenantUrl     : "https://${params.CLUSTER}-${params.NAMESPACE}-${params.TENANT_ID}.${Constants.CI_ROOT_DOMAIN}",
                        tenantOptions : """{${params.TENANT_ID}: {name: "${params.TENANT_ID}", clientId: "${params.TENANT_ID}-application"}}"""]

      folioEurekaUI(attributes)

    } catch (e) {
      logger.warning("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        logger.debug("Workspace size: ${sh(script: 'du -sh .', returnStdout: true).trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}
