#!groovy
package folioRancher.folioEureka.BuildUI

import org.folio.Constants
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-1557') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    booleanParam(name: 'CONSORTIA', defaultValue: false, description: '(Optional) Set true to create consortium'),
    string(name: 'TENANT_ID', defaultValue: '', description: 'Tenant id like fs00000000, fs00000001, and etc', trim: true),
    booleanParam(name: 'HAS_ALL_PERMS', defaultValue: false, description: 'Whether to assign all permissions.'),
    folioParameters.branch(),
    folioParameters.agent(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

Logger logger = new Logger(this, 'EurekaBuildUI')

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}"
        buildDescription "Eureka UI Branch: ${params.FOLIO_BRANCH}"
      }

      stage('Checkout') {
        sh(script: "git clone ${Constants.FOLIO_GITHUB_URL}/platform-complete.git --branch ${params.FOLIO_BRANCH} --single-branch ${params.FOLIO_BRANCH}" as String)
      }

      stage('Build and Push') {
        dir("${params.FOLIO_BRANCH}") {
          input("Paused for review...")
        }
      }

      stage('Cleanup') {
        //common.removeImage(image.getImageName()) TODO clean fresh image.
      }

    } catch (e) {
      logger.warning("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        logger.debug("Workspace size: ${sh(returnStdout: true, script: 'du -sh .').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}
