#!groovy

import org.folio.Constants
import org.folio.models.*
import org.folio.rest.GitHubUtility
import org.folio.utilities.Tools
import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson
import org.jenkinsci.plugins.workflow.libs.Library

//TODO remove branch before merge to master
@Library('pipelines-shared-library@RANCHER-1334-Q') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
//  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    string(name: 'TENANT_ID', defaultValue: '', description: '(Required) Tenant ID for building UI'),
    folioParameters.branch(),
    folioParameters.configType(),
    folioParameters.agent(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}
ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}"
        buildDescription "Branch: ${params.FOLIO_BRANCH}\nConfig: ${params.CONFIG_TYPE}"
      }
      String folioRepository = 'application-descriptors'
      boolean releaseVersion = true
      RancherNamespace namespace = new RancherNamespace("${params.CLUSTER}", "${params.NAMEPSPACE}")
      namespace.setDefaultTenantId("${params.TENANT_ID}")
      namespace.withDeploymentConfigType('testing')
      namespace.addDeploymentConfig('RANCHER-1334-Q')
      String commitHash = common.getLastCommitHash('platform-complete', 'snapshot')
      List installJson = new GitHubUtility(this).getEnableList(folioRepository, 'master/Quesnelia')
      def eurekaPlatform = readJSON(file: new Tools(this).copyResourceFileToWorkspace('eureka/eureka-platform.json'))


      stage('Build and deploy UI') {
              def jobParameters = [eureka        : true,
                                   kongUrl       : "https://${namespace.getDomains()['kong']}",
                                   keycloakUrl   : "https://${namespace.getDomains()['keycloak']}",
                                   tenantUrl     : "https://${namespace.generateDomain("${params.TENANT_ID}")}",
                                   hasAllPerms   : true,
                                   isSingleTenant: true,
                                   tenantOptions : """{${params.TENANT_ID}: {name: "${params.TENANT_ID}", clientId: "${params.TENANT_ID}-application"}}""",
                                   tenantId      : namespace.defaultTenantId,
                                   custom_hash   : commitHash,
                                   custom_url    : "https://${namespace.getDomains()['kong']}",
                                   custom_tag    : commitHash.toString().take(7),
                                   consortia     : false,
                                   clientId      : "${params.TENANT_ID}" + "-application"]
              uiBuild(jobParameters, releaseVersion)
              folioHelm.withKubeConfig(namespace.getClusterName()) {
                folioHelm.deployFolioModule(namespace, 'ui-bundle', "${params.CLUSTER}-${params.NAMESPACE}.${params.TENANT_ID}.${commitHash.toString().take(7)}", false, "${params.TENANT_ID}")
              }
      }
    } catch (e) {
      println "Caught exception: ${e}"
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
