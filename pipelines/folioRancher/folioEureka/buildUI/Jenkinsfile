#!groovy
import org.folio.Constants
import org.folio.models.*
import org.folio.rest.GitHubUtility
import org.jenkinsci.plugins.workflow.libs.Library

//TODO remove branch before merge to master
@Library('pipelines-shared-library@RANCHER-1334') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
//  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.configType(),
    folioParameters.repository(),
    folioParameters.branch(),
    folioParameters.tenantId(),
    string(name: 'CUSTOM_HASH', defaultValue: '', description: 'Commit hash for bundle build from specific commit'),
    booleanParam(name: 'CONSORTIA', defaultValue: false, description: '(Optional) Enable Consortia'),
    folioParameters.agent(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}
ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        cleanWs()
        buildName "${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}"
        buildDescription "Branch: ${params.FOLIO_BRANCH}\nConfig: ${params.CONFIG_TYPE}"
      }

      boolean releaseVersion = false

      String commitHash = params.CUSTOM_HASH?.trim() ? params.CUSTOM_HASH
              : common.getLastCommitHash("${params.FOLIO_REPOSITORY}", "${params.FOLIO_BRANCH}")

      List installJson = new GitHubUtility(this).getEnableList("${params.FOLIO_REPOSITORY}", "${params.FOLIO_BRANCH}")
      TenantUi tenantUi = new TenantUi("${params.CLUSTER}-${params.NAMESPACE}", commitHash, "${params.FOLIO_BRANCH}")

      EurekaNamespace namespace = new EurekaNamespace("${params.CLUSTER}", "${params.NAMESPACE}")
              .withDefaultTenant("${params.TENANT_ID}")
              .withDeploymentConfigType(params.CONFIG_TYPE)

      namespace.addDeploymentConfig(folioTools.getPipelineBranch())
      namespace.getModules().setInstallJson(installJson)

      if (params.CONSORTIA)
        namespace.setEnableConsortia(true)

      OkapiTenant tenant = folioDefault.tenants()[params.TENANT_ID]
      tenant = tenant ? tenant : folioDefault.consortiaTenants(namespace.getModules().getInstallJson(), new InstallRequestParams())[params.TENANT_ID]

      namespace.addTenant(tenant
              .withInstallJson(namespace.getModules().getInstallJson().collect())
              .withTenantUi(tenantUi.clone())
      )

      stage('Build and deploy UI') {
        def jobParameters = [eureka              : true,
                             kongUrl             : "https://${params.CLUSTER}-${params.NAMESPACE}-kong.${Constants.CI_ROOT_DOMAIN}",
                             keycloakUrl         : "https://${params.CLUSTER}-${params.NAMESPACE}-keycloak.${Constants.CI_ROOT_DOMAIN}",
                             tenantUrl           : "https://${params.CLUSTER}-${params.NAMESPACE}-${params.TENANT_ID}.${Constants.CI_ROOT_DOMAIN}",
                             hasAllPerms         : false,
                             isSingleTenant      : true,
                             tenantOptions       : """{${params.TENANT_ID}: {name: "${params.TENANT_ID}", clientId: "${params.TENANT_ID}-application"}}""",
                             tenantId            : "${params.TENANT_ID}",
                             custom_hash         : commitHash,
                             custom_url          : "${params.CLUSTER}-${params.NAMESPACE}-kong.${Constants.CI_ROOT_DOMAIN}",
                             custom_tag          : tenant.getTenantUi().getTag(),
                             consortia           : params.CONSORTIA,
                             clientId            : "${params.TENANT_ID}" + "-application",
                             rancher_cluster_name: params.CLUSTER,
                             rancher_project_name: params.NAMESPACE,
                             folio_branch        : params.FOLIO_BRANCH]

        uiBuild(jobParameters, releaseVersion)

        folioHelm.withKubeConfig(params.CLUSTER) {
          folioHelm.deployFolioModule(
                  namespace
                  , 'ui-bundle'
                  , "${params.CLUSTER}-${params.NAMESPACE}.${params.TENANT_ID}.${commitHash.toString().take(7)}"
                  , false
                  , "${params.TENANT_ID}"
          )
        }
      }
    } catch (e) {
      println "Caught exception: ${e}"
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
