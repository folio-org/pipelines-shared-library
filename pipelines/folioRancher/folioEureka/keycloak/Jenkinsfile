#!groovy
package folioRancher.folioEureka.keycloak

import org.folio.Constants
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-1334') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.agent(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

Logger logger = new Logger(this, env.JOB_BASE_NAME)

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "folioEureka-keycloak-${env.BUILD_ID}"
        buildDescription "image build"
      }
      stage('Checkout') {
        dir("folio-keycloak") {
          checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/folio-org/folio-keycloak.git']]])
        }
      }

      stage("Build and Push") {
        logger.info("Build started for keycloak image...")
        dir("folio-keycloak") {
          docker.withRegistry("https://${Constants.ECR_FOLIO_REPOSITORY}", "ecr:${Constants.AWS_REGION}:${Constants.ECR_FOLIO_REPOSITORY_CREDENTIALS_ID}") {
            def image = docker.build(
              "keycloak",
              "-f ./Dockerfile  " +
                "."
            )
            image.push()
          }
        }
      }

    } catch (e) {
      println("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        println("Workspace size: ${sh(returnStdout: true, script: 'du -sh .').trim()}")
        common.removeImage("keycloak")
        cleanWs notFailBuild: true
      }
    }
  }
}
