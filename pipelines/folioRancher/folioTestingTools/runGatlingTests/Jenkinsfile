#!groovy

import hudson.util.Secret
import org.folio.models.parameters.KarateTestsParameters
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-650-Jenkins-upgrade') _

/**
 * Job properties and parameters
 */
properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.branch('TESTS_BRANCH', 'folio-integration-tests'),
    string(name: 'MODULES_TO_TEST', defaultValue: '', description: 'Comma separated modules list to test (no spaces).\nLeave empty to launch all.'),
    string(name: 'OKAPI_URL', defaultValue: 'https://folio-testing-karate-okapi.ci.folio.org', description: 'Target environment OKAPI URL'),
    string(name: 'EDGE_URL', defaultValue: 'https://folio-testing-karate-edge.ci.folio.org', description: 'Target environment EDGE URL'),
    string(name: 'SUPER_TENANT', defaultValue: 'supertenant', description: 'Supertenant for test tenants creation flow'),
    string(name: 'SUPER_ADMIN_USERNAME', defaultValue: 'super_admin', description: 'Super admin username'),
    password(name: 'SUPER_ADMIN_PASSWORD', defaultValueAsSecret: Secret.fromString('admin'), description: 'Super admin user password'),
    string(name: 'PROTOTYPE_TENANT', defaultValue: 'diku', description: 'Tenant name that will be used by tests as a prototype during test tenants creation'),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

/**
 * Job variables
 */
KarateTestsParameters karateTestsParams = new KarateTestsParameters()
karateTestsParams.gitBranch = params.TESTS_BRANCH
karateTestsParams.modulesToTest = params.MODULES_TO_TEST
karateTestsParams.okapiUrl = params.OKAPI_URL
karateTestsParams.edgeUrl = params.EDGE_URL
karateTestsParams.tenant = params.SUPER_TENANT
karateTestsParams.adminUserName = params.SUPER_ADMIN_USERNAME
karateTestsParams.adminPassword = params.SUPER_ADMIN_PASSWORD
karateTestsParams.prototypeTenant = params.PROTOTYPE_TENANT
karateTestsParams.timeout = '1'

/**
 * Pipeline
 */
ansiColor('xterm') {
  folioGatlingFlow.call(karateTestsParams)
}
