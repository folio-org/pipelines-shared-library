#!groovy
import groovy.transform.Field
import org.folio.Constants
import org.folio.jenkins.PodTemplates
import org.folio.models.RancherNamespace
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.rest_v2.Constants as RestConstants
import org.folio.rest_v2.PlatformType
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@karate-tmp') _

/**
 * Job properties and parameters
 */
properties([
  buildDiscarder(logRotator(numToKeepStr: '10')),
  disableConcurrentBuilds(),
  parameters([
    string(name: 'DB_SNAPSHOT_NAME', defaultValue: Constants.DATA_MIGRATION_SNAPSHOT_NAME, description: "BF RDS snapshot name"),
    booleanParam(name: 'DESTROY_AFTER', defaultValue: false, description: '(Optional) Set to false to not destroy namespace after tests execution'),
    booleanParam(name: 'RETRY_FAILED', defaultValue: false, description: '(Optional) Set to true to retry data-migration'),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

/**
 * Job variables
 */
PodTemplates podTemplates = new PodTemplates(this)
Logger logger = new Logger(this, env.JOB_BASE_NAME)

@Field final String deleteNamespaceJobName = Constants.JENKINS_DELETE_NAMESPACE_JOB

String okapiVersion = folioTools.eval(folioStringScripts.getOkapiVersions(), ['FOLIO_BRANCH': 'snapshot'])[0]

CreateNamespaceParameters namespaceParams = new CreateNamespaceParameters.Builder()
  .platform(PlatformType.EUREKA)
  .clusterName('folio-eperf')
  .namespaceName('data-migration')
  .folioBranch('snapshot')
  .okapiVersion(okapiVersion)
  .configType('performance')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .splitFiles(true)
  .ecsCCL(true)
  .rwSplit(false)
  .linkedData(true)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .applicationSet('Complete')
  .applications(RestConstants.APPLICATION_BRANCH('Complete'))
  .hasSecureTenant(true)
  .secureTenantId(folioDefault.consortiaTenants().get('university').getTenantId())
  .pgType('aws')
  .pgVersion('16.6')
  .dmSnapshot(params.DB_SNAPSHOT_NAME.trim())
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .runSanityCheck(false)
  .members('folijet,spitfire,thunderjet,vega,firebird')
  .uiBuild(false)
  .build()

namespaceParams.folioExtensions.add('consortia-eureka')
namespaceParams.folioExtensions.add('linked-data')

RancherNamespace namespace = new RancherNamespace(namespaceParams.getClusterName(), namespaceParams.getNamespaceName())
namespace.withSuperTenantAdminUser()

/**
 * Pipeline
 */
ansiColor('xterm') {
  podTemplates.rancherAgent {
    try {
      stage('Ini') {
        buildDescription "Destroy after: ${params.DESTROY_AFTER}\nRetry failed: ${params.RETRY_FAILED}"
        cleanWs()
      }

      stage('Checkout') {
        checkout scm
      }

      stage('[Job] Destroy environment (before)') {
        params.RETRY_FAILED ? println('RETRY data-migration performance | Skip destroy stage') : folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceParams)
      }

      stage('[Job] Provision environment') {
        params.RETRY_FAILED ? println('RETRY data-migration performance | Skip provision stage') : dataMigrationReport(namespaceParams)
      }

      if (params.DESTROY_AFTER) {
        stage('[Job] Destroy environment (after)') {
          folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceParams)
        }
      }

    } catch (e) {
      logger.warning("Caught exception: ${e}")

      stage('[Job] Destroy environment (error)') {
        params.RETRY_FAILED ? null : folioTriggerJob.deleteNamespace(deleteNamespaceJobName, namespaceParams)
        // Always destroy namespace on error
      }

      error(e.getMessage())
    }
  }
}
