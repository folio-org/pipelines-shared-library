import groovy.transform.Field
import org.folio.models.InstallRequestParams
import org.folio.models.OkapiTenant
import org.folio.models.OkapiUser
import org.folio.models.RancherNamespace
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.rest.GitHubUtility
import org.folio.rest_v2.Main
import org.folio.utilities.Logger

import java.time.LocalDateTime

@Library('pipelines-shared-library') _

properties([buildDiscarder(logRotator(numToKeepStr: '20')),
            disableConcurrentBuilds(),
            parameters([folioParameters.repository(),
                        folioParameters.branch('FOLIO_BRANCH_SRC', params.FOLIO_REPOSITORY),
                        folioParameters.branch('FOLIO_BRANCH_DST', params.FOLIO_REPOSITORY),
                        string(name: 'RDS_SNAPSHOT_NAME', defaultValue: '', description: '(Optional) RDS snapshot name. If empty create env from scratch', trim: true),
                        string(name: 'SLACK_CHANNEL', defaultValue: '', description: '(Optional) Slack channel name where send report (without #)', trim: true),
                        folioParameters.agent(),
                        folioParameters.refreshParameters()])])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

/**
 * Job variables*/
Logger logger = new Logger(this, env.JOB_BASE_NAME)

@Field final String createNamespaceFromRdsSnapshotJobPath =
  '/folioRancher/folioNamespaceTools/createNamespaceFromRdsSnapshot'
@Field final String createNamespaceFromBranchJobPath = '/folioRancher/folioNamespaceTools/createNamespaceFromBranch-R1-2024'
@Field final String deleteNamespaceJobPath = '/folioRancher/folioNamespaceTools/deleteNamespace'
@Field final String installModulesFromJsonJobPath = '/folioRancher/folioDevTools/moduleDeployment/installModulesFromJson'
@Field final String configType = 'testing'

String dbSnapshotName = params.RDS_SNAPSHOT_NAME
String folioSrcBranch = params.FOLIO_BRANCH_SRC
String okapiVersion = folioTools.eval(folioStringScripts.getOkapiVersions(), ['FOLIO_BRANCH': params.FOLIO_BRANCH_SRC])[0]
LocalDateTime migrationStart
int totalTimeMs = 0
Map modulesLongMigrationTimeSlack = [:]
List modulesMigrationFailedSlack = []
List srcInstallJson = new GitHubUtility(this).getEnableList(params.FOLIO_REPOSITORY, params.FOLIO_BRANCH_SRC)
List dstInstallJson = new GitHubUtility(this).getEnableList(params.FOLIO_REPOSITORY, params.FOLIO_BRANCH_DST)
/**
 * TODO workaround for migration from R1-2024 DB Snapshot
 */
boolean hasModConsortiaId = dstInstallJson.any { it.id.startsWith('mod-consortia') }
if (!hasModConsortiaId && params.RDS_SNAPSHOT_NAME) {
  dstInstallJson.addAll([["id": "mod-consortia-1.3.0-SNAPSHOT.148", "action": "enable"],
                         ["id": "folio_consortia-settings-2.0.1090000001261", "action": "enable"]])
}


RancherNamespace namespace = new RancherNamespace('folio-perf', 'data-migration')
  .withSuperTenantAdminUser()

OkapiTenant tenant = setupTenant(dbSnapshotName)
tenant.setInstallRequestParams(new InstallRequestParams())

Main main = new Main(this, namespace.generateDomain('okapi'), namespace.getSuperTenant())

String pgAdminUrl = "https://${namespace.getClusterName()}-${namespace.getNamespaceName()}-pgadmin.ci.folio.org/"

CreateNamespaceParameters jobParams = new CreateNamespaceParameters.Builder()
  .clusterName(namespace.getClusterName())
  .namespaceName(namespace.getNamespaceName())
  .folioBranch(folioSrcBranch)
  .okapiVersion(okapiVersion)
  .configType(configType)
  .splitFiles(false)
  .rwSplit(false)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .pgVersion('16.1')
  .kafkaType('aws')
  .opensearchType('aws')
  .s3Type('built-in')
  .runSanityCheck(false)
  .members('')
  .worker(params.AGENT)
  .build()

if (params.RDS_SNAPSHOT_NAME) {
  jobParams.setPgType('aws')
} else {
  jobParams.setPgType('built-in')
  jobParams.setLoadReference(true)
  jobParams.setLoadSample(true)
  jobParams.setConsortia(false)
}

logger.info("LOCALTIME: ${LocalDateTime.now()}")

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        setBuildDetails(tenant, dbSnapshotName)
      }
      stage('Restoring namespace from RDS snapshot') {
        if (params.RDS_SNAPSHOT_NAME) {
          build job: createNamespaceFromRdsSnapshotJobPath,
            parameters: [
              string(name: 'CLUSTER', value: jobParams.getClusterName()),
              string(name: 'NAMESPACE', value: jobParams.getNamespaceName()),
              string(name: 'CONFIG_TYPE', value: jobParams.getConfigType()),
              string(name: 'RDS_SNAPSHOT_NAME', value: dbSnapshotName),
              booleanParam(name: 'CONSORTIA', value: jobParams.getConsortia()),
              booleanParam(name: 'RW_SPLIT', value: jobParams.getRwSplit()),
              string(name: 'UI_TENANTS_IDS', value: tenant.getTenantId()),
              string(name: 'KAFKA', value: jobParams.getKafkaType()),
              string(name: 'OPENSEARCH', value: jobParams.getOpensearchType()),
              string(name: 'S3_BUCKET', value: jobParams.getS3Type()),
              booleanParam(name: 'NAMESPACE_ONLY', value: false),
              string(name: 'AGENT', value: jobParams.getWorker()),
              booleanParam(name: 'REFRESH_PARAMETERS', value: false)]
        }
      }

      stage('Creating an environment from scratch') {
        if (!params.RDS_SNAPSHOT_NAME) {
          folioTriggerJob.createNamespaceFromBranch(createNamespaceFromBranchJobPath, jobParams)
        }
      }


      stage('Updating to the desired modules version') {
        /**
         * TODO Workaround for renaming of mod-ldp
         */
        if (params.FOLIO_BRANCH_SRC == 'R1-2024' && params.FOLIO_BRANCH_DST == 'snapshot') {
          List ldpDisable = [["id": "mod-ldp", "action": "disable"], ["id": "folio_ldp", "action": "disable"]]
          try {
            main.tenantInstall(tenant, ldpDisable)
          } catch (e) {
            logger.warning(e.getMessage())
          }
        }
        migrationStart = LocalDateTime.now()
        logger.info(migrationStart)
        build job: installModulesFromJsonJobPath,
          parameters: [
            string(name: 'CLUSTER', value: jobParams.getClusterName()),
            string(name: 'NAMESPACE', value: jobParams.getNamespaceName()),
            string(name: 'TENANTS_LIST', value: tenant.getTenantId()),
            string(name: 'CONFIG_TYPE', value: jobParams.getConfigType()),
            text(name: 'INSTALL_JSON', value: writeJSON(returnText: true, json: dstInstallJson)),
            booleanParam(name: 'LOAD_REFERENCE', value: false),
            booleanParam(name: 'LOAD_SAMPLE', value: false),
            booleanParam(name: 'SIMULATE', value: false),
            booleanParam(name: 'REINSTALL', value: false),
            string(name: 'AGENT', value: jobParams.getWorker()),
            booleanParam(name: 'REFRESH_PARAMETERS', value: false)]
      }

      stage('Generating Data Migration Time report') {
        List result = folioexecuteDataMigrationUtils.getMigrationTime(jobParams.getClusterName(),
          jobParams.getNamespaceName(), srcInstallJson, dstInstallJson, migrationStart)

        totalTimeMs += result[0]
        modulesLongMigrationTimeSlack += result[1]
        modulesMigrationFailedSlack += result[2]
      }

      stage('Publish HTML Reports') {
        publishHTML([
          reportDir            : 'reportTime',
          reportFiles          : '*.html',
          reportName           : 'Data Migration Time',
          allowMissing         : true,
          alwaysLinkToLastBuild: true,
          keepAll              : true])
      }

      stage('Send Slack notification') {
        if (params.SLACK_CHANNEL) {
          folioexecuteDataMigrationUtils.sendSlackNotification("#${params.SLACK_CHANNEL}", totalTimeMs,
            modulesLongMigrationTimeSlack, modulesMigrationFailedSlack)
        }
      }

      timeout(time: 120, unit: 'MINUTES') {
        input 'Paused for results check'
      }
    } catch (e) {
      currentBuild.result = 'FAILURE'
      logger.error(e.getMessage())
    } finally {
      stage('Destroy namespace') {
        folioTriggerJob.deleteNamespace(deleteNamespaceJobPath, jobParams)
      }

      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}

@SuppressWarnings('GrMethodMayBeStatic')
// Helper method to initialize the tenant based on the snapshot name
private OkapiTenant setupTenant(String snapshotName) {
  if (snapshotName) {
    return new OkapiTenant('fs09000000')
      .withAdminUser(new OkapiUser('folio', 'folio'))
  } else {
    return new OkapiTenant('diku').withAdminUser(new OkapiUser('diku_admin', 'admin'))
  }
}

// Helper method to set the build details
private void setBuildDetails(OkapiTenant tenant, String snapshotName) {
  if (snapshotName) {
    buildName "#from-db-snapshot.${env.BUILD_ID}"
    buildDescription "Tenant: ${tenant.getTenantId()}\nDB snapshot: ${snapshotName}"
  } else {
    buildName "#from-scratch.${env.BUILD_ID}"
    buildDescription "Tenant: ${tenant.getTenantId()}"
  }
}
