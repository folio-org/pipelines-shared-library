@Library('pipelines-shared-library@RANCHER-1248') _

import org.jenkinsci.plugins.workflow.libs.Library
import org.folio.rest.model.DataMigrationTenant
import java.time.*
import org.folio.rest.GitHubUtility
import org.folio.Constants
import groovy.json.JsonSlurperClassic
import org.folio.utilities.Tools
import org.jenkinsci.plugins.workflow.libs.Library

properties([
    buildDiscarder(logRotator(numToKeepStr: '20')),
    disableConcurrentBuilds(),
    parameters([
        folioParameters.repository(),
        folioParameters.branch( 'FOLIO_BRANCH_SRC',params.FOLIO_REPOSITORY),
        folioParameters.branch('FOLIO_BRANCH_DST', params.FOLIO_REPOSITORY),
        string(name: 'RDS_SNAPSHOT_NAME', defaultValue: '', description: '(Optional) RDS snapshot name. If empty create env from scratch', trim: true),
        string(name: 'SLACK_CHANNEL', defaultValue: '', description: '(Optional) Slack channel name where send report (without #)', trim: true),
        folioParameters.agent(),
        folioParameters.refreshParameters()
        ])
      ])


def clusterName = 'folio-perf'
def projectName = 'data-migration'
def configType = 'performance'
def snapshotName = params.RDS_SNAPSHOT_NAME
def spinUpEnvironmentJobName = "/folioRancher/folioNamespaceTools/createNamespaceFromRdsSnapshot"
def destroyEnvironmentJobName = "/folioRancher/folioNamespaceTools/deleteNamespace"
def tenantId
def adminUsername
def adminPassword
def startMigrationTime = LocalDateTime.now()
Integer totalTimeInMs = 0
LinkedHashMap modulesLongMigrationTimeSlack = [:]
List modulesMigrationFailedSlack = []
def resultMap = [:]
String okapiVersion = folioTools.eval(folioStringScripts.getOkapiVersions(), ['FOLIO_BRANCH': params.FOLIO_BRANCH_SRC])[0]
def srcInstallJson = new GitHubUtility(this).getEnableList(params.FOLIO_REPOSITORY, params.FOLIO_BRANCH_SRC)
def dstInstallJson = new GitHubUtility(this).getEnableList(params.FOLIO_REPOSITORY, params.FOLIO_BRANCH_DST)
def pgadminURL = "https://${clusterName}-${projectName}-pgadmin.ci.folio.org/"

ansiColor('xterm') {
  if (params.REFRESH_PARAMETERS) {
    currentBuild.result = 'ABORTED'
    error('PARAMETERS REFRESHED!')
  }
    node(params.AGENT) {
        try {
            stage('Init') {
                currentBuild.result = 'SUCCESS'
                if (params.RDS_SNAPSHOT_NAME) {
                    tenantId = 'fs09000000'
                    adminUsername = 'folio'
                    adminPassword = 'folio'
                    buildName tenantId + '-' + params.RDS_SNAPSHOT_NAME + '.' + env.BUILD_ID
                } else {
                    tenantId = 'diku'
                    adminUsername = 'diku'
                    adminPassword = 'diku_admin'
                    buildName tenantId + '.' + 'without-restore' + '.' + env.BUILD_ID
                }
            }

            stage('Restore namespace from RDS snapshot') {
              if (params.RDS_SNAPSHOT_NAME) {
                def jobParameters = getEnvironmentJobParameters(
                  clusterName: clusterName,
                  projectName: projectName,
                  configType: configType,
                  snapshotName: params.RDS_SNAPSHOT_NAME,
                  agent: tenantId)

                spinUpEnvironmentJob = build job: spinUpEnvironmentJobName, parameters: jobParameters, wait: true, propagate: false
              }
            }

            // stage('Create data-migration project') {
            //   if (!params.RDS_SNAPSHOT_NAME) {
            //     def jobParameters = getEnvironmentJobParameters(
            //       'apply',
            //       clusterName,
            //       projectName,
            //       params.FOLIO_REPOSITORY,
            //       params.FOLIO_BRANCH_SRC,
            //       okapiVersion,
            //       tenantId,
            //       adminUsername,
            //       adminPassword,
            //       params.RDS_SNAPSHOT_NAME,
            //       false,
            //       true,
            //       true,
            //       true)

            //     build job: Constants.JENKINS_JOB_PROJECT, parameters: jobParameters, wait: true, propagate: false
            //   }
            // }

            // stage('Update with dst release versions') {
            //     build job: Constants.JENKINS_JOB_BACKEND_MODULES_DEPLOY_BRANCH,
            //         parameters: [
            //             string(name: 'folio_repository', value: params.FOLIO_REPOSITORY),
            //             string(name: 'folio_branch', value: params.FOLIO_BRANCH_DST),
            //             string(name: 'rancher_cluster_name', value: clusterName),
            //             string(name: 'rancher_project_name', value: projectName),
            //             string(name: 'config_type', value: configType),
            //             string(name: 'tenant_id', value: tenantId),
            //             string(name: 'admin_username', value: adminUsername),
            //             string(name: 'admin_password', value: adminPassword)
            //         ]
            // }

            // stage('Generate Data Migration Time report') {
            //     def result = folioexecuteDataMigrationUtils.getMigrationTime(
            //         clusterName,
            //         projectName,
            //         resultMap,
            //         srcInstallJson,
            //         dstInstallJson,
            //         totalTimeInMs,
            //         modulesLongMigrationTimeSlack,
            //         modulesMigrationFailedSlack,
            //         startMigrationTime,
            //         pgadminURL
            //     )
            //   totalTimeInMs += result[0]
            //   modulesLongMigrationTimeSlack += result[1]
            //   modulesMigrationFailedSlack += result[2]
            // }

        } catch (exception) {
            currentBuild.result = 'FAILURE'
            error(exception.getMessage())
        }
        // finally {
            // stage('Publish HTML Reports') {
            //     publishHTML([
            //         reportDir: 'reportTime',
            //         reportFiles: '*.html',
            //         reportName: 'Data Migration Time',
            //         allowMissing: true,
            //         alwaysLinkToLastBuild: true,
            //         keepAll: true])
            // }

        //    stage('Send Slack notification') {
        //        folioexecuteDataMigrationUtils.sendSlackNotification("#${params.SLACK_CHANNEL}",totalTimeInMs, modulesLongMigrationTimeSlack, modulesMigrationFailedSlack)
        //    }

          // stage('Destroy data-migration project') {
          //   def jobParameters = getEnvironmentJobParameters(
          //     'destroy',
          //     clusterName,
          //     projectName,
          //     params.FOLIO_REPOSITORY,
          //     params.FOLIO_BRANCH_SRC,
          //     okapiVersion,
          //     tenantId,
          //     adminUsername,
          //     adminPassword,
          //     params.RDS_SNAPSHOT_NAME)

          //   build job: Constants.JENKINS_JOB_PROJECT, parameters: jobParameters, wait: true, propagate: false
          // }

            // stage('Cleanup') {
            //     cleanWs notFailBuild: true
            // }
        // }
    }
}

private List getEnvironmentJobParameters(String clusterName, String projectName, String configType, String snapshotName, String agent) {
  [string(name: 'CLUSTER', value: clusterName),
   string(name: 'NAMESPACE', value: projectName),
   string(name: 'CONFIG_TYPE', value: configType),
   string(name: 'RDS_SNAPSHOT_NAME', value: snapshotName),
   string(name: 'UI_TENANTS_IDS', 'fs09000000'),
   string(name: 'AGENT', value: agent),
   booleanParam(name: 'CONSORTIA', value: false),
   booleanParam(name: 'RW_SPLIT', value: false),
   string(name: 'POSTGRESQL', value: 'aws'),
   string(name: 'KAFKA', value: 'built-in'),
   string(name: 'OPENSEARCH', value: 'aws'),
   string(name: 'S3_BUCKET', value: 'built-in'),
   booleanParam(name: 'NAMESPACE_ONLY', value: false),
   booleanParam(name: 'REFRESH_PARAMETERS', value: false)]
}

private List getDestroyEnvironmentJobParameters(clusterName, projectName) {
  [string(name: 'CLUSTER', value: clusterName),
   string(name: 'NAMESPACE', value: projectName),
   booleanParam(name: 'RW_SPLIT', value: false),
   string(name: 'POSTGRESQL', value: 'built-in'),
   string(name: 'KAFKA', value: 'built-in'),
   string(name: 'OPENSEARCH', value: 'built-in'),
   string(name: 'S3_BUCKET', value: 'built-in'),
   string(name: 'AGENT', value: 'jenkins-agent-java17'),
   booleanParam(name: 'REFRESH_PARAMETERS', value: false)]
}

// private List getEnvironmentJobParameters(String action,
//                                          String clusterName,
//                                          String projectName,
//                                          String folioRepository,
//                                          String folioBranch,
//                                          String okapiVersion,
//                                          String tenantId,
//                                          String adminUsername,
//                                          String adminPassword,
//                                          String backupName,
//                                          boolean restoreFromBackup = false,
//                                          boolean loadReference = false,
//                                          boolean loadSample = false,
//                                          boolean pgEmbedded = false,
//                                          boolean kafkaShared = true,
//                                          boolean opensearchShared = true,
//                                          boolean s3Embedded = false) {
//   [
//     string(name: 'action', value: action),
//     string(name: 'rancher_cluster_name', value: clusterName),
//     string(name: 'rancher_project_name', value: projectName),
//     string(name: 'folio_repository', value: folioRepository),
//     string(name: 'folio_branch', value: folioBranch),
//     string(name: 'okapi_version', value: okapiVersion),
//     string(name: 'config_type', value: 'performance'),
//     string(name: 'tenant_id', value: tenantId),
//     string(name: 'admin_username', value: adminUsername),
//     string(name: 'admin_password', value: adminPassword),
//     string(name: 'backup_type', value: 'rds'),
//     string(name: 'RDS_SNAPSHOT_NAME', value: backupName),
//     booleanParam(name: 'restore_from_backup', value: restoreFromBackup),
//     booleanParam(name: 'load_reference', value: loadReference),
//     booleanParam(name: 'load_sample', value: loadSample),
//     booleanParam(name: 'pg_embedded', value: pgEmbedded),
//     booleanParam(name: 'kafka_shared', value: kafkaShared),
//     booleanParam(name: 'opensearch_shared', value: opensearchShared),
//     booleanParam(name: 's3_embedded', value: s3Embedded)
//   ]
// }
