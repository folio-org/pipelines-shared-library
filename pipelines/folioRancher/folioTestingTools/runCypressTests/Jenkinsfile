#!groovy
import hudson.util.Secret
import org.folio.jenkins.JenkinsAgentLabel
import org.folio.jenkins.PodTemplates
import org.folio.models.OkapiTenant
import org.folio.models.OkapiUser
import org.folio.models.parameters.CypressTestsParameters

@Library('pipelines-shared-library@RANCHER-2236') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '50')),
  throttleJobProperty(categories: [], limitOneJobWithMatchingParams: true, maxConcurrentPerNode: 0,
    maxConcurrentTotal: 3, paramsToUseForLimit: '', throttleEnabled: true, throttleOption: 'project'),
  parameters([
    folioParameters.branch('CYPRESS_BRANCH', 'stripes-testing'),
    string(name: 'TENANT_URL', defaultValue: "https://folio-testing-cypress-diku.ci.folio.org", description: 'Target environment tenant UI URL', trim: true),
    string(name: 'OKAPI_URL', defaultValue: "https://folio-testing-cypress-okapi.ci.folio.org", description: 'Target environment OKAPI URL', trim: true),
    string(name: 'TENANT_ID', defaultValue: "diku", description: 'Tenant ID', trim: true),
    string(name: 'ADMIN_USERNAME', defaultValue: "diku_admin", description: 'Tenant admin username', trim: true),
    password(name: 'ADMIN_PASSWORD', defaultValueAsSecret: Secret.fromString('admin'), description: 'Tenant admin password'),
    string(name: 'EXEC_PARAMETERS', defaultValue: "", description: 'Cypress execution parameters.\nExample --env grepTags="extendedPath --nonParallel"', trim: true),
    choice(name: 'NUMBER_OF_WORKERS', description: "Numbers of parallel cypress workers, if single thread run leave 1", choices: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
    string(name: 'TIMEOUT', defaultValue: "240", description: '(MINUTES) Timeout for tests execution', trim: true),
    string(name: 'CUSTOM_BUILD_NAME', defaultValue: "", description: 'Custom name for build', trim: true),
    string(name: 'TESTRAIL_PROJECTID', defaultValue: "", description: 'To enable TestRail integration, enter ProjectID from TestRail, ex. 22', trim: true),
    string(name: 'TESTRAIL_RUN_ID', defaultValue: "", description: 'To enable TestRail integration, enter RunID from TestRail, ex. 2048', trim: true),
    booleanParam(name: 'REPORT_PORTAL_USE', defaultValue: false, description: 'Set to true, to send tests results to Report Portal'),
    choice(name: 'REPORT_PORTAL_RUN_TYPE', choices: ["day", "night", "week", "evrk"], description: 'Parameter for Report portal filtering'),
    folioParameters.runSanityCheck(),
    folioParameters.refreshParameters()])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

String ciBuildId = params.CUSTOM_BUILD_NAME?.trim() ? params.CUSTOM_BUILD_NAME : env.JOB_BASE_NAME
boolean reportPortalUse = params.REPORT_PORTAL_USE
String reportPortalRunType = params.REPORT_PORTAL_RUN_TYPE

CypressTestsParameters cypressParameters = new CypressTestsParameters()
cypressParameters.setCiBuildId(ciBuildId)
cypressParameters.setTestsSrcBranch(params.CYPRESS_BRANCH)
cypressParameters.setTenantUrl(params.TENANT_URL)
cypressParameters.setOkapiUrl(params.OKAPI_URL)
cypressParameters.setTenant(new OkapiTenant(params.TENANT_ID)
  .withAdminUser(new OkapiUser(params.ADMIN_USERNAME, params.ADMIN_PASSWORD)))
cypressParameters.setExecParameters(params.EXEC_PARAMETERS)
cypressParameters.setTestrailProjectID(params.TESTRAIL_PROJECTID)
cypressParameters.setTestrailRunID(params.TESTRAIL_RUN_ID)
cypressParameters.setNumberOfWorkers(params.NUMBER_OF_WORKERS.toInteger())
cypressParameters.setTimeout(params.TIMEOUT)

ansiColor('xterm') {
  PodTemplates podTemplates = new PodTemplates(this)

  podTemplates.defaultTemplate {
    node(JenkinsAgentLabel.DEFAULT_AGENT.getLabel()) {
      stage('Ini') {
        buildName "#${cypressParameters.getCiBuildId()}.${env.BUILD_ID}"
        buildDescription "Branch: ${cypressParameters.testsSrcBranch}\nEnv: ${cypressParameters.tenantUrl}"
      }
    }
  }

//      stage('[Conditional check]') {
//        // Get current time and date
//        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"))
//        Integer dayOfWeek = cal.get(Calendar.DAY_OF_WEEK)
//        Integer hourOfDay = cal.get(Calendar.HOUR_OF_DAY)
//
//        // Check if current time falls within restricted execution times
//        if (isLimitReached(dayOfWeek, hourOfDay, params.NUMBER_OF_WORKERS)) {
//          echo "Pipeline execution has been stopped. Please start the pipeline from 1 AM to 6 AM UTC or from " +
//            "Friday 6 PM UTC to Sunday 6 PM UTC. Otherwise, reduce the number of workers to 4 and try again."
//          echo "Current time: ${hourOfDay}"
//          echo "Number of workers: ${params.NUMBER_OF_WORKERS}"
//
//          currentBuild.result = 'ABORTED'
//          error("Not a proper condition.")
//        }
//      }

  stage('[Flow] Execute tests') {
    List<CypressTestsParameters> testsToRun = [cypressParameters]

    // Add a separate run for the sanity check
    if (params.RUN_SANITY_CHECK) {
      CypressTestsParameters cypressSanityParameters = cypressParameters.clone()
      cypressSanityParameters.setExecParameters('--env grepTags="fse+sanity"')
      cypressSanityParameters.setNumberOfWorkers(4)
      cypressSanityParameters.setTimeout('60')
      testsToRun.add(cypressSanityParameters)
    }
    // Execute the Cypress test flow
    folioCypressFlow.call(ciBuildId, testsToRun, false, reportPortalUse, reportPortalRunType)
  }
}


/**
 * Determines if the execution limit has been reached based on the current day, time, and number of workers.
 *
 * @param dayOfWeek The current day of the week (1=Sunday, 2=Monday, ..., 7=Saturday).
 * @param hourOfDay The current hour of the day (0-23).
 * @param numberOfWorkers The number of workers currently specified.
 * @return True if execution limit is reached; false otherwise.
 */
@SuppressWarnings('GrMethodMayBeStatic')
boolean isLimitReached(Integer dayOfWeek, Integer hourOfDay, String numberOfWorkers) {
  int workers = numberOfWorkers.toInteger()

  boolean isFri18ToSun18 = dayOfWeek == Calendar.SATURDAY ||
    (dayOfWeek == Calendar.SUNDAY && hourOfDay < 18) || (dayOfWeek == Calendar.FRIDAY && hourOfDay >= 18)

  boolean isRestOfWeek6To24 = !isFri18ToSun18 && hourOfDay >= 6

  return (isRestOfWeek6To24 && workers > 4) || (isFri18ToSun18 && workers > 8)
}
