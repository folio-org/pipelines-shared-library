#!groovy
import org.folio.models.ChangelogEntry
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.models.parameters.KarateTestsParameters
import org.folio.rest_v2.Constants
import org.folio.slack.SlackHelper
import org.folio.testing.TestType
import org.folio.testing.cypress.results.CypressRunExecutionSummary
import org.folio.testing.karate.results.KarateRunExecutionSummary
import org.folio.utilities.Logger

@Library('pipelines-shared-library') _

properties([
  pipelineTriggers([cron('H 6,9,12,15,18,21 * * 1-5')]),
  buildDiscarder(logRotator(numToKeepStr: '40')),
  disableConcurrentBuilds(),
  parameters([
    string(name: 'FOLIO_BRANCH', defaultValue: 'snapshot', description: 'platform-complete branch where will be run quality CI job'),
    booleanParam(name: 'SKIP_CHECK', defaultValue: false, description: 'Skip check of changes since last build.'),
    folioParameters.agent(),
    folioParameters.refreshParameters()])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

Logger logger = new Logger(this, env.JOB_BASE_NAME)

boolean autoCanceled = false
String currentBuildSha
String previousBuildSha
CypressRunExecutionSummary cypressTestsExecutionSummary
KarateRunExecutionSummary karateTestsExecutionSummary

String createNamespaceFromBranchJob = '/folioRancher/folioNamespaceTools/createNamespaceFromBranch'
String deleteNamespaceJob = '/folioRancher/folioNamespaceTools/deleteNamespace'
String globalSlackChannel = '#rancher_tests_notifications'
String okapiVersion = folioTools.eval(folioStringScripts.getOkapiVersions(), ['FOLIO_BRANCH': params.FOLIO_BRANCH])[0]

Map envsMap = [
  karate : [cluster: 'folio-testing', namespace: 'cikarate'],
  cypress: [cluster: 'folio-testing', namespace: 'cicypress'],
//  schema : [cluster: 'folio-tmp', namespace: 'cischema']
]

CreateNamespaceParameters namespaceBaseParams = new CreateNamespaceParameters.Builder()
  .rwSplit(false)
  .greenmail(false)
  .mockServer(true)
  .pgType('built-in')
  .pgVersion('13.13')
  .kafkaType('built-in')
  .opensearchType('built-in')
  .s3Type('built-in')
  .members('')
  .worker(params.AGENT)
  .build()

CreateNamespaceParameters namespaceFromBranchParams = namespaceBaseParams.toBuilder()
  .folioBranch(params.FOLIO_BRANCH)
  .okapiVersion(okapiVersion)
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .rtr(false)
  .build()

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "#${env.BUILD_ID}"
        buildDescription "Quality Gates:\nKarate\nCypress\nSchema compare"
      }

      stage('Check Changes') {
        if (params.SKIP_CHECK) {
          logger.info("Skip check of changes since last build.")
        } else {
          currentBuildSha = folioHashCommitCheck.getCurrentBuildSha(params.FOLIO_BRANCH)
          previousBuildSha = folioHashCommitCheck.getPreviousBuildSha()
          boolean diffFound = folioHashCommitCheck.isInstallJsonChanged(previousBuildSha, currentBuildSha)

          if (diffFound) {
            logger.info('Incoming changes found. Proceed with build stages.')
          } else {
            buildDescription 'Skipped'
            logger.warning('Incoming changes not found. Skip build...')
            currentBuild.result = 'ABORTED'
            autoCanceled = true
            slackSend(attachments: folioSlackNotificationUtils.renderAbortedBuildResultMessage(), channel: globalSlackChannel)
          }
        }
      }

      if (autoCanceled) {
        return
      }

      destroyParallelStage(deleteNamespaceJob, envsMap, namespaceBaseParams, globalSlackChannel)

      provisionFromBranchParallelStage(createNamespaceFromBranchJob, envsMap, namespaceFromBranchParams, globalSlackChannel)

      stage('Execute quality gates') {
        Map branches = [failFast: false]
        branches['Cypress'] = { ->
          Map cypressParams = [
            branch                : 'master',
            tenantUrl             : "https://${envsMap['cypress']['cluster']}-${envsMap['cypress']['namespace']}-diku.${Constants.CI_ROOT_DOMAIN}",
            okapiUrl              : "https://${envsMap['cypress']['cluster']}-${envsMap['cypress']['namespace']}-okapi.${Constants.CI_ROOT_DOMAIN}",
            tenantId              : 'diku',
            adminUsername         : 'diku_admin',
            adminPassword         : 'admin',
            parallelExecParameters: '--env grepTags="shiftLeft"',
            testsTimeout          : '2',
            testrailProjectID     : '', //TODO Add testrail Project ID
            testrailRunID         : '', //TODO Add testrail Run ID
            numberOfWorkers       : '4',
            useReportPortal       : 'true',
            runType               : 'ci',
            sendSlackNotification : 'false',
            agent                 : 'cypress-ci']
          cypressTestsExecutionSummary = folioCypressFlow(cypressParams)
        }
        branches['Karate'] = { ->
          KarateTestsParameters karateTestsParams = new KarateTestsParameters()
          karateTestsParams.okapiUrl = "https://${envsMap['karate']['cluster']}-${envsMap['karate']['namespace']}-okapi.${Constants.CI_ROOT_DOMAIN}"
          karateTestsParams.edgeUrl = "https://${envsMap['karate']['cluster']}-${envsMap['karate']['namespace']}-edge.${Constants.CI_ROOT_DOMAIN}"
          karateTestsParams.tenant = 'supertenant'
          karateTestsParams.prototypeTenant = 'consortium'
          karateTestsParams.adminUserName = 'super_admin'
          karateTestsParams.adminPassword = 'admin'
          karateTestsParams.threadsCount = '4'
          karateTestsParams.reportPortalProjectName = 'junit5-integration'
          karateTestsParams.sendSlackNotification = false
          karateTestsParams.sendTeamsSlackNotification = true
          karateTestsParams.syncWithJira = true
          karateTestsParams.timeout = '3'
          karateTestsExecutionSummary = folioKarateFlow(karateTestsParams)
        }
        parallel(branches)
      }

      stage('[AWS] Update ssm') {
        folioHashCommitCheck.updateBuildSha(currentBuildSha)
      }

      stage('[Slack] Send notification') {
        String karateTestsResultMessage = folioSlackNotificationUtils.renderTestResultSection(TestType.KARATE,
          karateTestsExecutionSummary, "", true,
          "${env.BUILD_URL}cucumber-html-reports/overview-features.html"
        )

        String cypressTestsResultMessage = folioSlackNotificationUtils.renderTestResultSection(TestType.CYPRESS,
          cypressTestsExecutionSummary, "", true, "${env.BUILD_URL}allure/"
        )

        List<ChangelogEntry> changelogEntriesList = folioChangeLog.call(previousBuildSha, currentBuildSha)
        String changelog = folioChangeLog.renderChangelogSection(changelogEntriesList)

        String attachments = SlackHelper.renderMessage([
          folioSlackNotificationUtils.renderBuildResultSection(),
          cypressTestsResultMessage,
          karateTestsResultMessage,
          changelog
        ])

        slackSend(attachments: attachments, channel: "#rancher_tests_notifications")
      }
    } catch (e) {
      logger.error("Caught exception: ${e}")
    } finally {
      if (!autoCanceled) {
        destroyParallelStage(deleteNamespaceJob, envsMap, namespaceBaseParams, globalSlackChannel)
      }
      stage('Cleanup') {
        println("Workspace size: ${sh(returnStdout: true, script: 'du -sh . || true').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}

void provisionFromBranchParallelStage(String jobName, Map envsMap, CreateNamespaceParameters namespaceFromBranchParams, String slackChannel) {
  stage('Provisioning') {
    try {
      Map branches = [failFast: false]
      envsMap.each { id, metadata ->
        CreateNamespaceParameters namespaceCreateParams = namespaceFromBranchParams.toBuilder()
          .clusterName(metadata['cluster'])
          .namespaceName(metadata['namespace'])
          .build()
        branches["${namespaceCreateParams.getClusterName()}-${namespaceCreateParams.getNamespaceName()}"] = { ->
          folioTriggerJob.createNamespaceFromBranch(jobName, namespaceCreateParams)
        }
      }
      parallel(branches)
    } catch (e) {
      currentBuild.result = 'FAILURE'
      slackSend(attachments: folioSlackNotificationUtils.renderBuildResultMessage(), channel: slackChannel)
      throw new Exception("Provision of the environment is failed: " + e)
    }
  }
}

void destroyParallelStage(String jobName, Map namespacesMap, CreateNamespaceParameters namespaceBaseParams, String slackChannel) {
  stage('Destroy') {
    try {
      Map branches = [failFast: false]
      namespacesMap.each { id, metadata ->
        CreateNamespaceParameters namespaceDeleteParams = namespaceBaseParams.toBuilder()
          .clusterName(metadata['cluster'])
          .namespaceName(metadata['namespace'])
          .build()
        branches["${namespaceDeleteParams.getClusterName()}-${namespaceDeleteParams.getNamespaceName()}"] = { ->
          folioTriggerJob.deleteNamespace(jobName, namespaceDeleteParams)
        }
      }
      parallel(branches)
    } catch (e) {
      currentBuild.result = 'FAILURE'
      slackSend(attachments: folioSlackNotificationUtils.renderBuildResultMessage(), channel: slackChannel)
      throw new Exception("Destroy of the environment is failed: " + e)
    }
  }
}
