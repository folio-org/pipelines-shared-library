#!groovy
package folioRancher.folioQualityGates

import org.folio.Constants as CommonConstants
import org.folio.models.ChangelogEntry
import org.folio.models.OkapiTenant
import org.folio.models.OkapiUser
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.models.parameters.CypressTestsParameters
import org.folio.models.parameters.KarateTestsParameters
import org.folio.rest_v2.Constants
import org.folio.rest_v2.PlatformType
import org.folio.slack.SlackHelper
import org.folio.testing.TestType
import org.folio.testing.cypress.results.CypressRunExecutionSummary
import org.folio.testing.karate.results.KarateRunExecutionSummary
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-2264') _

properties([
  pipelineTriggers([cron('H 6,9,12,15,18,21 * * 1-5')]),
  buildDiscarder(logRotator(numToKeepStr: '40')),
  disableConcurrentBuilds(),
  parameters([
    string(name: 'FOLIO_BRANCH', defaultValue: 'snapshot', description: 'platform-complete branch where will be run quality CI job'),
    booleanParam(name: 'SKIP_CHECK', defaultValue: false, description: 'Skip check of changes since last build.'),
    booleanParam(name: 'INCLUDE_KARATE', defaultValue: false, description: 'Exclude Karate tests from execution.'), //Set to true, if karate tests needed.
    folioParameters.agent(),
    folioParameters.refreshParameters()])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

Logger logger = new Logger(this, env.JOB_BASE_NAME)

boolean autoCanceled = false
String currentBuildSha
String previousBuildSha
CypressRunExecutionSummary cypressTestsExecutionSummary
KarateRunExecutionSummary karateTestsExecutionSummary

String createNamespaceFromBranchJob = CommonConstants.JENKINS_CREATE_NAMESPACE_FROM_BRANCH_JOB
String deleteNamespaceJob = CommonConstants.JENKINS_DELETE_NAMESPACE_JOB
String globalSlackChannel = '#rancher_tests_notifications'
String okapiVersion = folioTools.eval(folioStringScripts.getOkapiVersions(), ['FOLIO_BRANCH': params.FOLIO_BRANCH])[0]

Map envsMap = [
  cypress: [cluster: 'folio-etesting', namespace: 'cicypress', platform: 'eureka'],
]

if (params.INCLUDE_KARATE) {
  envsMap.put('karate', [cluster: 'folio-etesting', namespace: 'cikarate', platform: 'eureka'])
}

CreateNamespaceParameters namespaceBaseParams = new CreateNamespaceParameters.Builder()
  .rwSplit(false)
  .greenmail(false)
  .mockServer(true)
  .pgType('built-in')
  .pgVersion('16.1')
  .kafkaType('built-in')
  .opensearchType('built-in')
  .s3Type('built-in')
  .runSanityCheck(false)
  .members('')
  .worker(params.AGENT)
  .build()

CreateNamespaceParameters namespaceFromBranchParams = namespaceBaseParams.toBuilder()
  .folioBranch(params.FOLIO_BRANCH)
  .okapiVersion(okapiVersion)
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .mockServer(false)
  .consortia(true)
  .linkedData(true)
  .splitFiles(true)
  .ecsCCL(false)
  .rtr(false)
  .applicationSet('Complete')
  .applications(org.folio.rest_v2.Constants.APPLICATION_BRANCH('Complete'))
  .hasSecureTenant(true)
  .secureTenantId(folioDefault.consortiaTenants().get('university').getTenantId())
  .build()

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "#${env.BUILD_ID}"
      }

      stage('Check Changes') {
        if (params.SKIP_CHECK) {
          logger.info("Skip check of changes since last build.")
        } else {
          currentBuildSha = folioHashCommitCheck.getCurrentBuildSha(params.FOLIO_BRANCH)
          previousBuildSha = folioHashCommitCheck.getPreviousBuildSha()
          boolean diffFound = folioHashCommitCheck.isInstallJsonChanged(previousBuildSha, currentBuildSha)

          if (diffFound) {
            logger.info('Incoming changes found. Proceed with build stages.')
          } else {
            buildDescription 'Skipped'
            logger.warning('Incoming changes not found. Skip build...')
            currentBuild.result = 'ABORTED'
            autoCanceled = true
            slackSend(attachments: folioSlackNotificationUtils.renderAbortedBuildResultMessage(), channel: globalSlackChannel)
          }
        }
      }

      if (autoCanceled) {
        return
      }

      destroyParallelStage(deleteNamespaceJob, envsMap, namespaceBaseParams, globalSlackChannel)

      provisionFromBranchParallelStage(createNamespaceFromBranchJob, envsMap, namespaceFromBranchParams, globalSlackChannel)

      stage('Execute quality gates') {
        Map branches = [failFast: false]
        branches['Cypress'] = { ->
          CypressTestsParameters cypressParameters = new CypressTestsParameters()
          cypressParameters.setCiBuildId(env.JOB_BASE_NAME)
          cypressParameters.setTestsSrcBranch('master')
          cypressParameters.setTenantUrl("https://${envsMap['cypress']['cluster']}-${envsMap['cypress']['namespace']}-diku.${Constants.CI_ROOT_DOMAIN}")
          cypressParameters.setOkapiUrl("https://${envsMap['cypress']['cluster']}-${envsMap['cypress']['namespace']}-kong.${Constants.CI_ROOT_DOMAIN}")
          cypressParameters.setTenant(new OkapiTenant('diku')
            .withAdminUser(new OkapiUser('diku_admin', 'admin')))
          cypressParameters.setExecParameters('--env grepTags="shiftLeft"')
          cypressParameters.setWorkerLabel('cypress-ci')
          cypressParameters.setNumberOfWorkers(4)
          cypressParameters.setTimeout('120')

          cypressTestsExecutionSummary = folioCypressFlow.runWrapper(cypressParameters.getCiBuildId(), true, 'ci', false) {
            folioCypressFlow.multiThreadRun(cypressParameters)
          }
        }
        if (params.INCLUDE_KARATE) {
          branches['Karate'] = { ->
            KarateTestsParameters karateTestsParams = new KarateTestsParameters()
            karateTestsParams.okapiUrl = "https://${envsMap['karate']['cluster']}-${envsMap['karate']['namespace']}-okapi.${Constants.CI_ROOT_DOMAIN}"
            karateTestsParams.edgeUrl = "https://${envsMap['karate']['cluster']}-${envsMap['karate']['namespace']}-edge.${Constants.CI_ROOT_DOMAIN}"
            karateTestsParams.tenant = 'supertenant'
            karateTestsParams.prototypeTenant = 'consortium'
            karateTestsParams.adminUserName = 'super_admin'
            karateTestsParams.adminPassword = 'admin'
            karateTestsParams.threadsCount = '4'
            karateTestsParams.reportPortalProjectName = 'junit5-integration'
            karateTestsParams.sendSlackNotification = false
            karateTestsParams.sendTeamsSlackNotification = true
            karateTestsParams.syncWithJira = true
            karateTestsParams.timeout = '3'
            karateTestsExecutionSummary = folioKarateFlow(karateTestsParams)
          }
        }
        parallel(branches)
      }

      stage('[AWS] Update ssm') {
        if (currentBuildSha) {
          folioHashCommitCheck.updateBuildSha(currentBuildSha)
        }
      }

      stage('[Slack] Send notification') {
        String karateTestsResultMessage = ''
        if (params.INCLUDE_KARATE) {
          karateTestsResultMessage = folioSlackNotificationUtils.renderTestResultSection(TestType.KARATE,
            karateTestsExecutionSummary, "", true,
            "${env.BUILD_URL}cucumber-html-reports/overview-features.html"
          )
          return karateTestsResultMessage
        }

        String cypressTestsResultMessage = folioSlackNotificationUtils.renderTestResultSection(TestType.CYPRESS,
          cypressTestsExecutionSummary, "", true, "${env.BUILD_URL}allure/"
        )

        String changelog = ''
        if (previousBuildSha && currentBuildSha) {
          List<ChangelogEntry> changelogEntriesList = folioChangeLog.call(previousBuildSha, currentBuildSha)
          changelog = folioChangeLog.renderChangelogSection(changelogEntriesList)
          buildDescription "Changelog:\n${folioChangeLog.getPlainText(changelogEntriesList)}"
        }

        String attachments = SlackHelper.renderMessage([
          folioSlackNotificationUtils.renderBuildResultSection(),
          cypressTestsResultMessage,
          params.INCLUDE_KARATE ? karateTestsResultMessage : null,
          changelog
        ])

        slackSend(attachments: attachments, channel: "#rancher_tests_notifications")
      }
    } catch (e) {
      logger.error("Caught exception: ${e}")
    } finally {
      if (!autoCanceled) {
        destroyParallelStage(deleteNamespaceJob, envsMap, namespaceBaseParams, globalSlackChannel)
      }
      stage('Cleanup') {
        println("Workspace size: ${sh(returnStdout: true, script: 'du -sh . || true').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}

void provisionFromBranchParallelStage(String jobName, Map envsMap, CreateNamespaceParameters namespaceFromBranchParams, String slackChannel) {
  stage('Provisioning') {
    /** Map of Sub Job Objects [<id:object>,] */
    Map subJobsMap = [:]

    /** List of sections for slack notification */
    List<String> sections = []

    try {
      Map branches = [failFast: false]

      envsMap.each { id, metadata ->
        CreateNamespaceParameters namespaceCreateParams = namespaceFromBranchParams.toBuilder()
          .clusterName(metadata['cluster'] as String)
          .namespaceName(metadata['namespace'] as String)
          .platform(metadata['platform'] == 'eureka' ? PlatformType.EUREKA : PlatformType.OKAPI)
          .build()

        /** Complete Environment Name */
        String envName = "${namespaceCreateParams.getClusterName()}-${namespaceCreateParams.getNamespaceName()}"

        branches[envName] = { ->
          subJobsMap[id] = folioTriggerJob.createNamespaceFromBranch(metadata['platform'] == 'eureka' ?
            CommonConstants.JENKINS_CREATE_NAMESPACE_FROM_BRANCH_JOB_EUREKA : jobName, namespaceCreateParams, false, true)

          if (subJobsMap[id]?.getResult() == 'FAILURE') {
            throw new Exception(subJobsMap[id]?.getDescription() as String)
          }
        }
      }
      parallel(branches)

    } catch (e) {
      /** Set Job build result to FAILURE */
      currentBuild.result = 'FAILURE'

      /** Add the build result section to the slack notification */
      sections.add(folioSlackNotificationUtils.renderBuildResultSection() as String)

      /** Add the sub job build result sections to the slack notification */
      subJobsMap.each { jobId, jobObject ->
        sections.add(folioSlackNotificationUtils.renderSubJobBuildResultSection(
          jobObject?.getProjectName(),
          jobObject?.getDisplayName(),
          jobObject?.getAbsoluteUrl() + 'console',
          jobObject?.getResult(),
          jobObject?.getDescription()
        ) as String)
      }

      /** Attachments for slack notification */
      String attachments = SlackHelper.renderMessage(sections)

      slackSend(attachments: attachments, channel: slackChannel)
      throw new Exception("Provision of the environment is failed: " + e)
    }
  }
}

void destroyParallelStage(String jobName, Map namespacesMap, CreateNamespaceParameters namespaceBaseParams, String slackChannel) {
  stage('Destroy') {
    try {
      Map branches = [failFast: false]
      namespacesMap.each { id, metadata ->
        CreateNamespaceParameters namespaceDeleteParams = namespaceBaseParams.toBuilder()
          .clusterName(metadata['cluster'])
          .namespaceName(metadata['namespace'])
          .build()
        branches["${namespaceDeleteParams.getClusterName()}-${namespaceDeleteParams.getNamespaceName()}"] = { ->
          folioTriggerJob.deleteNamespace(metadata['platform'] == 'eureka' ?
            CommonConstants.JENKINS_DELETE_NAMESPACE_JOB_EUREKA : jobName, namespaceDeleteParams)
        }
      }
      parallel(branches)
    } catch (e) {
      currentBuild.result = 'FAILURE'
      slackSend(attachments: folioSlackNotificationUtils.renderBuildResultMessage(), channel: slackChannel)
      throw new Exception("Destroy of the environment is failed: " + e)
    }
  }
}
