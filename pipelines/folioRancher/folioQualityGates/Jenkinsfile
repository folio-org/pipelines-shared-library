import org.jenkinsci.plugins.workflow.libs.Library
import org.folio.Constants


@Library('pipelines-shared-library@RANCHER-999') _

pipeline {
    agent { label 'rancher' }

    // SCM polling
    /*triggers {
               pollSCM('* * * * *') // Poll SCM
           }*/

    options {
        disableConcurrentBuilds()
    }
    parameters {
        booleanParam(defaultValue: false, description: 'Skip Commit Changes', name: 'SKIP_CHANGES')
        string(name: 'BRANCH', defaultValue: 'snapshot', description: 'platform-complete branch where will be run quality CI job')
    }
    stages {
        stage('Init') {
            steps {
                script {
                    currentBuild.result = 'SUCCESS'
                    echo "SOMETHING IMPLEMENT LOGIC IF NEED"
                }
            }
        }
// FOR TESTING PURPOSE USING TEST BRANCH RANCHER-999 When Logic will be workable will adjust for the Platform Complete

stage('Check Changes') {
    steps {
        script {
           if (params.SKIP_CHANGES) {
                echo "Skipping changes for the SNAPSHOT BRANCH and moving to Parallel Run."
            } else {
                withCredentials([[$class           : 'AmazonWebServicesCredentialsBinding',
                                  credentialsId    : Constants.AWS_CREDENTIALS_ID,
                                  accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {

                def HashDiffDetected = folioHashCommitCheck.commitHashChangeDetected(params.BRANCH)  // true or false
                echo "HashCommitChanges: ${HashDiffDetected}"
                if (HashDiffDetected) {
                   // Set the build status to UNSTABLE (Yellow) To Indicate that Changes Are Detected, For the Visualisation Purposes
                   echo "Changes detected, setting build status to UNSTABLE"
                   currentBuild.result = 'UNSTABLE'
                   env.HashDiffDetected = HashDiffDetected.toString()

                }
            }
        }
    }
}
        stage('Parallel Quality Gate Stages') {
            when {
                expression {
                    params.SKIP_CHANGES || env.HashDiffDetected == 'true'
                    }
             }
            parallel {
                stage('Run karate tests') {
                    steps {
                        echo "Run karate tests"
                        // Add code for 'Run karate tests' stage here
                    }
                }
                stage('Run cypress tests') {
                    steps {
                        echo "Run cypress tests"
                        // Add code for 'Run cypress tests' stage here
                    }
                }
                stage('Run schema comparison') {
                    steps {
                        echo "Schema comparison tests"
                        // Add code for 'Run schema comparison' stage here
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                cleanWs notFailBuild: true
            }
        }
    }
}
