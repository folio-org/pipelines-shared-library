import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-999') _

pipeline {
    agent { label 'rancher' }

    // SCM polling
    /*triggers {
               pollSCM('* * * * *') // Poll SCM
           }*/

    options {
        disableConcurrentBuilds()
    }
    parameters {
        booleanParam(defaultValue: false, description: 'Skip Commit Changes', name: 'SKIP_CHANGES')
        string(name: 'BRANCH', defaultValue: 'RANCHER-999', description: 'platform-complete branch where will be run quality CI job')
    }
    stages {
        stage('Init') {
            steps {
                script {
                    currentBuild.result = 'SUCCESS'
                    echo "SOMETHING IMPLEMENT LOGIC IF NEED"
                }
            }
        }
// FOR TESTING PURPOSE USING TEST BRANCH RANCHER-999 When Logic will be workable will adjust for the Platform Complete

stage('Check Changes') {
    steps {
        script {
            if (params.SKIP_CHANGES == true) {
                echo "Skipping changes for the SNAPSHOT BRANCH and moving to Parallel Run."
            } else {
                def currentHash = ''
                def savedHash = env.SAVED_HASH ?: '' // Retrieve the saved hash from environment variables

                try {
                    // Fetch the current Git hash of the specified branch
                    def gitHashOutput = sh(script: "git ls-remote https://github.com/folio-org/pipelines-shared-library.git refs/heads/${params.BRANCH} | cut -f 1", returnStatus: true)
                    if (gitHashOutput != 0) {
                        error "Error fetching Git hash. Exit code: ${gitHashOutput}"
                    } else {
                        currentHash = sh(script: "git ls-remote https://github.com/folio-org/pipelines-shared-library.git refs/heads/${params.BRANCH} | cut -f 1", returnStdout: true)
                    }
                } catch (Exception e) {
                    error "Error fetching Git hash: ${e.message}"
                }

                if (currentHash == savedHash) {
                    echo "No changes detected. Returning false."
                } else {
                    echo "Changes detected. Returning true."
                    env.SAVED_HASH = currentHash // Store the current hash in environment variables
                }
            }
        }
    }
}
        stage('Parallel Quality Gate Stages') {
            parallel {
                stage('Run karate tests') {
                    steps {
                        echo "Run karate tests"
                        // Add code for 'Run karate tests' stage here
                    }
                }
                stage('Run cypress tests') {
                    steps {
                        echo "Run cypress tests"
                        // Add code for 'Run cypress tests' stage here
                    }
                }
                stage('Run schema comparison') {
                    steps {
                        echo "Schema comparison tests"
                        // Add code for 'Run schema comparison' stage here
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                cleanWs notFailBuild: true
            }
        }
    }
}
