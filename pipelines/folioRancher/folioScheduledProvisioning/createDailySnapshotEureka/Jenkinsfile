#!groovy
import groovy.transform.Field
import org.folio.Constants
import org.folio.jenkins.PodTemplates
import org.folio.models.parameters.CreateNamespaceParameters
import org.folio.rest_v2.PlatformType
import org.jenkinsci.plugins.workflow.libs.Library

//TODO remove branch before merge to master
@Library('pipelines-shared-library') _

@Field final String deleteNamespaceJobName = Constants.JENKINS_DELETE_NAMESPACE_JOB
@Field final String createNamespaceJobName = Constants.JENKINS_CREATE_NAMESPACE_FROM_BRANCH_JOB

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([folioParameters.refreshParameters()]),
  pipelineTriggers([parameterizedCron('''H 23 * * *''')])
// Get back when the ticket is resolved https://folio-org.atlassian.net/browse/RANCHER-1546
//            pipelineTriggers([parameterizedCron('''H 23 * * * %AGENT=rancher''')])])
])


if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

PodTemplates podTemplates = new PodTemplates(this)

CreateNamespaceParameters namespace1 = new CreateNamespaceParameters.Builder()
  .platform(PlatformType.EUREKA)
  .clusterName('folio-etesting')
  .namespaceName('snapshot')
  .folioBranch('snapshot')
  .okapiVersion('latest')
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .linkedData(true)
  .rwSplit(false)
  .splitFiles(true)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .ecsCCL(true)
  .applicationSet('Complete')
  .applications(org.folio.rest_v2.Constants.APPLICATION_BRANCH('Complete'))
  .hasSecureTenant(true)
  .secureTenantId(folioDefault.consortiaTenants().get('university').getTenantId())
  .dataset(false)
  .pgType('built-in')
  .pgVersion('16.8')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('thunderjet,folijet,spitfire,vega,thor,Eureka,volaris,corsair,Bama,Aggies,Dreamliner,Leipzig,firebird,dojo,erm')
  .uiBuild(true)
  .runSanityCheck(false)
  .build()

CreateNamespaceParameters namespace2 = new CreateNamespaceParameters.Builder()
  .platform(PlatformType.EUREKA)
  .clusterName('folio-etesting')
  .namespaceName('snapshot2')
  .folioBranch('snapshot')
  .okapiVersion('latest')
  .configType('testing')
  .loadReference(true)
  .loadSample(true)
  .consortia(true)
  .linkedData(true)
  .rwSplit(false)
  .splitFiles(true)
  .greenmail(false)
  .mockServer(false)
  .rtr(false)
  .ecsCCL(true)
  .applicationSet('Complete')
  .applications(org.folio.rest_v2.Constants.APPLICATION_BRANCH('Complete'))
  .hasSecureTenant(true)
  .secureTenantId(folioDefault.consortiaTenants().get('university').getTenantId())
  .dataset(false)
  .pgType('built-in')
  .pgVersion('16.8')
  .kafkaType('built-in')
  .opensearchType('aws')
  .s3Type('built-in')
  .members('thunderjet,folijet,spitfire,vega,thor,Eureka,volaris,corsair,Bama,Aggies,Dreamliner,Leipzig,firebird,dojo,erm')
  .uiBuild(true)
  .runSanityCheck(false)
  .build()

ansiColor('xterm') {
  podTemplates.rancherAgent {
    stage('Checkout') {
      checkout scm
    }

    CreateNamespaceParameters createdEnv = namespace1
    CreateNamespaceParameters eliminatedEnv = namespace2

    stage('Determination') {
      // Check if both environments exist
      def env1Exists = folioHelm.withKubeConfig(namespace1.getClusterName()) { kubectl.checkNamespaceExistence(namespace1.getNamespaceName()) }
      def env2Exists = folioHelm.withKubeConfig(namespace2.getClusterName()) { kubectl.checkNamespaceExistence(namespace2.getNamespaceName()) }

      println "${namespace1.getNamespaceName()} exist $env1Exists"
      println "${namespace2.getNamespaceName()} exist $env2Exists"

      // Check both environments status
      def buildStatusEnv1 = folioHelm.withKubeConfig(namespace1.getClusterName()) { kubectl.getLabelsFromNamespace(namespace1.getNamespaceName(), "build-status") }
      def buildStatusEnv2 = folioHelm.withKubeConfig(namespace2.getClusterName()) { kubectl.getLabelsFromNamespace(namespace2.getNamespaceName(), "build-status") }

      println "${namespace1.getNamespaceName()} status is $buildStatusEnv1"
      println "${namespace2.getNamespaceName()} status is $buildStatusEnv2"

      // Check environments build date
      def env1BuildDate = folioHelm.withKubeConfig(namespace1.getClusterName()) { kubectl.getLabelsFromNamespace(namespace1.getNamespaceName(), "build-date") }
      def env2BuildDate = folioHelm.withKubeConfig(namespace2.getClusterName()) { kubectl.getLabelsFromNamespace(namespace2.getNamespaceName(), "build-date") }

      println "${namespace1.getNamespaceName()} build date is $env1BuildDate"
      println "${namespace2.getNamespaceName()} build date is $env2BuildDate"

      try {
        env1BuildDate = env1BuildDate ? new Date(env1BuildDate.toLong()) : new Date(0)
      } catch (Exception ignored) {
        env1BuildDate = new Date(0) // fallback in case of error
      }

      try {
        env2BuildDate = env2BuildDate ? new Date(env2BuildDate.toLong()) : new Date(0)
      } catch (Exception ignored) {
        env2BuildDate = new Date(0) // fallback in case of error
      }

      env1Exists = env1Exists && buildStatusEnv1 == 'SUCCESS'
      env2Exists = env2Exists && buildStatusEnv2 == 'SUCCESS'

      env1Exists = env1Exists && env2Exists ? env2BuildDate <= env1BuildDate : env1Exists
      env2Exists = env1Exists && env2Exists ? env1BuildDate < env2BuildDate : env2Exists

      createdEnv = env1Exists ? namespace2 : namespace1
      eliminatedEnv = env1Exists ? namespace1 : namespace2

      println "Env will be created: ${createdEnv.getNamespaceName()}"
    }

    stage('Build name') {
      buildName "${createdEnv.getClusterName()}-${createdEnv.getNamespaceName()}.${env.BUILD_ID}"
      buildDescription "Config: ${createdEnv.getConfigType()}"
    }

    spinUpNamespaces(createdEnv, eliminatedEnv)

    //TODO: Decision needs to be made
    if (eliminatedEnv.getNamespaceName() == namespace1.getNamespaceName())
      stage('Spinning up N1 del N2') {
        spinUpNamespaces(eliminatedEnv, createdEnv)
      }
  }
}

void spinUpNamespaces(CreateNamespaceParameters createdEnv, CreateNamespaceParameters eliminatedEnv) {
  stage('Cleaning new env') {
    folioTriggerJob.deleteNamespace(deleteNamespaceJobName, createdEnv)
  }

  stage('Spinning up new env') {
    folioTriggerJob.createNamespaceFromBranch(createNamespaceJobName, createdEnv)
  }

  stage('Labeling new env') {
    folioHelm.withKubeConfig(createdEnv.getClusterName()) { kubectl.addLabelToNamespace(createdEnv.getNamespaceName(), "build-status", "SUCCESS") }
    folioHelm.withKubeConfig(createdEnv.getClusterName()) { kubectl.addLabelToNamespace(createdEnv.getNamespaceName(), "build-date", new Date().getTime().toString()) }
  }

  stage('Deleting old env') {
    folioTriggerJob.deleteNamespace(deleteNamespaceJobName, eliminatedEnv)
  }
}

