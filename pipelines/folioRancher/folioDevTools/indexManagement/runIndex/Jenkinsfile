#!groovy
package folioRancher.folioDevTools.indexManagement.runIndex

import org.folio.Constants
import org.folio.jenkins.PodTemplates
import org.folio.models.module.FolioModule
import org.folio.utilities.Logger
import org.folio.utilities.RestClient
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    choice(name: 'TENANT', choices: ['diku', 'consortium', 'college', 'university'], description: 'Tenant to reindex'),
    folioParameters.refreshParameters()])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

if (params.NAMESPACE in Constants.RANCHER_PROTECTED_NAMESPACES) {
 folioCommon.kitfoxApproval()
}

PodTemplates podTemplates = new PodTemplates(this)
Logger logger = new Logger(this, env.JOB_BASE_NAME)

ansiColor('xterm') {
  podTemplates.rancherAgent {
    stage('Ini') {
      buildName "Reindex ALL on ${params.TENANT}"
      buildDescription "${params.CLUSTER}-${params.NAMESPACE}"
    }

    stage('Checkout') {
      checkout scm
    }

    stage('[Start]') {
      logger.info("Reindex on tenant: ${params.TENANT}")
      folioHelm.withKubeConfig(params.CLUSTER) {

        sh(script: "kubectl delete pod -l 'app.kubernetes.io/name=mod-search' --namespace=${params.NAMESPACE}", returnStatus: true)

        folioHelm.checkDeploymentsRunning(params.NAMESPACE, new FolioModule().setName('mod-search'))

        sleep time: 1, unit: 'MINUTES'

        def tenant = params.TENANT == 'diku' ? folioDefault.tenants()[params.TENANT] : folioDefault.consortiaTenants()[params.TENANT]

        def URL = "https://$params.CLUSTER-$params.NAMESPACE-kong.$Constants.CI_ROOT_DOMAIN/search/index/instance-records/reindex/full"
        def Auth_URL = "https://$params.CLUSTER-$params.NAMESPACE-kong.$Constants.CI_ROOT_DOMAIN/authn/login"

        Map body = ["username": tenant.getAdminUser().username,
                    "password": tenant.getAdminUser().passwordPlainText]

        def headers = ["Content-Type"  : "application/json",
                       "X-Okapi-Tenant": params.TENANT]

        def token = new RestClient(this, true).post(Auth_URL, body, headers, [200, 201, 202, 204]).body.okapiToken

        headers.put('Authorization', "Bearer ${token}")

        def response = new RestClient(this, true).post(URL, null, headers, [200, 201, 202, 204])

        logger.info("Reindex response: ${response}")
      }
    }

  }
}
