#!groovy
import org.folio.models.OkapiTenant
import org.folio.rest_v2.Configurations
import org.folio.rest_v2.Constants
import org.folio.utilities.Logger

@Library('pipelines-shared-library@RANCHER-1494') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.agent(),
    folioParameters.refreshParameters(),
    string(name: 'TENANT_ID', defaultValue: '', description: 'Tenant ID'),
  ])
])

OkapiTenant tenant = folioDefault.tenants()[params.TENANT_ID as String]
tenant.okapiConfig.withResetPasswordLink("https://${params.CLUSTER}-${params.NAMESPACE}-${params.TENANT_ID}.${Constants.CI_ROOT_DOMAIN}")
Configurations config = new Configurations(this, "${params.CLUSTER}-${params.NAMESPACE}-okapi.${Constants.CI_ROOT_DOMAIN}", true)


if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

if (params.CLUSTER == 'folio-testing') {
  folioCommon.kitfoxApproval()
}

Logger logger = new Logger(this, env.JOB_BASE_NAME)

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "CONFIGURE"
        buildDescription "${params.CLUSTER}-${params.NAMESPACE}.${env.BUILD_ID}"
      }
      stage('Checkout') {
        checkout scm
      }

      stage('Configure tenant') {
        config.setResetPasswordLink(tenant)
      }

    } catch (e) {
      logger.warning("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        logger.debug("Workspace size: ${sh(returnStdout: true, script: 'du -sh .').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}
