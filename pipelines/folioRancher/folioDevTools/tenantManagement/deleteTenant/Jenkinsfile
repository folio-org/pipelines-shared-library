#!groovy
import org.folio.jenkins.PodTemplates
import org.folio.models.InstallRequestParams
import org.folio.models.OkapiTenant
import org.folio.models.RancherNamespace
import org.folio.rest_v2.Main
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.tenantId(''),
    folioParameters.refreshParameters()])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  error('DRY RUN BUILD, PARAMETERS REFRESHED!')
}

PodTemplates podTemplates = new PodTemplates(this)

RancherNamespace namespace = new RancherNamespace(params.CLUSTER, params.NAMESPACE)
  .withSuperTenantAdminUser()

Main main = new Main(this, namespace.getDomains()['okapi'], namespace.getSuperTenant())

OkapiTenant tenant = null

ansiColor('xterm') {
  podTemplates.rancherAgent {
    try {
      stage(name: 'Pre-check') {
        if (!main.isTenantExist(params.TENANT_ID)) {
          currentBuild.result = 'ABORTED'
          error('Tenant does not exist, stopping the pipeline')
        }
        InstallRequestParams installRequestParams = new InstallRequestParams()
          .withTenantParameters("purge=true")
        tenant = new OkapiTenant(params.TENANT_ID)
          .withInstallJson(main.getInstallJson(params.TENANT_ID, 'disable'))
          .withInstallRequestParams(installRequestParams)
      }
      stage('Ini') {
        buildName "${namespace.getClusterName()}-${namespace.getNamespaceName()}.${env.BUILD_ID}"
        buildDescription "Tenant: ${params.TENANT_ID}"
      }
      stage("Disable tenant modules") {
        main.tenantInstall(tenant, tenant.getModules().getInstallJson())
        println("modules removed")
      }
      stage("Delete tenant") {
        main.deleteTenant(tenant)
      }
    } catch (exception) {
      println(exception)
      error(exception.getMessage())
    }
  }
}
