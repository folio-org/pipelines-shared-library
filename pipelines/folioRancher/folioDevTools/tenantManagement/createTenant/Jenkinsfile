#!groovy
import groovy.json.JsonSlurperClassic
import org.folio.Constants
import org.folio.models.Index
import org.folio.models.InstallRequestParams
import org.folio.models.OkapiConfig
import org.folio.models.OkapiTenant
import org.folio.models.RancherNamespace
import org.folio.models.SmtpConfig
import org.folio.models.TenantUi
import org.folio.rest.GitHubUtility
import org.folio.rest_v2.Main
import org.folio.utilities.RestClient
import org.jenkinsci.plugins.workflow.libs.Library


@Library('pipelines-shared-library@RANCHER-837') _

CONFIG_BRANCH = 'RANCHER-837'

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
      folioParameters.cluster(),
      folioParameters.namespace(),
      folioParameters.referenceTenantId(),
      folioParameters.tenantId(''),
      string(name: 'TENANT_NAME', defaultValue: '', description: "New tenant name"),
      string(name: 'TENANT_DESCRIPTION', defaultValue: '', description: "New tenant Description"),
      folioParameters.loadReference(),
      folioParameters.loadSample(),
      folioParameters.agent(),
      folioParameters.refreshParameters()
  ])
])

String defaultTenantId = 'supertenant'
String X_Okapi_Token = ""

Map headers = [
  "Content-Type": "application/json",
  'X-Okapi-Tenant': 'supertenant'
]

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

RestClient client = new RestClient(this)

ansiColor('xterm') {
  node(params.AGENT) {

    stage('[Authorization]'){
     Map admin_user = [
       "Content-Type": "application/json",
       'X-Okapi-Tenant': 'supertenant'
     ]
     String body =  """{
       "username": "super_admin",
       "password": "admin"
     }"""
      def json_body = new JsonSlurperClassic().parseText(body)
      String auth_url = "https://${params.CLUSTER}-${params.NAMESPACE}-okapi.${Constants.CI_ROOT_DOMAIN}/authn/login"
      def token_draft = client.post(auth_url, json_body, headers)
      println token_draft
      X_Okapi_Token = token_draft['headers']['x-okapi-token']
      println(X_Okapi_Token)
    }

    stage('[Primary testing start]'){
      folioHelm.withK8sClient {
        headers.put('X-Okapi-Token', X_Okapi_Token)
        println headers
        String URL = "https://${params.CLUSTER}-${params.NAMESPACE}-okapi.${Constants.CI_ROOT_DOMAIN}/_/version"
        def res = client.get("${URL}", headers)
        String okapi_version = res['body']
      }
    }
  }
}
