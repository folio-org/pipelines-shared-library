#!groovy

import org.folio.Constants
import org.folio.rest.model.OkapiTenant
import org.folio.utilities.model.Project
import org.folio.utilities.model.Module
import org.folio.models.TenantUi
import org.folio.rest_v2.Common
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-835') _

properties([
    buildDiscarder(logRotator(numToKeepStr: '30')),
    disableConcurrentBuilds(),
    parameters([
        folioParameters.cluster(),
        folioParameters.namespace(),
        folioParameters.repository(),
        folioParameters.branch(),
        folioParameters.tenantId(),
        folioParameters.uiBundleTag(),
        folioParameters.uiBundleBuild(),
        string(name: 'custom_hash', defaultValue: '', description: 'Commit hash for bundle build from specific commit'),
        folioParameters.agent(),
        folioParameters.refreshParameters()
    ])
])

if (params.REFRESH_PARAMETERS) {
    currentBuild.result = 'ABORTED'
    return
}

ansiColor('xterm') {
    common.refreshBuidParameters(params.refresh_parameters)
    node(params.AGENT) {
        try {
            stage('Ini') {
                buildName "${params.CLUSTER}.${env.BUILD_ID}"
                buildDescription ""
            }

            stage('Checkout') {
              checkout scm
            }

            stage('UI Build') {
                folioUI.build(params)
    //             Common common = new Common(this, "diku")
    //             common.logger.warning(params)
    //             input "Testing staff.."
            }
    } catch (e) {
          println "Caught exception: ${e}"
          error(e.getMessage())
    } finally {
            stage('Cleanup') {
                cleanWs notFailBuild: true
                  }
        }
    }
}

