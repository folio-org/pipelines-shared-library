#!groovy

@Library('pipelines-shared-library') _

import org.folio.models.OkapiTenant
import org.folio.models.RancherNamespace
import org.folio.rest_v2.Users
import org.folio.models.OkapiUser
import org.jenkinsci.plugins.workflow.libs.Library

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.tenantId(),
    folioParameters.adminUsername(),
    folioParameters.adminPassword(),
    string(name: 'USERNAME', defaultValue: '', description: "Please input username for deletion"),
    folioParameters.agent(),
    folioParameters.refreshParameters()])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  error('DRY RUN BUILD, PARAMETERS REFRESHED!')
}

RancherNamespace namespace = new RancherNamespace(params.CLUSTER, params.NAMESPACE)
  .withSuperTenantAdminUser()

OkapiTenant tenant = new OkapiTenant(params.TENANT_ID)
  .withAdminUser(new OkapiUser(params.ADMIN_USERNAME, params.ADMIN_PASSWORD))
OkapiUser user = new OkapiUser(params.USERNAME, '')
  .withFirstName(params.USERNAME)

Users deleteUser = new Users(this, namespace.getDomains()['okapi'])

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "${namespace.getClusterName()}-${namespace.getNamespaceName()}.${env.BUILD_ID}"
        buildDescription "Tenant: ${params.TENANT_ID}, User: ${params.USERNAME}"
      }
      stage("Delete User") {
        deleteUser.deleteUser(tenant, user)
      }
    } catch (exception) {
      println(exception)
      error(exception.getMessage())
    } finally {
      stage('Cleanup') {
        cleanWs notFailBuild: true
      }
    }
  }
}
