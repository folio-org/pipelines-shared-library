#!groovy
package folioRancher.folioDevTools.moduleDeployment.reindex


import org.folio.Constants
import org.folio.models.EurekaTenant
import org.folio.rest_v2.eureka.Kong
import org.folio.utilities.Logger
import org.folio.utilities.RestClient
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-1334') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.agent(),
    string(name: 'TENANT', defaultValue: 'diku', description: '(Required) Tenant where reindex should be performed'),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

Logger logger = new Logger(this, env.JOB_BASE_NAME)

ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "Reindex ALL on ${params.TENANT}"
        buildDescription "${params.CLUSTER}-${params.NAMESPACE}"
      }

      stage('Checkout') {
        checkout scm
      }

        stage('[Start] reindex on tenant') {
            logger.info("Start reindex on tenant: ${params.TENANT}")
            folioHelm.withKubeConfig(params.CLUSTER) {

                if (params.NAMESPACE == 'sprint') {
                    folioCommon.kitfoxApproval()
                }
//                sh(script: "kubectl delete pod -l 'app.kubernetes.io/name=mod-search' --force --namespace $params.NAMESPACE")
//                sleep time: 3, unit: 'MINUTES' //Wait until mod-search is restarted
                Kong kong = new Kong(this, "https://$params.CLUSTER-$params.NAMEPSACE-kong.$Constants.CI_ROOT_DOMAIN",
                        "https://$params.CLUSTER-$params.NAMEPSACE-keycloak.$Constants.CI_ROOT_DOMAIN", true)
                def URL = kong.generateUrl("/search/index/instance-records/reindex/full")
                RestClient client = new RestClient(this, true)
                def headers = kong.getTenantHttpHeaders(new EurekaTenant("${params.TENANT}"), true)
                def response = client.post(URL, null, headers, [200, 201, 202, 204])

                println(response.body)
            }
        }

    } catch (e) {
      logger.warning("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        logger.debug("Workspace size: ${sh(returnStdout: true, script: 'du -sh .').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}
