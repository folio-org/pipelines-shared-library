#!groovy
import org.folio.Constants
import org.folio.jenkins.PodTemplates
import org.folio.models.InstallRequestParams
import org.folio.models.OkapiTenant
import org.folio.models.RancherNamespace
import org.folio.models.module.FolioModule
import org.folio.rest_v2.Main
import org.folio.utilities.GitHubClient
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-2236') _

properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  parameters([
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.moduleName(),
    folioParameters.branchWithRef('MODULE_BRANCH', 'MODULE_NAME'),
    folioParameters.configType(),
    string(name: 'MAVEN_ARGS', defaultValue: '-DskipTests', description: 'Maven build arguments'),
    choice(name: 'JAVA_VERSION', choices: ['21', '17'], description: 'Java version to use for tests'),
    folioParameters.loadReference(false),
    folioParameters.loadSample(false),
    folioParameters.simulate(),
    folioParameters.ignoreErrors(),
    folioParameters.refreshParameters()
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

if (params.CLUSTER == 'folio-testing') {
  folioCommon.kitfoxApproval()
}

PodTemplates podTemplates = new PodTemplates(this, true)
Logger logger = new Logger(this, env.JOB_BASE_NAME)

FolioModule module = new FolioModule()
module.name = params.MODULE_NAME

String featureBranch = params.MODULE_BRANCH
String featureHash = ''
String mavenArguments = params.MAVEN_ARGS.trim()
List installJson = []

InstallRequestParams installRequestParams = new InstallRequestParams()
  .withTenantParameters("loadReference=${params.LOAD_REFERENCE},loadSample=${params.LOAD_SAMPLE}")
  .withSimulate(params.SIMULATE)
  .withIgnoreErrors(params.IGNORE_ERRORS)

RancherNamespace namespace = new RancherNamespace(params.CLUSTER, params.NAMESPACE)
  .withSuperTenantAdminUser()
  .withDeploymentConfigType(params.CONFIG_TYPE)

namespace.addDeploymentConfig(folioTools.getPipelineBranch())

Main main = new Main(this, namespace.getDomains()['okapi'], namespace.getSuperTenant())

ansiColor('xterm') {
  podTemplates.javaBuildAgent(params.JAVA_VERSION) {
    stage('Ini') {
      buildName "#${params.MODULE_NAME}.${env.BUILD_ID}"
      buildDescription("Env: ${namespace.getWorkspaceName()}\nBranch: ${params.MODULE_BRANCH}\n" +
        "Config: ${params.CONFIG_TYPE}\n${currentBuild.getBuildCauses()[0].shortDescription}")

      featureHash = new GitHubClient(this).getBranchInfo(module.getName(), featureBranch).commit.sha.take(7)
    }

    stage('[Git] Checkout module source') {
      checkout(scmGit(
        branches: [[name: "*/${featureBranch}"]],
        extensions: [cloneOption(depth: 50, noTags: true, reference: '', shallow: true),
                     authorInChangelog(),
                     submodule(recursiveSubmodules: true, reference: ''),
                     [$class: 'RelativeTargetDirectory', relativeTargetDir: "${module.getName()}"]],
        userRemoteConfigs: [[credentialsId: Constants.PRIVATE_GITHUB_CREDENTIALS_ID,
                             url          : "${Constants.FOLIO_GITHUB_URL}/${module.getName()}.git"]]))
    }

    stage('[Maven] Compile') {
      container('java') {
        dir(module.getName()) {
          String origVersion = readMavenPom().getVersion()
          module.version = "${origVersion}.${featureHash}"

          withMaven(jdk: Constants.JAVA_TOOL_NAME,
            maven: Constants.MAVEN_TOOL_NAME,
            mavenOpts: '-XX:MaxRAMPercentage=85',
            mavenLocalRepo: "${podTemplates.WORKING_DIR}/.m2/repository",
            traceability: false,
            options: [artifactsPublisher(disabled: true)]) {
              sh """
                mvn versions:set -DnewVersion=${module.getVersion()}
                mvn package ${mavenArguments}
              """.stripIndent()
          }

          String descriptorPath = "target/ModuleDescriptor.json"
          module.descriptor = fileExists(descriptorPath) ? [readJSON(file: descriptorPath)] : []
        }
      }
    }

    stage('[Docker] Build and push') {
      common.checkEcrRepoExistence(module.getName())
      container('kaniko') {
        dir(module.getName() == 'okapi' ? 'okapi/okapi-core' : module.getName()) {
          withAWS(credentials: Constants.ECR_FOLIO_REPOSITORY_CREDENTIALS_ID, region: Constants.AWS_REGION) {
            ecrLogin()
            folioKaniko.dockerHubLogin()
            sh "/kaniko/executor --destination ${Constants.ECR_FOLIO_REPOSITORY}/${module.getName()}:${module.getVersion()} --context ."
          }
        }
      }
    }

    stage('Generate context') {
      if (module.getName() == 'okapi') {
        namespace.setOkapiVersion(module.getVersion() - ".${featureHash}")
      } else {
        installJson = [["id"    : "${module.getName()}-${module.getVersion()}",
                        "action": "enable"]]
      }

      //TODO change to retrieve admin user information from secrets
      Map folioTenants = folioDefault.tenants() + folioDefault.consortiaTenants()
      main.getTenantsList().each { tenantId ->
        if (tenantId == 'supertenant') {
          if (module.getName() ==~ /mod-(permissions|users|login|authtoken)/) {
            namespace.getSuperTenant().withInstallJson(installJson)
          }
        } else {
          namespace.addTenant(new OkapiTenant(tenantId)
            .withInstallJson(installJson)
            .withInstallRequestParams(installRequestParams.clone()))
          if (folioTenants.containsKey(tenantId)) {
            namespace.getTenants()[tenantId].setAdminUser(folioTenants[tenantId].getAdminUser())
          } else {
            logger.warning("Credentials missing for tenant ${tenantId}")
          }
        }
      }

      namespace.getModules().setInstallJsonObject(installJson)
    }

    stage('Update') {
      main.publishModulesDescriptors(module.getDescriptor())

      folioDeployFlow.update(namespace)
    }
  }
}
