package folioRancher.folioDevTools.moduleDeployment.deploySidecarFromFeatureBranch

import org.folio.Constants
import org.folio.models.EurekaNamespace
import org.folio.utilities.Logger
import org.folio.utilities.GitHubClient
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-1334') _


/** Sidecar module name (repository name) */
def sidecarModuleName = 'folio-module-sidecar'

/** Pipeline properties and parameters */
properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.branch('MODULE_BRANCH', sidecarModuleName),
    string(name: 'MAVEN_ARGS', defaultValue: '-DskipTests', description: 'Maven build arguments'),
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.configType(),
    folioParameters.agent(),
    folioParameters.refreshParameters(),
  ])
])

/** Re-read updated Jenkinsfile code */
if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

/** Job variables */
Logger logger = new Logger(this, env.JOB_BASE_NAME)

/** Collect Rancher Namespace Configuration */
EurekaNamespace namespace = new EurekaNamespace(params.CLUSTER, params.NAMESPACE)
  .withDeploymentConfigType(params.CONFIG_TYPE) as EurekaNamespace

/** Collect feature branch and hash */
String featureBranch = params.MODULE_BRANCH
String featureHash = new GitHubClient(this).getBranchInfo(sidecarModuleName, featureBranch).commit.sha.take(7)

/** Collect Maven arguments */
def mavenArguments = params.MAVEN_ARGS.trim()

/** Sidecar version */
def sidecarVersion = ""


/** Pipeline */
ansiColor('xterm') {
  node(params.AGENT) {
    /** Directory to build Sidecar within */
    def sidecarWorkDir = "${env.WORKSPACE}/${sidecarModuleName}"

    try {
      stage('Ini') {
        buildName "#${sidecarModuleName}.${env.BUILD_ID}"
        buildDescription "Env: ${namespace.getWorkspaceName()}\nBranch: ${params.MODULE_BRANCH}\n" + "Config: ${params.CONFIG_TYPE}\n${currentBuild.getBuildCauses()[0].shortDescription}"
      }

      stage('[Git] Checkout') {
        checkout([
          $class           : 'GitSCM',
          branches         : [[name: "*/${featureBranch}"]],
          extensions       : [[$class: 'RelativeTargetDirectory', relativeTargetDir: sidecarModuleName],
                              [$class: 'CleanBeforeCheckout', deleteUntrackedNestedRepositories: true],
                              [$class: 'AuthorInChangelog'],
                              [$class: 'SubmoduleOption', recursiveSubmodules: true]],
          userRemoteConfigs: [[url: "https://github.com/folio-org/${sidecarModuleName}.git"]]
        ])
      }

      stage('[Maven] Compile') {
        dir(sidecarWorkDir) {
          /** Read Sidecar version from its pom.xml file PLUS the latest commit hash on branch*/
          sidecarVersion = readMavenPom(file: 'pom.xml').version + ".${featureHash}"

          /** Build Sidecar as Maven Project */
          withMaven(
            jdk: "${common.selectJavaBasedOnAgent(params.AGENT)}".toString(),
            maven: Constants.MAVEN_TOOL_NAME,
            traceability: false,
            options: [artifactsPublisher(disabled: true)]
          ) {
            sh """
              mvn versions:set -DnewVersion=${sidecarVersion}
              mvn package ${mavenArguments}
            """.stripIndent()
          }
        }
      }

      stage('[Docker] Build and Push') {
        /** Put Docker Image to Amazon ECR repository */
        docker.withRegistry(
          "https://${Constants.ECR_FOLIO_REPOSITORY}",
          "ecr:${Constants.AWS_REGION}:${Constants.ECR_FOLIO_REPOSITORY_CREDENTIALS_ID}"
        ) {
          /** Check if ECR Repository exists. If it does not exist, create it */
          common.checkEcrRepoExistence(sidecarModuleName)

          dir(sidecarWorkDir) {
            /** Build Docker Image */
            def dockerImage = docker.build("${sidecarModuleName}:${sidecarVersion}", '--no-cache=true --pull=true .')

            /** Push Docker Image to ECR */
            dockerImage.push()
          }
        }
      }

      stage('[Kubectl] Deploy') {
        try {
          folioHelm.withKubeConfig(namespace.clusterName) {
            def getHelmReleasesCmd = "helm list --short --namespace ${params.NAMESPACE} --filter mod-*" as String
            def releases = sh(script: getHelmReleasesCmd, returnStdout: true).trim()

            int limit = 10
            releases.tokenize().collate(limit).each { release ->
              def branches = [:]
              release.each { rel ->
                branches[rel.toString()] = {
                  def upgradeHelmReleaseCmd = """
                    helm upgrade ${rel} ${Constants.FOLIO_HELM_V2_REPO_NAME}/${rel} \
                    --namespace ${params.NAMESPACE} \
                    --reuse-values \
                    --set sidecarContainers.eureka.image.repository=${Constants.ECR_FOLIO_REPOSITORY}/${sidecarModuleName} \
                    --set sidecarContainers.eureka.image.tag=${sidecarVersion} \
                    --atomic
                  """.stripIndent() as String

                  /** Deploy Sidecar to Kubernetes namespace */
                  sh(script: upgradeHelmReleaseCmd, returnStdout: true)
                }
              }
              parallel branches
            }
          }
        } catch (e) {
          logger.warning("Failed to deploy new Sidecar version from feature branch: ${e.getMessage()}")
          throw e
        }
      }

    } catch (e) {
      logger.warning("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        logger.debug("Workspace size: ${sh(returnStdout: true, script: 'du -sh .').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}
