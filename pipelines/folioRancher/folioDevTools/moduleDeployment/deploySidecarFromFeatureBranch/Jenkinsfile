package folioRancher.folioDevTools.moduleDeployment.deploySidecarFromFeatureBranch

import org.folio.Constants
import org.folio.models.EurekaNamespace
import org.folio.utilities.Logger
import org.folio.utilities.GitHubClient
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-1894') _

/** Pipeline properties and parameters */
properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    string(name: 'MODULE_NAME', defaultValue: 'folio-module-sidecar', description: 'GitHub Repository Name for Sidecar application'),
    folioParameters.branchWithRef('MODULE_BRANCH', 'MODULE_NAME'),
    string(name: 'MAVEN_ARGS', defaultValue: '-DskipTests', description: 'Maven build arguments'),
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.configType(),
    folioParameters.agent(),
    folioParameters.refreshParameters(),
  ])
])

/** Re-read updated Jenkinsfile code */
if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

/** Job variables */
Logger logger = new Logger(this, env.JOB_BASE_NAME)

/** Collect Rancher Namespace Configuration */
EurekaNamespace namespace = new EurekaNamespace(params.CLUSTER, params.NAMESPACE)
  .withDeploymentConfigType(params.CONFIG_TYPE) as EurekaNamespace

/** Collect feature branch and hash */
String featureBranch = params.MODULE_BRANCH
String featureHash = new GitHubClient(this).getBranchInfo(params.MODULE_NAME, featureBranch).commit.sha.take(7)

/** Collect Maven arguments */
String mavenArguments = params.MAVEN_ARGS.trim()

/** Pipeline */
ansiColor('xterm') {
  node(params.AGENT) {
    try {
      stage('Ini') {
        buildName "#${params.MODULE_NAME}.${env.BUILD_ID}"
        buildDescription "Env: ${namespace.getWorkspaceName()}\nBranch: ${params.MODULE_BRANCH}\n" + "Config: ${params.CONFIG_TYPE}\n${currentBuild.getBuildCauses()[0].shortDescription}"
      }

      stage('[Git] Checkout source') {
        checkout([
          $class           : 'GitSCM',
          branches         : [[name: "*/${featureBranch}"]],
          extensions       : [[$class: 'RelativeTargetDirectory', relativeTargetDir: params.MODULE_NAME],
                              [$class: 'CleanBeforeCheckout', deleteUntrackedNestedRepositories: true],
                              [$class: 'AuthorInChangelog'],
                              [$class: 'SubmoduleOption', recursiveSubmodules: true]],
          userRemoteConfigs: [[url: "https://github.com/folio-org/${params.MODULE_NAME}.git"]]
        ])
      }

      stage('[Maven] Compile') {
        dir("${env.WORKSPACE}/${params.MODULE_NAME}") {
          // Read Sidecar version from its pom.xml file
          def sidecarVersion = readMavenPom(file: 'pom.xml').version

          // Build Sidecar as Maven Project
          withMaven(jdk: "${common.selectJavaBasedOnAgent(params.AGENT)}".toString(),
                    maven: Constants.MAVEN_TOOL_NAME,
                    traceability: false,
                    options: [artifactsPublisher(disabled: true)])
          {
              sh """
                mvn versions:set -DnewVersion=${sidecarVersion}
                mvn package ${mavenArguments}
              """.stripIndent()
          }
        }
      }

    } catch (e) {
      logger.warning("Caught exception: ${e}")
      error(e.getMessage())
    } finally {
      stage('Cleanup') {
        logger.debug("Workspace size: ${sh(returnStdout: true, script: 'du -sh .').trim()}")
        cleanWs notFailBuild: true
      }
    }
  }
}
