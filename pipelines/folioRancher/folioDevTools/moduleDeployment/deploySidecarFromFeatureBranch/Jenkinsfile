#!groovy
import org.folio.Constants
import org.folio.jenkins.PodTemplates
import org.folio.models.EurekaNamespace
import org.folio.utilities.GitHubClient
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-2116') _


/** Sidecar module name (repository name) */
def sidecarModuleName = 'folio-module-sidecar'

/** Pipeline properties and parameters */
properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  disableConcurrentBuilds(),
  parameters([
    folioParameters.branch('MODULE_BRANCH', sidecarModuleName),
    booleanParam(name: 'NATIVE', defaultValue: false, description: 'Build native [SC] image'),
    folioParameters.refreshParameters(),
  ])
])

/** Re-read updated Jenkinsfile code */
if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

/** Job variables */
PodTemplates podTemplates = new PodTemplates(this)
Logger logger = new Logger(this, env.JOB_BASE_NAME)

/** Collect feature branch and hash */
String featureBranch = params.MODULE_BRANCH
String featureHash = ""

/** Collect Maven arguments */

def  mavenArguments = '-DskipTests=true'

if (params.NATIVE) {
  mavenArguments += ' -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.1-java21 -Dquarkus.native.additional-build-args="-H:CompilerBackend=llvm -H:+UnlockExperimentalVMOptions -H:CCompilerOption=-march=core-avx2 --initialize-at-run-time=javax.net.ssl.SSLContext,com.bettercloud.vault.rest.Rest"'
  logger.info("Building native image for ${sidecarModuleName} on branch ${featureBranch}with options: ${mavenArguments}")
} else {
  logger.info("Building regular image for ${sidecarModuleName} on branch ${featureBranch}")
}

/** Sidecar version */
def sidecarVersion = ""


/** Pipeline */
ansiColor('xterm') {
  podTemplates.javaBuildAgent(Constants.JAVA_LATEST_VERSION) {
    /** Directory to build Sidecar within */
    def sidecarWorkDir = "${env.WORKSPACE}/${sidecarModuleName}"
    stage('Ini') {
      featureHash = new GitHubClient(this).getBranchInfo(sidecarModuleName, featureBranch).commit.sha.take(7)

      buildName "#${sidecarModuleName}.${env.BUILD_ID}"
      buildDescription  "isNative: ${params.NATIVE}\nbranch: ${featureBranch}\nhash: ${featureHash}"
    }

    stage('[Git] Checkout') {
      checkout(scmGit(
        branches: [[name: "*/${featureBranch}"]],
        extensions: [cloneOption(depth: 50, noTags: true, reference: '', shallow: true),
                     authorInChangelog(),
                     submodule(recursiveSubmodules: true, reference: ''),
                     [$class: 'RelativeTargetDirectory', relativeTargetDir: sidecarModuleName]],
        userRemoteConfigs: [[credentialsId: Constants.PRIVATE_GITHUB_CREDENTIALS_ID,
                             url          : "${Constants.FOLIO_GITHUB_URL}/${sidecarModuleName}.git"]]))
    }

    stage('[Maven] Compile') {
      container('java') {
        dir(sidecarWorkDir) {
          /** Read Sidecar version from its pom.xml file PLUS the latest commit hash on branch*/
          sidecarVersion = (readMavenPom(file: 'pom.xml').version - '-SNAPSHOT') + (params.NATIVE ? "-native.${featureHash}" : ".${featureHash}")

          /** Build Sidecar as Maven Project */
          withMaven(jdk: Constants.JAVA_TOOL_NAME,
            maven: Constants.MAVEN_TOOL_NAME,
            traceability: false,
            options: [artifactsPublisher(disabled: true)]) {
            sh """
                  mvn versions:set -DnewVersion=${sidecarVersion}
                  mvn package ${mavenArguments}
                """.stripIndent()
          }
        }
      }
    }

    stage('[Docker] Build and Push') {
      common.checkEcrRepoExistence(sidecarModuleName)
      container('kaniko') {
        withAWS(credentials: Constants.ECR_FOLIO_REPOSITORY_CREDENTIALS_ID, region: Constants.AWS_REGION) {
          ecrLogin()
          folioKaniko.dockerHubLogin()
          // Build and push the image
          dir(sidecarWorkDir) {
            if (params.NATIVE) {
              sh """/kaniko/executor --destination \
                  ${Constants.ECR_FOLIO_REPOSITORY}/${sidecarModuleName}:${sidecarVersion} -f docker/Dockerfile.native-micro --context .""".stripIndent()
            } else {
              sh """/kaniko/executor --destination \
                  ${Constants.ECR_FOLIO_REPOSITORY}/${sidecarModuleName}:${sidecarVersion} --context .""".stripIndent()
            }
          }
        }
      }
      writeFile file: "folio-module-sidecar-${sidecarVersion}.txt", text: "folio-module-sidecar-${sidecarVersion}"
      archiveArtifacts artifacts: "folio-module-sidecar-${sidecarVersion}.txt" , onlyIfSuccessful: true
    }
  }
}
