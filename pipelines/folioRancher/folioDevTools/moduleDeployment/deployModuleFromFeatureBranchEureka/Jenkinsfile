#!groovy
import hudson.AbortException
import org.folio.Constants
import org.folio.jenkins.PodTemplates
import org.folio.models.FolioInstallJson
import org.folio.models.EurekaNamespace
import org.folio.models.module.EurekaModule
import org.folio.models.module.FolioModule
import org.folio.rest_v2.eureka.Keycloak
import org.folio.rest_v2.eureka.kong.Tenants
import org.folio.models.module.ModuleBuildTool
import org.folio.rest_v2.eureka.Eureka
import org.folio.utilities.GitHubClient
import org.folio.utilities.RestClient
import org.folio.utilities.Logger
import org.jenkinsci.plugins.workflow.libs.Library

@Library('pipelines-shared-library@RANCHER-2496') _

/** Job properties and parameters */
properties([
  buildDiscarder(logRotator(numToKeepStr: '30')),
  parameters([
    folioParameters.moduleName(),
    folioParameters.branchWithRef('MODULE_BRANCH', 'MODULE_NAME'),
    string(name: 'MAVEN_ARGS', defaultValue: '-DskipTests', description: 'Maven build arguments'),
    choice(name: 'JAVA_VERSION', choices: ['21', '17'], description: 'Java version to use for tests'),
    folioParameters.cluster(),
    folioParameters.namespace(),
    folioParameters.configType(),
    booleanParam(name: 'FORCE_MVN_CACHE_REFRESH', defaultValue: false, description: 'Force Maven cache refresh'),
    booleanParam(name: 'CLEANUP_ENV', defaultValue: true, description: 'Delete karate tests tenants before deployment'),
    booleanParam(name: 'SIMPLIFIED', defaultValue: false, description: 'Use simplified deployment process'),
    folioParameters.refreshParameters(),
  ])
])

if (params.REFRESH_PARAMETERS) {
  currentBuild.result = 'ABORTED'
  return
}

if (params.NAMESPACE in Constants.RANCHER_PROTECTED_NAMESPACES) {
 folioCommon.kitfoxApproval()
}


/** Job variables */
PodTemplates podTemplates = new PodTemplates(this, true)
Logger logger = new Logger(this, env.JOB_BASE_NAME)

/** Collect Rancher Namespace Configuration */
EurekaNamespace namespace = new EurekaNamespace(params.CLUSTER, params.NAMESPACE)
  .withDeploymentConfigType(params.CONFIG_TYPE) as EurekaNamespace

/** Assign Desired Resource Profile for Environment */
namespace.addDeploymentConfig(folioTools.getPipelineBranch())

/** Assign Default Tenant Id to Namespace instance */
String defaultTenantId = 'diku'
namespace.withDefaultTenant(defaultTenantId)

/** Collect Folio module configuration */
EurekaModule module = new EurekaModule()
module.name = params.MODULE_NAME

/** Collect feature branch and hash */
String featureBranch = params.MODULE_BRANCH
String featureHash = ""

/** Collect Maven arguments */
String mavenArguments = params.FORCE_MVN_CACHE_REFRESH ? "-U ${params.MAVEN_ARGS.trim()}" : params.MAVEN_ARGS.trim()

/** Collect Gradle arguments */
String commonGradleOpts = '--quiet --console plain --no-daemon'

/** Init Eureka Application Instance */
Eureka eureka = new Eureka(this, namespace.generateDomain('kong'), namespace.generateDomain('keycloak'), false)

/** Pipeline */
ansiColor('xterm') {
  podTemplates.javaBuildAgent(params.JAVA_VERSION) {
    stage('Ini') {
      buildName "#${params.MODULE_NAME}.${env.BUILD_ID}"
      buildDescription "Env: ${namespace.getWorkspaceName()}\nBranch: ${params.MODULE_BRANCH}\n" + "Config: ${params.CONFIG_TYPE}\n${currentBuild.getBuildCauses()[0].shortDescription}"

      featureHash = new GitHubClient(this).getBranchInfo(module.getName(), featureBranch).commit.sha.take(7)
    }

    stage('[Git] Checkout module source') {
      checkout(scmGit(
        branches: [[name: "*/${featureBranch}"]],
        extensions: [cloneOption(depth: 50, noTags: true, reference: '', shallow: true),
                     authorInChangelog(),
                     submodule(recursiveSubmodules: true, reference: ''),
                     [$class: 'RelativeTargetDirectory', relativeTargetDir: "${module.getName()}"]],
        userRemoteConfigs: [[credentialsId: Constants.PRIVATE_GITHUB_CREDENTIALS_ID,
                             url          : "${Constants.FOLIO_GITHUB_URL}/${module.getName()}.git"]]))
    }

    stage('[isRunning]') {
      folioHelm.withKubeConfig(namespace.getClusterName()) {
        def check = sh(script: "kubectl get pods --namespace ${namespace.getNamespaceName()} --no-headers", returnStdout: true).trim()
        if (!check.contains(module.getName())) {
          logger.error("Reason: target env is not running or module: ${module.getName()} is not presented in environment")
        }
      }
    }

    stage('[Pre-condition] CleanUp Karate tenants') {
        if (params.CLEANUP_ENV) {
          folioTools.karateTenantsCleanUp(params.CLUSTER, params.NAMESPACE)
        }
      }

    stage('[Maven/Gradle] Compile') {
      container('java') {
        // Check if Maven or Gradle build tool is used
        module.buildTool = fileExists("${module.name}/pom.xml") ? ModuleBuildTool.MAVEN : ModuleBuildTool.GRADLE

        switch (module.buildTool) {
          case ModuleBuildTool.MAVEN:
            logger.info("Maven build tool is used")
            module.buildDir = "${env.WORKSPACE}/${module.name}"

            dir(module.buildDir) {
              // Read module version from pom.xml
              String moduleVersion = readMavenPom(file: 'pom.xml').version

              // Load Module Details for Maven builds
              module.loadModuleDetails("${module.name}-${moduleVersion}.${featureHash}")

              // Build Module as Maven Project
              withMaven(
                jdk: Constants.JAVA_TOOL_NAME,
                maven: Constants.MAVEN_TOOL_NAME,
                mavenOpts: '-XX:MaxRAMPercentage=85',
                mavenLocalRepo: "${podTemplates.WORKING_DIR}/.m2/repository",
                traceability: true,
                options: [artifactsPublisher(disabled: true)]) {
                  sh """
                    mvn versions:set -DnewVersion=${module.getVersion()}
                    mvn package ${mavenArguments}
                  """.stripIndent()
              }
            }
            break

          case ModuleBuildTool.GRADLE:
            logger.info("Gradle build tool is used")
            module.buildDir = "${env.WORKSPACE}/${module.name}/service"

            dir(module.buildDir) {
              // Read module version from gradle.properties
              String moduleVersion = readProperties(file: "gradle.properties")['appVersion']

              // Load Module Details for Gradle builds
              module.loadModuleDetails("${module.name}-${moduleVersion}.${featureHash}")

              // Build Module as Gradle Project
              sh "./gradlew ${commonGradleOpts} -PappVersion=${module.getVersion()} assemble"
            }
            break

          default:
            error("Unsupported build tool: ${module.buildTool}")
        }
      }
    }

    stage('[Docker] Build and push') {
      // Check if ECR Repository exists, if not create it
      common.checkEcrRepoExistence(module.name)
      // Put Docker Image to Amazon ECR
      container('kaniko') {
        dir(module.buildDir) {
          switch (module.buildTool) {
            case ModuleBuildTool.MAVEN:
              module.modDescriptorPath = "${module.buildDir}/target/ModuleDescriptor.json"
              withAWS(credentials: Constants.ECR_FOLIO_REPOSITORY_CREDENTIALS_ID, region: Constants.AWS_REGION) {
                ecrLogin()
                folioKaniko.dockerHubLogin()
                // Build and Push Docker Image
                sh "/kaniko/executor --destination ${Constants.ECR_FOLIO_REPOSITORY}/${module.name}:${module.version} --context ."
              }
              break

            case ModuleBuildTool.GRADLE:
              module.modDescriptorPath = "${module.buildDir}/build/resources/main/okapi/ModuleDescriptor.json"

              // Build Docker Image
              String shellCmd = """
                  echo '[INFO] Build Docker Image'
                  ./gradlew ${commonGradleOpts} -PdockerRepo=folioci -PappVersion=${module.version} buildImage

                  echo '[INFO] Rename Local Docker Image'
                  docker tag folioci/${module.name}:${module.version}.${env.BUILD_NUMBER} ${module.name}:${module.version}

                  echo '[INFO] Get rid of BUILD_NUMBER in Module Descriptor'
                  [ -e ${module.modDescriptorPath} ] && sed -i 's#${module.version}.${env.BUILD_NUMBER}#${module.version}#g' ${module.modDescriptorPath}
                """.stripIndent()

              sh(label: 'Build Docker Image', script: shellCmd)

              // Push Docker Image to Amazon ECR
              docker.image("${module.name}:${module.version}").push()
              break

            default:
              error("Unsupported build tool: ${module.buildTool}")
          }
        }
      }

      // Upload Module Descriptor to Eureka Module Registry
      sh(script: "[ -e ${module.modDescriptorPath} ] && curl -sS -X PUT ${Constants.EUREKA_REGISTRY_DESCRIPTORS_URL}${module.name}-${module.version} --upload-file ${module.modDescriptorPath}")

      // Save Module Descriptor to Module instance for further usage
      module.descriptor = [readJSON(file: module.modDescriptorPath)]
    }

    stage('Generate context') {
      eureka.getExistedTenantsForModule("${namespace.getClusterName()}-${namespace.getNamespaceName()}", module.getName())
        .values().each {namespace.addTenant(it) }

      namespace.tenants.values().each {it.getModules().addModule(module)}

      if (!(namespace.tenants))
        throw new Exception("There are no tenants with the module ${module.getName()}")
    }

    stage("Retrieve module's sidecar") {
      folioHelm.withKubeConfig(namespace.getClusterName()) {
        String sidecarImage =
          kubectl.getDeploymentContainerImageName(namespace.getNamespaceName(), module.getName(), "sidecar")
            .replace(':', '-')

        // In case updated module doesn't have Sidecar let's seek for it in other modules.
        if (!sidecarImage) {
          EurekaModule moduleWithSidecar = namespace.modules.getInstallJsonObject().find { fetchedModule ->
            kubectl.getDeploymentContainerImageName(namespace.getNamespaceName(), fetchedModule.getName(), "sidecar")
              .replace(':', '-')
          }

          sidecarImage =
            kubectl.getDeploymentContainerImageName(namespace.getNamespaceName(), moduleWithSidecar.getName(), "sidecar")
              .replace(':', '-')
        }

        if (sidecarImage)
          namespace.modules.addModule(sidecarImage)
        else
          throw new AbortException('There are no modules with sidecar in the namespace')
      }

      logger.debug("Configured Tenants: ${namespace.tenants}")
      logger.debug("Configured Applications: ${namespace.applications}")
      logger.debug("Namespace modules: ${namespace.modules.installJsonObject}")
    }

    /** Updated Applications Info Map<AppName, AppID> */
    Map<String, String> updatedAppInfoMap = [:]
    if (params.SIMPLIFIED) {
      stage('[Deploy] Update Module Image') {
        folioHelm.withKubeConfig(namespace.clusterName) {
          sh(script: "kubectl set image deployment/${module.name} ${module.name}=${Constants.ECR_FOLIO_REPOSITORY}/${module.name}:${module.version} -n ${namespace.getNamespaceName()}", returnStdout: true)
          folioHelm.checkDeploymentsRunning(namespace.getNamespaceName(), namespace.getModules().getBackendModules())
        }
      }
      stage('[Invoke] /tenant API POST calls') {
        RestClient restClient = new RestClient(this)
        def tenants = restClient.get("https://${namespace.generateDomain("kong")}/tenants?limit=500").body.tenants
        def apps = restClient.get("https://${namespace.generateDomain("kong")}/applications?limit=500").body.applicationDescriptors
        Keycloak keycloak = new Keycloak(this, "https://" + namespace.generateDomain("keycloak"), false)
        tenants.each { tenant ->
          Map body = [
          tenantId: tenant.id,
          applications: [apps.findAll { it.modules.contains(module.name) }*.id]
          ]
          restClient.post("https://${namespace.generateDomain("kong")}/reinstall/applications", body, keycloak.getAuthMasterTenantHeaders())
        }
      }

    } else {
    // 1. Register Application Descriptor with Updated Module Version
    stage('[Rest] Update App Descriptor') {
      try {
        updatedAppInfoMap = eureka.updateAppDescriptorFlow(namespace.applications, module)
      } catch (e) {
        logger.warning("Failed to register new application descriptor: ${e}")
        eureka.removeResourcesOnFailFlow(updatedAppInfoMap, module)
        throw e
      }
    }

    // 2. Enable New Module Version (Discovery) for Application
    stage('[Rest] Module Discovery') {
      try {
        eureka.registerModulesFlow(new FolioInstallJson<FolioModule>(EurekaModule.class).addModule(module))
      } catch (e) {
        logger.warning("Failed to perform new module discovery: ${e}")
        eureka.removeResourcesOnFailFlow(updatedAppInfoMap, module)
        throw e
      }
    }

    // 3. Deploy New Module Version to Rancher Namespace via Helm
    stage('[Helm] Deploy Module Ver') {
      try {
        folioHelm.withKubeConfig(namespace.clusterName) {
          folioHelm.deployFolioModule(namespace, module.name, module.version, false, namespace.defaultTenantId)
          echo "Module ${module.name}-${module.version} deployed to ${namespace.clusterName} namespace ${namespace.workspaceName}"
          echo "Waiting another 3 minutes to get module initialized..."
          sleep time: 3, unit: 'MINUTES'
        }
      } catch (e) {
        logger.warning("Failed to deploy new module version via Helm: ${e}")
        eureka.removeResourcesOnFailFlow(updatedAppInfoMap, module)
        throw e
      }
    }

    // 4. Enable Application Descriptor with Updated Module Version for Tenants in Namespace
    stage('[Rest] Enable New App') {
      try {
        namespace.getTenants().values().each {tenant ->
          Tenants.get(eureka.getKong()).updateApplications(tenant, updatedAppInfoMap.values().toList())
        }
      } catch (e) {
        logger.warning("Failed to enable (entitle) new application version: ${e}")
        eureka.removeResourcesOnFailFlow(updatedAppInfoMap, module)
        throw e
      }
    }

    stage('[Rest] Remove Stale Resources') {
      eureka.removeStaleResourcesFlow(namespace.applications, updatedAppInfoMap, module)
      }
    }
  }
}
